{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/leancloud.memo","path":"leancloud.memo","modified":1,"renderable":0},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1610678376549},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1610678376553},{"_id":"source/leancloud.memo","hash":"1cc3b0dbe4b77c5a14dcaa393dadf68607ec4653","modified":1611545847453},{"_id":"themes/next/.all-contributorsrc","hash":"0ca0200bb5cba4cd157f2cb74703c4cb4c29cda5","modified":1610678376547},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1610678376551},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1610678376555},{"_id":"themes/next/README.md","hash":"943f9fd6ed1781350cdd05a26a1cfad24d035c8b","modified":1610678376585},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1610678376576},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1610678376583},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1610678376581},{"_id":"themes/next/_config.yml","hash":"c436daa7848661a6f9756a28359a66281d19061e","modified":1610678376589},{"_id":"themes/next/package.json","hash":"0a6b9a8d9ccf52a5941ce4ec28d5b490adbd9970","modified":1610678377102},{"_id":"themes/next/bower.json","hash":"edbe7db4e39af86bb3163df5f0ab87cc0b420479","modified":1610678376591},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1610678376594},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1610678376663},{"_id":"source/_posts/TDD.md","hash":"cdd941b0f46dc599f5e984fce1909ef8663a609e","modified":1610678376457},{"_id":"source/_posts/Koa.md","hash":"46a6a254f9fc2f1bab8325657c361c89d9867fbd","modified":1610678376455},{"_id":"source/_posts/axios.md","hash":"6d78766bc8e3c1c83a8955f383c85b79058bd728","modified":1610688926889},{"_id":"source/_posts/design-patterns.md","hash":"7584767a35640a6366acdcb5ba088523decdbf45","modified":1610678376462},{"_id":"source/_posts/es6Class.md","hash":"6578a2282140cd89b4fdc1573a5c05a425a8bd7b","modified":1610678376465},{"_id":"source/_posts/gitCommand.md","hash":"fe9839dcd88300d4d61959da4e5d1fec84e0a9b3","modified":1610678376479},{"_id":"source/_posts/grunt.md","hash":"7e0605c201d2d82d7b546410fc70d7a45aa4ec34","modified":1610678376482},{"_id":"source/_posts/karma.md","hash":"719c1f47c5c1926bedd5c6ef52539a81d994d438","modified":1611545653027},{"_id":"source/_posts/mocha.md","hash":"4881c037e4f06c422580a7f99eda5587e5b23af8","modified":1610678376492},{"_id":"source/_posts/no-network-linux-install-nodeJs.md","hash":"b98736d79337c6a891b7f663d7fafb95c5917cb0","modified":1610678376494},{"_id":"source/_posts/promise.md","hash":"4163d1eb4d6b64985c3f9aae1350e6afeb7cdc2d","modified":1610678376516},{"_id":"source/_posts/npm-command.md","hash":"cfaa0699cb64b8c6d9c07a6d64d15d7339b8490e","modified":1610678376513},{"_id":"source/_posts/protractor.md","hash":"0af9640177e301f25b351215fe94228474c671bf","modified":1610678376518},{"_id":"source/_posts/tcp.md","hash":"5c1a2ef240b480ea11a90612d7f4478478cbec43","modified":1610678376520},{"_id":"source/_posts/vue.md","hash":"7f4feeb2236ef162b2e9351ba9f4747e1b64155e","modified":1610678376529},{"_id":"source/_posts/webdriverio-cucumber.md","hash":"6ff2b4bc264350069efa339f2b1c16f3f23f27a6","modified":1610678376531},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"40b0fd9fdb8586fab98e23f713940e7a2f80e2f9","modified":1610678376561},{"_id":"source/tags/index.md","hash":"b35f755f0fb51f5baf80c093f871187d562aa0a7","modified":1610678376542},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1610678376559},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1610678376569},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1610678376563},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"36201119490a04107c8179b10202548a9d0e5e60","modified":1610678376566},{"_id":"themes/next/.github/stale.yml","hash":"2d184d1ac19aee16134f562d5bce4d9efda24847","modified":1610678376572},{"_id":"source/categories/index.md","hash":"219786914e7b5601f21e788eae11bad8a6b804f9","modified":1610678376534},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1610678376597},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1610678376600},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1610678376605},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1610678376602},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1610678376608},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"f2fd611a84dd6f9ed5395b63e187e29e9effbcd3","modified":1610678376611},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1610678376613},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1610678376615},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1610678376669},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1610678376617},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1610678376678},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1610678376667},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1610678376676},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1610678376680},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1610678376683},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1610678376685},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1610678376687},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1610678376695},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1610678376703},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1610678376698},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1610678376701},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1610678376707},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1610678376705},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1610678376709},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1610678376711},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1610678376714},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1610678376716},{"_id":"themes/next/layout/_layout.swig","hash":"2ca1956581c48150c9291b31794b95dd3f559252","modified":1610678376732},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1610678377008},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1610678377016},{"_id":"themes/next/layout/page.swig","hash":"75ff753543bcbf992e346eb471f4097819971465","modified":1610678377019},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1610678377013},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1610678377118},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1610678377121},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1610678377097},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1610678377100},{"_id":"themes/next/layout/post.swig","hash":"0554f42f90f4a524666c2b520be30b689c1d6a87","modified":1610678377022},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1610678377961},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1610678377964},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610678377764},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1610678377986},{"_id":"source/_posts/no-network-linux-install-nodeJs/img2.jpg","hash":"36c12ab7db7edb1c988f0a5286a95f540b2e408e","modified":1610678376501},{"_id":"source/_posts/no-network-linux-install-nodeJs/img1.jpg","hash":"0c374b2c9a42ec5c4285e7ba223b2cbede22fe55","modified":1610678376498},{"_id":"source/_posts/no-network-linux-install-nodeJs/img3.jpg","hash":"511b9987351d6ed0bb1eb459f3fa80da8690bc73","modified":1610678376503},{"_id":"source/_posts/no-network-linux-install-nodeJs/img5.jpg","hash":"253cf7f9d2729a8f5924e95222c75869fcc12e41","modified":1610678376508},{"_id":"source/_posts/no-network-linux-install-nodeJs/img4.jpg","hash":"eee7cab5c53a4a334156d838a8ea79c7432c4e4c","modified":1610678376505},{"_id":"source/_posts/tcp/img1.png","hash":"db73572f2a4824d0b994a70893f9ee67bdb8e7bb","modified":1610678376523},{"_id":"source/_posts/tcp/img2.png","hash":"ec605b22ae384a307802ae91a7bc00a89719c199","modified":1610678376527},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1610678376621},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1610678376623},{"_id":"themes/next/docs/ru/README.md","hash":"0b69e831b4617f801d9b49e8ce810daacbbee6c1","modified":1610678376625},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1610678376628},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1610678376635},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1610678376637},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1610678376641},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1610678376633},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1610678376643},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"7214fcd1b5830e62b3ac0836ad2d1b0fa391ae12","modified":1610678376646},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"69d73e86d8f7d2deafc436df84713a1425704d8a","modified":1610678376649},{"_id":"themes/next/docs/zh-CN/README.md","hash":"7fb215a0a633384948ac9228ac14617b4a974dbd","modified":1610678376652},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1610678376724},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1610678376730},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1610678376656},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1610678376722},{"_id":"themes/next/layout/_macro/post.swig","hash":"9f2ed59121d409347cf6aa47818ba10a23bff28f","modified":1610678376745},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6f3b4fa9390b93454ea69c407c58d4dfcc507f65","modified":1610678376743},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"2d29cbec8f00680ac6776a4373fc197ffbdb2cd3","modified":1610678376747},{"_id":"themes/next/layout/_partials/comments.swig","hash":"f1e25d53d76f898d280d0422d037e646d11f342b","modified":1610678376751},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1610678376753},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"20704846a29d72b24f6e446a6c22b10cf50a624b","modified":1610678376755},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1610678376788},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1610678376792},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"6337747816219616916e73bdfd6961a164f872cf","modified":1610678376834},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"dcefdf14856f0c94fa687463fa7411b262cc0d58","modified":1610678376840},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"c31d54154eed347f603009d2d65f7bf8d9a6885a","modified":1610678376836},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"579a39a8005d957e5b0cf4eea42f68063a3d10f0","modified":1610678376855},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"9e00cb9b3fdfe2e2c4877a874d0d3ecb7fd0f3ee","modified":1610678376951},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"5c75a183c3ca6e62a63ad1931fc5a0a178649e70","modified":1610678376949},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"f67ec79cd949c10eb280014f839530d610758b64","modified":1610678376921},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"debba9b7110f635204a15df148194d4c2fd2668b","modified":1610678376962},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"2b6c626f68f20d83023c749b62fffd54af42fc9a","modified":1610678376968},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"4142df872d10f98c255ed726a38c26e3ff46f16a","modified":1610678376970},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1610678377114},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3db90c52bc8af57c6fa4a9dbdc524e1ecdc8b7b1","modified":1610678377116},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1610678377127},{"_id":"themes/next/scripts/tags/button.js","hash":"510f3711a9c9d3e2a844250647d90e8359e7d130","modified":1610678377125},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ef2c2985a3edb9f69740740c5bc42d4b692c86fd","modified":1610678377145},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"aface11629970a5c4ee38aaa15550d2caee59560","modified":1610678377148},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1610678377143},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1610678377151},{"_id":"themes/next/scripts/tags/label.js","hash":"bb502616bfabe85de5de903074ec6afe627f8413","modified":1610678377154},{"_id":"themes/next/scripts/tags/note.js","hash":"bd3310a5890bded1bda9ba3ad6f98ee44ecb101a","modified":1610678377156},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2d257e26718d4011509fd6f530d2ea37e50e3e66","modified":1610678377158},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"a4931a5c2f7f477d65cd76b5724f4ae3a509ae7a","modified":1610678376965},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1610678376972},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"f58463133bf8cfef5ff07f686b834ff8cbbe492f","modified":1610678376986},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610678377771},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1610678377769},{"_id":"themes/next/source/css/main.styl","hash":"2a62e2a11e9cdcc69e538d856d6f9ce228a07c93","modified":1610678377761},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1610678377778},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1610678377775},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1610678377781},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1610678377784},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1610678377786},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1610678377788},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1610678377811},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610678377817},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610678377816},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1610678377821},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1610678377826},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1610678377814},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1610678377833},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1610678377824},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1610678377828},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1610678377831},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610678376848},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610678376850},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610678377577},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610678377580},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610678377587},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610678377711},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610678377757},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1610678376737},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"e40fcb1803aaa1e60bb348fcfd1a90df5dbba7a2","modified":1610678376739},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1610678376760},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"2177da1d3c64abb6b3398f90885cf543ae6fe6da","modified":1610678376769},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"d8dceb53599acad99bab0a62895bfab75635a893","modified":1610678376763},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1610678376771},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"f3ae3168801304af3d80ec3b84264e1d4201cb89","modified":1610678376773},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"daa6e5b7dbc409d6bf8a031d5413d8229e9c0995","modified":1610678376782},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"f1022e58be187e8f5e371311984a529c8b670461","modified":1610678376765},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"55de88525c05af6053524c78ef4b42b46c3bfb6d","modified":1610678376800},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1610678376785},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1610678376777},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1610678376813},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"b6e7d0af24b4d52d168a4eb0fb29bffa69621395","modified":1610678376804},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"e8dfb86eb62b9c2bc1435d6d1afa95d3b4c7b931","modified":1610678376802},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"7a9b687087793bf5e218cbc345214f927fa5601a","modified":1610678376806},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1610678376818},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1610678376821},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1610678376811},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"3f590e78141c45baeeea2892e898df9f846c09a7","modified":1610678376815},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1610678376827},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1610678376824},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"e0f0a753d4920ffb37ddbc8270515654a0b9b92a","modified":1610678376844},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1610678376847},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1610678376853},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1610678376862},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"1ce5fa218a44cf6e620583e9013e0b674dd6a989","modified":1610678376894},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1610678376866},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"8920693489109dec316f1bd188fc8f478f0d93d9","modified":1610678376864},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1610678376898},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"d461dfe853e5317f62e8551f9d8338c66a9935e7","modified":1610678376905},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1610678376896},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1610678376900},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"cfc932c5db04fef64cc56d3ba0b8ddf3a15a63bd","modified":1610678376903},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1610678376908},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1610678376917},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1610678376914},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"276726e782b7c9108552c2fc7f3733980eb9385b","modified":1610678376919},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"bd8382d4f12df207ed52f75f6e5fb06527970167","modified":1610678376910},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1dd918b4a97b3e30a333ecc6451a4c2e31dc2cab","modified":1610678376934},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"40d17077d1bac4ef858c017f1e2be6c91660929a","modified":1610678376937},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"b7f3144cf2e8f55ddf05bd0be5db32c7d5daff3a","modified":1610678376939},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b98e8acb635beeaa929dab41c8cc5e519b9609b0","modified":1610678376942},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"509cd7cd520f15d8bde51e587dbe08e0255d5d3f","modified":1610678376944},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"30e9e55d9af2ced6e6b156a042026a8b480f0ab0","modified":1610678376955},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"978c1e889f55cdf164707498f6b4e0460c2588df","modified":1610678376925},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9fe4369cf1a0886b4fbae1346db72ae92ab48157","modified":1610678376946},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"860de4ce6fccc516d2f779a4b600a4214d8c18e2","modified":1610678376958},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1610678377005},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ee4552977092a0c4623c128293c9044cbc131504","modified":1610678376960},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"899b5a5e80e2bf441b7c40f24123f26a5097b8de","modified":1610678377110},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1610678377001},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1610678376996},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1610678377572},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1610678377567},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"0bc1c629d071433ee5eb7fc5522e9400cdcbc221","modified":1610678376998},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1610678377585},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"8d6cf29f63c90364f4d3c336f7c9bb794b4c46cc","modified":1610678377707},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1610678377710},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"72927abd51d3a607a6ba32cf882390792b34e834","modified":1610678377715},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e27a1034b0cd9821bab094565e9aa9bb80c6fa3e","modified":1610678377756},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1610678377870},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1610678377872},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1610678377877},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1610678377583},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1610678377875},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1610678377879},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1610678377952},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1610678377949},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1610678377840},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1610678377954},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1610678377843},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1610678377847},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1610678377845},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1610678377850},{"_id":"themes/next/source/js/src/motion.js","hash":"b74d3c6c3b289b00c8e376543d5ad7fe8e7948ec","modified":1610678377852},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1610678377855},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1610678377861},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1610678377863},{"_id":"themes/next/source/js/src/utils.js","hash":"9987086ccd4dd9b0e0e50d99f2e200dbbf78c813","modified":1610678377865},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1610678377911},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"1fd0650a8e5bff2c7146c810b04b3b88ee1f670e","modified":1610678377170},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6e076b5e183eedf425a445e99851f938789c3194","modified":1610678376992},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1610678377175},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1610678376994},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1610678377184},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1610678377177},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1610678377284},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1610678377179},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"fbb6be577529c750ef7c872fe7abdc7ab0faf0f8","modified":1610678377546},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1610678377472},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"c142c8216c2a50e2fa5f3ce127e46e2a44fd88a8","modified":1610678377550},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1610678377552},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1610678377561},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"ab775f23ad475efb25376b5aad752ae8b56cfd8c","modified":1610678377555},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1610678377558},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"60179df0e5c9f7c2e9fda046040536c5d8b02f65","modified":1610678377563},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1610678377601},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"75b8209da432952cb3ead5b2121b72b46312a2fc","modified":1610678377597},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1610678377603},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1610678377605},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1610678377627},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa6c00fdaf8f0ca3b690a5a556671745fb67e2c9","modified":1610678377629},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1610678377633},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2ccb9bdc309b7c1ef183a3dbb0a4621bec54a328","modified":1610678377637},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1610678377655},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1610678377658},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1610678377649},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1610678377652},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1610678377661},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"30d61fa31e405fcfe3d2ff6174ccad60be1745f9","modified":1610678377688},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1610678377693},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b154333408d2c55f4dcf6034ea0df8d952261c3","modified":1610678377691},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1610678377695},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1610678377703},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"8bea9123be2d8ea4c84ed70d2c7e5d6a42545beb","modified":1610678377698},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1610678377700},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1610678377887},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1610678377884},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1610678377891},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1610678377933},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"2fdf36f8a53ff8775aa9fddda15981b00f822649","modified":1610678377859},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1610678377936},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610678377906},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1610678377216},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1610678377218},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"3f3d2a43d1a326bad25b633c8ec9ddd87867224c","modified":1610678377210},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7dd247c8869fdefb5a007045d00f3ef8ceecf300","modified":1610678377205},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1610678377213},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1610678377220},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1610678377223},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1610678377232},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"75855e18fd83a8affe0aa8c78e8d87bcac3f82ea","modified":1610678377235},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1610678377237},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1610678377274},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1610678377266},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"630be616447a982413030e561bbd3a80ac14b120","modified":1610678377268},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1610678377271},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1610678377276},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"ef588bc56eaa5b84296e28f4c2c36d9ea8b3b8c3","modified":1610678377282},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1610678377288},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"317c9ceda655e9dc373ce8e7b71d20b794fce9a4","modified":1610678377311},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1610678377290},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1610678377295},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1610678377297},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1610678377314},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1610678377319},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"7b69c1ad392f8a386854e318d4c8ddeb9ba8d793","modified":1610678377339},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"82bc7fa5d38d98e98cc25f9a73189024fda25e63","modified":1610678377342},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1610678377351},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"c7ca3b90c81eb6b91dd1d336328226471738de54","modified":1610678377345},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1610678377347},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1610678377349},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1610678377384},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5c3141d58970a0614896b6a62fd7a8a8caf4e401","modified":1610678377361},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1610678377355},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"2e36956c5f8802f703c7ce3893d16323a0e09d4c","modified":1610678377370},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"00a504620c454287111dc0ace64c989e1ff97f54","modified":1610678377387},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1610678377391},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1610678377428},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1610678377431},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9e05a2232faabb41bcebb51d545d897a76f077da","modified":1610678377447},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1610678377435},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1610678377466},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1610678377470},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1610678377492},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"94d76e6da600a36d80e2470326ebb6b3be447ccb","modified":1610678377468},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1610678377477},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1610678377496},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1610678377479},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1610678377499},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1610678377501},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1610678377504},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1610678377507},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f4d8144c22544bdb89787c14ab9d39578dae4b7c","modified":1610678377514},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1610678377516},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1610678377521},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1610678377519},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7fc0a470d2e859de775094c485fee75ce67b3550","modified":1610678377523},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1610678377534},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1610678377537},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"acfdd76b1c90d2e384affb3d0006a39b524609d2","modified":1610678377539},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeb4b94c9468f7ca797665a91ce7c07e2a104367","modified":1610678377541},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1610678377946},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1610678377642},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1610678377646},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1610678377684},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610678377899},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610678377903},{"_id":"source/_posts/laugh.mp4","hash":"12631342d11ac95ebe5f3bdd58bda809d9dc3895","modified":1610678376490},{"_id":"source/_posts/es6Class/laugh.mp4","hash":"12631342d11ac95ebe5f3bdd58bda809d9dc3895","modified":1610678376476},{"_id":"public/search.xml","hash":"b539a0af8a5b13df1c6bf25e31397d0cd5b5f419","modified":1615884836488},{"_id":"public/leancloud_counter_security_urls.json","hash":"22d11b0d7d41aea3d9e8d1b1a9752b2f0234068c","modified":1615884836489},{"_id":"public/tags/index.html","hash":"64017a7c1a829f1a6fbb167fc88927540a58f2e9","modified":1615884836696},{"_id":"public/categories/index.html","hash":"a61b9790cc1ccdc2dfe7fbdf77e17b8260204918","modified":1615884836696},{"_id":"public/2021/01/25/karma/index.html","hash":"879f676d86b57c7d43c831d1297f2d8428209245","modified":1615884836697},{"_id":"public/2021/01/15/axios/index.html","hash":"61ac9eb3dcc36b9c90b2b4367f597df523a9db7d","modified":1615884836697},{"_id":"public/2021/01/15/no-network-linux-install-nodeJs/index.html","hash":"855308af2053eb5b21e1330721a4ceb888961e7a","modified":1615884836697},{"_id":"public/2021/01/08/Koa/index.html","hash":"ff70afb2c60e417b5f53ab4f5433f3bd31d72e35","modified":1615884836698},{"_id":"public/2021/01/07/gitCommand/index.html","hash":"f6f83b0a0c68ffbe2b49b173c675f2d2a1b24121","modified":1615884836698},{"_id":"public/2020/10/20/webdriverio-cucumber/index.html","hash":"ad01aaadf997ca9d41c3f4b74462979ce620bcfc","modified":1615884836698},{"_id":"public/2020/09/21/design-patterns/index.html","hash":"628840770b0670e2d83788ec8687e1d1042053af","modified":1615884836698},{"_id":"public/2021/01/08/TDD/index.html","hash":"dfee66b5a6319141cadf876df48913d2a55b02f4","modified":1615884836698},{"_id":"public/2020/04/04/protractor/index.html","hash":"3496ddb2df610b18c3f5d8a3102555d68b7d59fb","modified":1615884836699},{"_id":"public/2019/08/27/grunt/index.html","hash":"411afc1965de118577af03f91c5c49c81acea0a8","modified":1615884836699},{"_id":"public/2019/03/04/es6Class/index.html","hash":"2c6ffd39b930beeafad96aadbabc978cf19c7917","modified":1615884836699},{"_id":"public/2019/01/02/promise/index.html","hash":"7023956034215149590e29310e87c8baea0d50f3","modified":1615884836699},{"_id":"public/2019/01/02/tcp/index.html","hash":"109469990bc37c0596f052863c8007c76c89e61c","modified":1615884836699},{"_id":"public/2019/01/02/vue/index.html","hash":"98dd056ae27874d07ab9149cf969c45655c97d0e","modified":1615884836699},{"_id":"public/2018/12/29/mocha/index.html","hash":"e5ef51341b4fd86b8b6be752f01d0f76d55cb438","modified":1615884836700},{"_id":"public/2018/12/26/npm-command/index.html","hash":"35a4f8f60d9c15ee47b7f587855a531938dcfeae","modified":1615884836700},{"_id":"public/archives/index.html","hash":"bccb06097832dba08d38c8a23f8ec936f4ddf1e6","modified":1615884836700},{"_id":"public/archives/page/2/index.html","hash":"247cb25c032c40ca37fa0b3665de5d241f8163ad","modified":1615884836700},{"_id":"public/archives/2018/index.html","hash":"066147f59b6475f29b2334d7427b7161eaa64904","modified":1615884836700},{"_id":"public/archives/2019/01/index.html","hash":"17f690d9bce623dfec35158f5e0bd7c35e5828e6","modified":1615884836700},{"_id":"public/archives/2019/03/index.html","hash":"070b459b22de56f9f79e317aeb0e9b433b0d2d27","modified":1615884836701},{"_id":"public/archives/2019/08/index.html","hash":"50b73b608eeb95e6e52425b248c6d67d0f12dd5f","modified":1615884836701},{"_id":"public/archives/2018/12/index.html","hash":"a2cc273af98a08dd61affae9460e2a0ded880c4f","modified":1615884836701},{"_id":"public/archives/2019/index.html","hash":"646ca740f92fcedaed4c9a5b81c60a49385f169a","modified":1615884836701},{"_id":"public/archives/2020/04/index.html","hash":"8f71070584246e1a7f18e58804d00f75bdecc380","modified":1615884836701},{"_id":"public/archives/2020/index.html","hash":"ff4d439330aa9c82bb3ae19cdbe2c367a52bb881","modified":1615884836702},{"_id":"public/archives/2021/index.html","hash":"d010bdf66c36112de9fe1a76582d03299cf0a111","modified":1615884836702},{"_id":"public/archives/2020/10/index.html","hash":"7cb8629f29815b571b4fb3c0e259d8a4e1004773","modified":1615884836702},{"_id":"public/categories/node/index.html","hash":"e8af42f742d6d96f3785b9c19c5beff40eb84d8f","modified":1615884836702},{"_id":"public/archives/2020/09/index.html","hash":"188c7ef16342959552eee62ef83e99a3e06c1847","modified":1615884836702},{"_id":"public/categories/TDD/index.html","hash":"ff3026e134b3e4acf2ee6fd9a30f4c44a6421b4b","modified":1615884836703},{"_id":"public/categories/desgin-patterns/index.html","hash":"8796a138e1c06a6cc8187bda578988afa4f9c4f0","modified":1615884836703},{"_id":"public/categories/node/koa/index.html","hash":"29f6e138bd8b85b2320759555b0cafa1ff2ad1c7","modified":1615884836703},{"_id":"public/archives/2021/01/index.html","hash":"49fc49937ea406462e757f1f6916eb4d2feb56ff","modified":1615884836703},{"_id":"public/categories/axios/index.html","hash":"d64917405eda41a9eb7ddd51bae898a98598e942","modified":1615884836703},{"_id":"public/categories/class/index.html","hash":"8ef51b11dff34481c241a5d9284fce997816f65b","modified":1615884836704},{"_id":"public/categories/axios/catch/index.html","hash":"eb0e3aa0eef4ebb69e3c2abd97b7d0cdc5a19245","modified":1615884836704},{"_id":"public/categories/linux/index.html","hash":"23c339a3a9a63a1302678d4ff053dc4a2817791c","modified":1615884836704},{"_id":"public/categories/git/index.html","hash":"0c7f8f23f81d1454da11f52dff11e18b2386de85","modified":1615884836704},{"_id":"public/categories/protractor/index.html","hash":"a1460b7e6e20d0bf29016878dc23bc8625222a9f","modified":1615884836704},{"_id":"public/categories/promise/index.html","hash":"bf90ec89b99de0a1a3a9d5ce3ca34b5310079a7d","modified":1615884836704},{"_id":"public/categories/vue/index.html","hash":"52bb39a20b31715d280e0d1c9b12f06c5a5de303","modified":1615884836705},{"_id":"public/categories/自动化构建/index.html","hash":"5fa3d04b5ed0447e300f2ed7e69e470e8f9a9150","modified":1615884836705},{"_id":"public/categories/mocha/index.html","hash":"4b7d4f0900bb47e0750d04e8621066ea105d6271","modified":1615884836705},{"_id":"public/categories/npm/index.html","hash":"9c44854fb3a8b9a70845936a957948444a2d3604","modified":1615884836705},{"_id":"public/categories/tcp连接、断开连接/index.html","hash":"8ac2474fc6cf3db9a535bb65b34a23a72453d019","modified":1615884836705},{"_id":"public/categories/e2e/index.html","hash":"7dd4c05d169fed8162dcdf0b08d544257eeff4e4","modified":1615884836706},{"_id":"public/categories/linux/node/index.html","hash":"0889f4bc9e93556144216c1720051a77c419ec71","modified":1615884836706},{"_id":"public/categories/promise/javascript/index.html","hash":"3b8dff4bbe04898cf4a6f76744cae4ce34f7e098","modified":1615884836706},{"_id":"public/categories/class/prototype/index.html","hash":"766294e456cb59e6c8da99fd7ffe617a3909c11d","modified":1615884836706},{"_id":"public/categories/vue/数据劫持/index.html","hash":"cd951267662fe017749cb84ac2045dab62d1608e","modified":1615884836706},{"_id":"public/categories/e2e/webdriverio/index.html","hash":"209c63fc3f749a69e059224e68550ebeadf6f02b","modified":1615884836706},{"_id":"public/categories/vue/数据劫持/发布订阅/index.html","hash":"b8487c5255d108b57ac89d5bda1155a7d3b33f4c","modified":1615884836707},{"_id":"public/categories/e2e/webdriverio/cucumber/index.html","hash":"89f82a9baf5f4e64c2508f70a6548d5ee1eed639","modified":1615884836707},{"_id":"public/index.html","hash":"cb4c0fbdb3648f08c5c3f0fedf0ff0e6e8b3a259","modified":1615884836707},{"_id":"public/page/2/index.html","hash":"da4abb2f881d3f12fd15f5446b912d91888edbd9","modified":1615884836707},{"_id":"public/tags/node/index.html","hash":"7d2a660f1871713f68319b78ccf5b1cdc92ea06c","modified":1615884836707},{"_id":"public/tags/TDD/index.html","hash":"60f51c19f6e3e2bdfb1a14c2ca2239c9bff01b72","modified":1615884836707},{"_id":"public/tags/catch/index.html","hash":"2b7eada6b734c90d16e6d9869a22e444c5a30746","modified":1615884836707},{"_id":"public/tags/koa/index.html","hash":"8a6f493532942d16329f1d632e48f824a33ba162","modified":1615884836708},{"_id":"public/tags/axios/index.html","hash":"1a9ecc1d933f3234919264e1a132bd3680ea8ea1","modified":1615884836708},{"_id":"public/tags/git/index.html","hash":"d90085634cb7a95bcf7ba540e68fa0625288fc5c","modified":1615884836708},{"_id":"public/tags/desgin-patterns/index.html","hash":"f4857283dde1ab2132fdef3ed4d041fba3316fe0","modified":1615884836708},{"_id":"public/tags/class/index.html","hash":"dab08a83b8a3af851a343522f78ccce113967e37","modified":1615884836708},{"_id":"public/tags/自动化构建/index.html","hash":"45f36b7c18052b38417270fd378094efebb4800f","modified":1615884836708},{"_id":"public/tags/linux/index.html","hash":"a8d17b82a2a5c9cf1a6cbe17c56f8bd6fd1e5d08","modified":1615884836709},{"_id":"public/tags/prototype/index.html","hash":"89aa8626c32f9cd15dbd8c3d0e8c15e1c4e94f8b","modified":1615884836709},{"_id":"public/tags/e2e/index.html","hash":"620b04a8fa663a1977796a854a0cb63df74d3f14","modified":1615884836709},{"_id":"public/tags/mocha/index.html","hash":"62e1f4661dd37bb83223a0204bab9f3a80d937b0","modified":1615884836709},{"_id":"public/tags/vue/index.html","hash":"dd2d7f3c879a6249f351fee2ba75606451e2187a","modified":1615884836709},{"_id":"public/tags/数据劫持/index.html","hash":"8c64343fb5bbbd87f9a2eb3ca282b49f59dc6a47","modified":1615884836710},{"_id":"public/tags/发布订阅/index.html","hash":"52d2b670c72656c3bf5c920d5e2d1d8e3bb0c530","modified":1615884836710},{"_id":"public/tags/npm/index.html","hash":"2a4964d4fe1df5c336c2934bb56eb910b927eecb","modified":1615884836710},{"_id":"public/tags/promise/index.html","hash":"42822b845f29596f69fd5f30b8bbf885685d6c95","modified":1615884836710},{"_id":"public/tags/webdriverio/index.html","hash":"5ecdd803d2f0387deec15d27aca521a568025505","modified":1615884836710},{"_id":"public/tags/tcp连接、断开连接/index.html","hash":"b048153af4989117dcf7e041ebf516abec37e3df","modified":1615884836711},{"_id":"public/tags/javascript/index.html","hash":"b219f70a45a443e415bf1faca3a302874fd09629","modified":1615884836711},{"_id":"public/tags/cucumber/index.html","hash":"13d266b63cd7ec22d07e4dd3bcda587093419c79","modified":1615884836727},{"_id":"public/leancloud.memo","hash":"1cc3b0dbe4b77c5a14dcaa393dadf68607ec4653","modified":1615884836736},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1615884836736},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1615884836736},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1615884836737},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1615884836737},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1615884836737},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1615884836737},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1615884836737},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1615884836737},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1615884836737},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1615884836738},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1615884836738},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1615884836738},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1615884836738},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1615884836738},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1615884836738},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1615884836738},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1615884836738},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1615884836739},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1615884836739},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1615884836739},{"_id":"public/2019/01/02/tcp/img1.png","hash":"db73572f2a4824d0b994a70893f9ee67bdb8e7bb","modified":1615884836739},{"_id":"public/2021/01/15/no-network-linux-install-nodeJs/img1.jpg","hash":"0c374b2c9a42ec5c4285e7ba223b2cbede22fe55","modified":1615884836739},{"_id":"public/2021/01/15/no-network-linux-install-nodeJs/img2.jpg","hash":"36c12ab7db7edb1c988f0a5286a95f540b2e408e","modified":1615884836739},{"_id":"public/2021/01/15/no-network-linux-install-nodeJs/img4.jpg","hash":"eee7cab5c53a4a334156d838a8ea79c7432c4e4c","modified":1615884836739},{"_id":"public/2021/01/15/no-network-linux-install-nodeJs/img3.jpg","hash":"511b9987351d6ed0bb1eb459f3fa80da8690bc73","modified":1615884836740},{"_id":"public/2021/01/15/no-network-linux-install-nodeJs/img5.jpg","hash":"253cf7f9d2729a8f5924e95222c75869fcc12e41","modified":1615884836740},{"_id":"public/css/main.css","hash":"d03a8de2a04218d06c8bdecb3039185fe0c27059","modified":1615884845416},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1615884845623},{"_id":"public/2019/01/02/tcp/img2.png","hash":"ec605b22ae384a307802ae91a7bc00a89719c199","modified":1615884845639},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1615884847241},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1615884847241},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1615884847241},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1615884847242},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1615884847242},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1615884847242},{"_id":"public/js/src/motion.js","hash":"3acaae96da453dcd03e4cbd301d81748f86ae95a","modified":1615884847242},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1615884847242},{"_id":"public/js/src/utils.js","hash":"2829d742409c6167cf871fc40e4a2a2b8ac10569","modified":1615884847243},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1615884847243},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1615884847243},{"_id":"public/js/src/schemes/pisces.js","hash":"958f3a70ea684264f23054d37d5e744a32c2e68a","modified":1615884847243},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1615884847243},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1615884847244},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1615884847244},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1615884847244},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1615884847245},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1615884847245},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1615884847245},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1615884847246},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1615884847246},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1615884847247},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1615884847520},{"_id":"public/2019/03/04/es6Class/laugh.mp4","hash":"12631342d11ac95ebe5f3bdd58bda809d9dc3895","modified":1615884847783}],"Category":[{"name":"node","_id":"ckmbs3qa70004h0nh7l0u3djf"},{"name":"TDD","_id":"ckmbs3qap0009h0nhpaxl0mu3"},{"name":"axios","_id":"ckmbs3qb2000dh0nhrw6iluwr"},{"name":"desgin-patterns","_id":"ckmbs3qbj000kh0nhcsxlei6g"},{"name":"koa","parent":"ckmbs3qa70004h0nh7l0u3djf","_id":"ckmbs3qbv000ph0nhjp9j05ix"},{"name":"class","_id":"ckmbs3qc9000vh0nh7n3p3jfq"},{"name":"git","_id":"ckmbs3qcl0012h0nh4t5z2se5"},{"name":"自动化构建","_id":"ckmbs3qcp0016h0nhg39aeam1"},{"name":"catch","parent":"ckmbs3qb2000dh0nhrw6iluwr","_id":"ckmbs3qct0019h0nhfjnwtbs5"},{"name":"mocha","_id":"ckmbs3qcy001eh0nhcmbsmerw"},{"name":"linux","_id":"ckmbs3qd4001ih0nhndijklj6"},{"name":"protractor","_id":"ckmbs3qd9001nh0nhptd1hokj"},{"name":"promise","_id":"ckmbs3qdd001qh0nh3yfn3k3q"},{"name":"vue","_id":"ckmbs3qdi001vh0nhrw1mvnmn"},{"name":"npm","_id":"ckmbs3qdm001yh0nhngdw5whi"},{"name":"tcp连接、断开连接","_id":"ckmbs3qdp0020h0nhimt2lcdt"},{"name":"prototype","parent":"ckmbs3qc9000vh0nh7n3p3jfq","_id":"ckmbs3qdv0025h0nhxlhgktht"},{"name":"e2e","_id":"ckmbs3qdz0028h0nhzhgec3cv"},{"name":"node","parent":"ckmbs3qd4001ih0nhndijklj6","_id":"ckmbs3qe3002bh0nhi89xqunh"},{"name":"javascript","parent":"ckmbs3qdd001qh0nh3yfn3k3q","_id":"ckmbs3qe8002gh0nh2efnjwp7"},{"name":"数据劫持","parent":"ckmbs3qdi001vh0nhrw1mvnmn","_id":"ckmbs3qed002lh0nhswt7uffc"},{"name":"webdriverio","parent":"ckmbs3qdz0028h0nhzhgec3cv","_id":"ckmbs3qeo002rh0nhxmfn38zf"},{"name":"发布订阅","parent":"ckmbs3qed002lh0nhswt7uffc","_id":"ckmbs3qes002uh0nhgics7u6p"},{"name":"cucumber","parent":"ckmbs3qeo002rh0nhxmfn38zf","_id":"ckmbs3qet002vh0nh0x2prdmi"}],"Data":[],"Page":[{"title":"tags","date":"2018-12-24T03:16:52.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-24 11:16:52\ntype: 'tags'\ncomments: false\n---\n","updated":"2021-01-15T02:39:36.542Z","path":"tags/index.html","layout":"page","_id":"ckmbs3q9u0001h0nho0j4i99x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-12-25T01:39:34.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-12-25 09:39:34\ntype: 'categories'\ncomments: false\n---\n","updated":"2021-01-15T02:39:36.534Z","path":"categories/index.html","layout":"page","_id":"ckmbs3qa30003h0nhgh6igisk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Koa","date":"2021-01-08T06:51:16.000Z","_content":"\n## Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。\n\n> 此文默认当前已有node环境，如果你没有node环境，请自行安装\n\n```js\n$ node -v\nv14.15.0\n```\n\n> 本地新建一个空目录，进行依赖的安装\n\n```js\nnpm init -y\nnpm i koa2 koa-router koa-static -S\n```\n\n1. 搭建http服务\n\n   ```js\n   // base.js\n   const Koa = require('koa2');\n   const app = new Koa();\n   \n   app.listen(3000);\n   ```\n\n   运行这个脚本，`node base.js`\n\n   然后在浏览器中输入`localhost:3000`， 你就会看到页面提示\"Not Found\"， 这就已经启动起来了。\n\n2. 建立静态页面，并使用koa-static来加载\n\n   ```js\n   // index.html\n   <html>\n       <head>\n           <meta charset=\"UTF-8\" />\n           <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=0\" />\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js\"></script>\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.20.0-0/axios.js\"></script>\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/qs/6.9.4/qs.js\"></script>\n           <style>\n               /* .cube-btn {\n               margin: 10px 0;\n           } */\n           </style>\n       </head>\n   \n       <body>\n           <div id=\"app\">\n               <div>{{name}} : {{age}}</div>\n               <button @click=\"getTokens\">getTokens</button>\n               <button @click=\"setTokens\">setTokens</button>\n               <button @click=\"noAPI\">noAPI</button>\n               <button @click=\"redirect\">redirect</button>\n           </div>\n           <script>\n               var app = new Vue({\n                   el: '#app',\n                   data() {\n                       return {\n                           name: 'dangchaofeng',\n                           age: '28'\n                       };\n                   },\n                   methods: {\n                       async getTokens() {\n                           const res = await axios.get(`/getTokens`);\n                           console.log('res', res);\n                       },\n                       async setTokens() {\n                           const res = await axios.post(`/setTokens`);\n                           console.log('res', res);\n                       },\n                       async redirect() {\n                           const res = await axios.get(`/redirect`);\n                           console.log('res', res);\n                       },\n                       async noAPI() {\n                           const res = await axios.delete(`/noAPI`, {\n                               params: {\n                                   id: ' 1'\n                               }\n                           });\n                           console.log('res', res);\n                       }\n                   },\n                   mounted: function () {}\n               });\n           </script>\n       </body>\n   </html>\n   \n   // base-static.js\n   \n   const Koa = require('koa2');\n   const app = new Koa();\n   const static = require('koa-static');\n   const path = require('path');\n   \n   const main = static(path.join(__dirname));\n   \n   app.use(main);\n   app.listen(3000);\n   ```\n\n   运行这个脚本，`node base-static.js`\n\n   然后在浏览器中输入`localhost:3000`， 你就会看到自己的页面。\n\n3. 加载koa-router路由功能\n\n   ```js\n   // base-router.js\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.body = {\n           token: '123'\n       };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   router.post('/noAPI', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   // * 自动识别405等返回。\n   // * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405\n   app.use(router.allowedMethods());\n   \n   app.listen(3000);\n   \n   ```\n\n   >\n   >\n   >此处强调说明三点：\n   >\n   >router是用的restful api\n   >\n   >app.use(router.routes());  此句的作用就是启用路由，将路由这个中间件加载给koa\n   >\n   >app.use(router.allowedMethods()); 此句的作用，是让路由自动识别方法，例如你的接口只实现了get方法，没有对应的post,put,delete方法，那么当你从页面上访问并没有定义的方法时，正常情况会识别到404返回，如果加载这个中间件，那么它会识别为405，表示你不允许这个方法操作\n\n4. 重定向 `// ctx.redirect('getTokens'); ` 会产生302 的状态码\n\n   ```js\n   // base-redirect.js\n   \n   /*\n    * @Author: Adam Dang\n    * @Description: 重定向路由\n    * @Date: 2021-01-08 14:25:38\n    * @LastEditors: Adam Dang\n    * @LastEditTime: 2021-01-08 14:25:38\n    */\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.body = {\n           token: '123'\n       };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   // 重定向到其他url上\n   router.get('/redirect', ctx => {\n       ctx.redirect('/getTokens');\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   // * 自动识别405等返回。\n   // * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405\n   app.use(router.allowedMethods());\n   \n   app.listen(3000);\n   \n   ```\n\n5.  通过监听error 事件处理错误 `ctx.throw(500);`   `app.on('error',(err, ctx)=>{ // handle })`\n\n   ```js\n   // base-handleError.js\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.throw(500);\n       // ctx.body = {\n       //     token: '123'\n       // };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   app.use(router.allowedMethods());\n   \n   // 错误处理\n   app.on('error', (err, ctx) => {\n       console.error('server error', err);\n   });\n   \n   app.listen(3000);\n   \n   ```\n\n   \n\n","source":"_posts/Koa.md","raw":"---\ntitle: Koa\ndate: 2021-01-08 14:51:16\ntags:\n- node\n- koa\ncategories:\n- node\n- koa\n---\n\n## Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。\n\n> 此文默认当前已有node环境，如果你没有node环境，请自行安装\n\n```js\n$ node -v\nv14.15.0\n```\n\n> 本地新建一个空目录，进行依赖的安装\n\n```js\nnpm init -y\nnpm i koa2 koa-router koa-static -S\n```\n\n1. 搭建http服务\n\n   ```js\n   // base.js\n   const Koa = require('koa2');\n   const app = new Koa();\n   \n   app.listen(3000);\n   ```\n\n   运行这个脚本，`node base.js`\n\n   然后在浏览器中输入`localhost:3000`， 你就会看到页面提示\"Not Found\"， 这就已经启动起来了。\n\n2. 建立静态页面，并使用koa-static来加载\n\n   ```js\n   // index.html\n   <html>\n       <head>\n           <meta charset=\"UTF-8\" />\n           <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=0\" />\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js\"></script>\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.20.0-0/axios.js\"></script>\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/qs/6.9.4/qs.js\"></script>\n           <style>\n               /* .cube-btn {\n               margin: 10px 0;\n           } */\n           </style>\n       </head>\n   \n       <body>\n           <div id=\"app\">\n               <div>{{name}} : {{age}}</div>\n               <button @click=\"getTokens\">getTokens</button>\n               <button @click=\"setTokens\">setTokens</button>\n               <button @click=\"noAPI\">noAPI</button>\n               <button @click=\"redirect\">redirect</button>\n           </div>\n           <script>\n               var app = new Vue({\n                   el: '#app',\n                   data() {\n                       return {\n                           name: 'dangchaofeng',\n                           age: '28'\n                       };\n                   },\n                   methods: {\n                       async getTokens() {\n                           const res = await axios.get(`/getTokens`);\n                           console.log('res', res);\n                       },\n                       async setTokens() {\n                           const res = await axios.post(`/setTokens`);\n                           console.log('res', res);\n                       },\n                       async redirect() {\n                           const res = await axios.get(`/redirect`);\n                           console.log('res', res);\n                       },\n                       async noAPI() {\n                           const res = await axios.delete(`/noAPI`, {\n                               params: {\n                                   id: ' 1'\n                               }\n                           });\n                           console.log('res', res);\n                       }\n                   },\n                   mounted: function () {}\n               });\n           </script>\n       </body>\n   </html>\n   \n   // base-static.js\n   \n   const Koa = require('koa2');\n   const app = new Koa();\n   const static = require('koa-static');\n   const path = require('path');\n   \n   const main = static(path.join(__dirname));\n   \n   app.use(main);\n   app.listen(3000);\n   ```\n\n   运行这个脚本，`node base-static.js`\n\n   然后在浏览器中输入`localhost:3000`， 你就会看到自己的页面。\n\n3. 加载koa-router路由功能\n\n   ```js\n   // base-router.js\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.body = {\n           token: '123'\n       };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   router.post('/noAPI', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   // * 自动识别405等返回。\n   // * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405\n   app.use(router.allowedMethods());\n   \n   app.listen(3000);\n   \n   ```\n\n   >\n   >\n   >此处强调说明三点：\n   >\n   >router是用的restful api\n   >\n   >app.use(router.routes());  此句的作用就是启用路由，将路由这个中间件加载给koa\n   >\n   >app.use(router.allowedMethods()); 此句的作用，是让路由自动识别方法，例如你的接口只实现了get方法，没有对应的post,put,delete方法，那么当你从页面上访问并没有定义的方法时，正常情况会识别到404返回，如果加载这个中间件，那么它会识别为405，表示你不允许这个方法操作\n\n4. 重定向 `// ctx.redirect('getTokens'); ` 会产生302 的状态码\n\n   ```js\n   // base-redirect.js\n   \n   /*\n    * @Author: Adam Dang\n    * @Description: 重定向路由\n    * @Date: 2021-01-08 14:25:38\n    * @LastEditors: Adam Dang\n    * @LastEditTime: 2021-01-08 14:25:38\n    */\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.body = {\n           token: '123'\n       };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   // 重定向到其他url上\n   router.get('/redirect', ctx => {\n       ctx.redirect('/getTokens');\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   // * 自动识别405等返回。\n   // * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405\n   app.use(router.allowedMethods());\n   \n   app.listen(3000);\n   \n   ```\n\n5.  通过监听error 事件处理错误 `ctx.throw(500);`   `app.on('error',(err, ctx)=>{ // handle })`\n\n   ```js\n   // base-handleError.js\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.throw(500);\n       // ctx.body = {\n       //     token: '123'\n       // };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   app.use(router.allowedMethods());\n   \n   // 错误处理\n   app.on('error', (err, ctx) => {\n       console.error('server error', err);\n   });\n   \n   app.listen(3000);\n   \n   ```\n\n   \n\n","slug":"Koa","published":1,"updated":"2021-01-15T02:39:36.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmbs3q9h0000h0nhqyq2131k","content":"<h2 id=\"Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。\"><a href=\"#Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。\" class=\"headerlink\" title=\"Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。\"></a>Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。</h2><blockquote>\n<p>此文默认当前已有node环境，如果你没有node环境，请自行安装</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\">v14<span class=\"number\">.15</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>本地新建一个空目录，进行依赖的安装</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm i koa2 koa-router koa-<span class=\"keyword\">static</span> -S</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>搭建http服务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>运行这个脚本，<code>node base.js</code></p>\n<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到页面提示”Not Found”， 这就已经启动起来了。</p>\n</li>\n<li><p>建立静态页面，并使用koa-static来加载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">        &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=0\"</span> /&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;script src=\"https:/</span><span class=\"regexp\">/cdn.bootcdn.net/</span>ajax/libs/axios/<span class=\"number\">0.20</span><span class=\"number\">.0</span><span class=\"number\">-0</span>/axios.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script src=\"</span>https:<span class=\"comment\">//cdn.bootcdn.net/ajax/libs/qs/6.9.4/qs.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            <span class=\"comment\">/* .cube-btn &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            margin: 10px 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125; */</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">            &lt;div&gt;&#123;&#123;name&#125;&#125; : &#123;&#123;age&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;button @click=\"getTokens\"&gt;getTokens&lt;/</span>button&gt;</span><br><span class=\"line\">            &lt;button @click=<span class=\"string\">\"setTokens\"</span>&gt;setTokens&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;button @click=\"noAPI\"&gt;noAPI&lt;/</span>button&gt;</span><br><span class=\"line\">            &lt;button @click=<span class=\"string\">\"redirect\"</span>&gt;redirect&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">                el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">                data() &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">'dangchaofeng'</span>,</span><br><span class=\"line\">                        age: <span class=\"string\">'28'</span></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                methods: &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> getTokens() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/getTokens`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> setTokens() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.post(<span class=\"string\">`/setTokens`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> redirect() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/redirect`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> noAPI() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.delete(<span class=\"string\">`/noAPI`</span>, &#123;</span><br><span class=\"line\">                            params: &#123;</span><br><span class=\"line\">                                id: <span class=\"string\">' 1'</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ base-static.js</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Koa = require('koa2');</span></span><br><span class=\"line\"><span class=\"regexp\">const app = new Koa();</span></span><br><span class=\"line\"><span class=\"regexp\">const static = require('koa-static');</span></span><br><span class=\"line\"><span class=\"regexp\">const path = require('path');</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const main = static(path.join(__dirname));</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">app.use(main);</span></span><br><span class=\"line\"><span class=\"regexp\">app.listen(3000);</span></span><br></pre></td></tr></table></figure>\n<p>运行这个脚本，<code>node base-static.js</code></p>\n<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到自己的页面。</p>\n</li>\n<li><p>加载koa-router路由功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-router.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        token: <span class=\"string\">'123'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/noAPI'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"><span class=\"comment\">// * 自动识别405等返回。</span></span><br><span class=\"line\"><span class=\"comment\">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处强调说明三点：</p>\n<p>router是用的restful api</p>\n<p>app.use(router.routes());  此句的作用就是启用路由，将路由这个中间件加载给koa</p>\n<p>app.use(router.allowedMethods()); 此句的作用，是让路由自动识别方法，例如你的接口只实现了get方法，没有对应的post,put,delete方法，那么当你从页面上访问并没有定义的方法时，正常情况会识别到404返回，如果加载这个中间件，那么它会识别为405，表示你不允许这个方法操作</p>\n</blockquote>\n</li>\n<li><p>重定向 <code>// ctx.redirect(&#39;getTokens&#39;);</code> 会产生302 的状态码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-redirect.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: Adam Dang</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: 重定向路由</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2021-01-08 14:25:38</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: Adam Dang</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2021-01-08 14:25:38</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        token: <span class=\"string\">'123'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重定向到其他url上</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/redirect'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/getTokens'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"><span class=\"comment\">// * 自动识别405等返回。</span></span><br><span class=\"line\"><span class=\"comment\">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过监听error 事件处理错误 <code>ctx.throw(500);</code>   <code>app.on(&#39;error&#39;,(err, ctx)=&gt;{ // handle })</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-handleError.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.throw(<span class=\"number\">500</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ctx.body = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     token: '123'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">app.on(<span class=\"string\">'error'</span>, (err, ctx) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'server error'</span>, err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。\"><a href=\"#Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。\" class=\"headerlink\" title=\"Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。\"></a>Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。</h2><blockquote>\n<p>此文默认当前已有node环境，如果你没有node环境，请自行安装</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\">v14<span class=\"number\">.15</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>本地新建一个空目录，进行依赖的安装</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm i koa2 koa-router koa-<span class=\"keyword\">static</span> -S</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>搭建http服务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>运行这个脚本，<code>node base.js</code></p>\n<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到页面提示”Not Found”， 这就已经启动起来了。</p>\n</li>\n<li><p>建立静态页面，并使用koa-static来加载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">        &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=0\"</span> /&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;script src=\"https:/</span><span class=\"regexp\">/cdn.bootcdn.net/</span>ajax/libs/axios/<span class=\"number\">0.20</span><span class=\"number\">.0</span><span class=\"number\">-0</span>/axios.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script src=\"</span>https:<span class=\"comment\">//cdn.bootcdn.net/ajax/libs/qs/6.9.4/qs.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            <span class=\"comment\">/* .cube-btn &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            margin: 10px 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125; */</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">            &lt;div&gt;&#123;&#123;name&#125;&#125; : &#123;&#123;age&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;button @click=\"getTokens\"&gt;getTokens&lt;/</span>button&gt;</span><br><span class=\"line\">            &lt;button @click=<span class=\"string\">\"setTokens\"</span>&gt;setTokens&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;button @click=\"noAPI\"&gt;noAPI&lt;/</span>button&gt;</span><br><span class=\"line\">            &lt;button @click=<span class=\"string\">\"redirect\"</span>&gt;redirect&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">                el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">                data() &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">'dangchaofeng'</span>,</span><br><span class=\"line\">                        age: <span class=\"string\">'28'</span></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                methods: &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> getTokens() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/getTokens`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> setTokens() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.post(<span class=\"string\">`/setTokens`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> redirect() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/redirect`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> noAPI() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.delete(<span class=\"string\">`/noAPI`</span>, &#123;</span><br><span class=\"line\">                            params: &#123;</span><br><span class=\"line\">                                id: <span class=\"string\">' 1'</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ base-static.js</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Koa = require('koa2');</span></span><br><span class=\"line\"><span class=\"regexp\">const app = new Koa();</span></span><br><span class=\"line\"><span class=\"regexp\">const static = require('koa-static');</span></span><br><span class=\"line\"><span class=\"regexp\">const path = require('path');</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const main = static(path.join(__dirname));</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">app.use(main);</span></span><br><span class=\"line\"><span class=\"regexp\">app.listen(3000);</span></span><br></pre></td></tr></table></figure>\n<p>运行这个脚本，<code>node base-static.js</code></p>\n<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到自己的页面。</p>\n</li>\n<li><p>加载koa-router路由功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-router.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        token: <span class=\"string\">'123'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/noAPI'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"><span class=\"comment\">// * 自动识别405等返回。</span></span><br><span class=\"line\"><span class=\"comment\">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处强调说明三点：</p>\n<p>router是用的restful api</p>\n<p>app.use(router.routes());  此句的作用就是启用路由，将路由这个中间件加载给koa</p>\n<p>app.use(router.allowedMethods()); 此句的作用，是让路由自动识别方法，例如你的接口只实现了get方法，没有对应的post,put,delete方法，那么当你从页面上访问并没有定义的方法时，正常情况会识别到404返回，如果加载这个中间件，那么它会识别为405，表示你不允许这个方法操作</p>\n</blockquote>\n</li>\n<li><p>重定向 <code>// ctx.redirect(&#39;getTokens&#39;);</code> 会产生302 的状态码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-redirect.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: Adam Dang</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: 重定向路由</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2021-01-08 14:25:38</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: Adam Dang</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2021-01-08 14:25:38</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        token: <span class=\"string\">'123'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重定向到其他url上</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/redirect'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/getTokens'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"><span class=\"comment\">// * 自动识别405等返回。</span></span><br><span class=\"line\"><span class=\"comment\">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过监听error 事件处理错误 <code>ctx.throw(500);</code>   <code>app.on(&#39;error&#39;,(err, ctx)=&gt;{ // handle })</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-handleError.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.throw(<span class=\"number\">500</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ctx.body = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     token: '123'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">app.on(<span class=\"string\">'error'</span>, (err, ctx) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'server error'</span>, err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"TDD","date":"2021-01-08T06:41:10.000Z","_content":"\n- 传统开发 primitive\n\n  - 流程不清晰\n  - 反复确认\n  - 人力沟通成本大\n  - 代码难以维护\n\n  \n\n- 测试驱动开发 test-driven development(TDD)\n\n  - 先确定需求\n  - 再确定验收标准\n  - 编写test \n  - 编写业务代码\n  - run test\n  - submit code\n\n> 这里需要说明一下， 在当下2021年，TDD模式被coder们更偏向为开发完之后再开发 e2e,  unit test来测试自己的代码运行。","source":"_posts/TDD.md","raw":"---\ntitle: TDD\ndate: 2021-01-08 14:41:10\ntags:\n- TDD\ncategories:\n- TDD\n---\n\n- 传统开发 primitive\n\n  - 流程不清晰\n  - 反复确认\n  - 人力沟通成本大\n  - 代码难以维护\n\n  \n\n- 测试驱动开发 test-driven development(TDD)\n\n  - 先确定需求\n  - 再确定验收标准\n  - 编写test \n  - 编写业务代码\n  - run test\n  - submit code\n\n> 这里需要说明一下， 在当下2021年，TDD模式被coder们更偏向为开发完之后再开发 e2e,  unit test来测试自己的代码运行。","slug":"TDD","published":1,"updated":"2021-01-15T02:39:36.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmbs3q9x0002h0nhvk4b1a2g","content":"<ul>\n<li><p>传统开发 primitive</p>\n<ul>\n<li>流程不清晰</li>\n<li>反复确认</li>\n<li>人力沟通成本大</li>\n<li>代码难以维护</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>测试驱动开发 test-driven development(TDD)</p>\n<ul>\n<li>先确定需求</li>\n<li>再确定验收标准</li>\n<li>编写test </li>\n<li>编写业务代码</li>\n<li>run test</li>\n<li>submit code</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这里需要说明一下， 在当下2021年，TDD模式被coder们更偏向为开发完之后再开发 e2e,  unit test来测试自己的代码运行。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>传统开发 primitive</p>\n<ul>\n<li>流程不清晰</li>\n<li>反复确认</li>\n<li>人力沟通成本大</li>\n<li>代码难以维护</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>测试驱动开发 test-driven development(TDD)</p>\n<ul>\n<li>先确定需求</li>\n<li>再确定验收标准</li>\n<li>编写test </li>\n<li>编写业务代码</li>\n<li>run test</li>\n<li>submit code</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这里需要说明一下， 在当下2021年，TDD模式被coder们更偏向为开发完之后再开发 e2e,  unit test来测试自己的代码运行。</p>\n</blockquote>\n"},{"title":"axios","date":"2021-01-15T03:01:48.000Z","_content":"\n## 问题： 在使用axios时，如何捕获错误 ？\n\n1. 回调写法： 使用自身的catch方法\n\n   ```js\n   axios.get(`/vue/table`, {\n       params: {\n           name: this.name\n       }\n   }).then((data)=>{\n       // handle result\n   }).catch(err=>{\n       // handle error\n   });\n   ```\n\n2.  使用async/await： 两种选择，不同处理\n\n   1.  使用自身的catch回调捕获\n\n      ```js\n      async _getTableDataFun() {\n              const { data } = await axios.get(`/vue/table`, {\n                  params: {\n                      name: this.name\n                  }\n              }).catch(err=>{\n                  return {\n                      data: [] \n                  }\n              });\n          \tthis.tableData = data;\n      }\n      ```\n\n      > catch 中的return 返回这一句很重要，非常重要，由于promise的链式操作，我们捕获了错误之后，await真正返回的结果就是catch中的返回内容， 我们有对返回结果进行解构 `const  { data } = ...` , 如果我们catch中不返回相应的结构，结构就会失败报错。\n\n   2. 使用try/catch 捕获\n\n      ```js\n      async _getTableDataFun() {\n          try {\n              const { data } = await axios.get(`/vue/table`, {\n                  params: {\n                      name: this.name\n                  }\n              });\n              this.tableData = data;\n          } catch (error) {\n              console.log('err');\n          }\n      }\n      ```\n\n      > 使用try/catch 进行捕获时，不论是结构失败报错，还是axios自己请求http的报错，都会被catch捕获到\n\n\n\n个人总结： 不论使用哪种方式捕获错误，目的都是对已知的某种错误场景进行正确的处理，而不是将错误直接抛给浏览器。","source":"_posts/axios.md","raw":"---\ntitle: axios\ndate: 2021-01-15 11:01:48\ntags:\n- axios\n- catch\ncategories:\n- axios\n- catch\n---\n\n## 问题： 在使用axios时，如何捕获错误 ？\n\n1. 回调写法： 使用自身的catch方法\n\n   ```js\n   axios.get(`/vue/table`, {\n       params: {\n           name: this.name\n       }\n   }).then((data)=>{\n       // handle result\n   }).catch(err=>{\n       // handle error\n   });\n   ```\n\n2.  使用async/await： 两种选择，不同处理\n\n   1.  使用自身的catch回调捕获\n\n      ```js\n      async _getTableDataFun() {\n              const { data } = await axios.get(`/vue/table`, {\n                  params: {\n                      name: this.name\n                  }\n              }).catch(err=>{\n                  return {\n                      data: [] \n                  }\n              });\n          \tthis.tableData = data;\n      }\n      ```\n\n      > catch 中的return 返回这一句很重要，非常重要，由于promise的链式操作，我们捕获了错误之后，await真正返回的结果就是catch中的返回内容， 我们有对返回结果进行解构 `const  { data } = ...` , 如果我们catch中不返回相应的结构，结构就会失败报错。\n\n   2. 使用try/catch 捕获\n\n      ```js\n      async _getTableDataFun() {\n          try {\n              const { data } = await axios.get(`/vue/table`, {\n                  params: {\n                      name: this.name\n                  }\n              });\n              this.tableData = data;\n          } catch (error) {\n              console.log('err');\n          }\n      }\n      ```\n\n      > 使用try/catch 进行捕获时，不论是结构失败报错，还是axios自己请求http的报错，都会被catch捕获到\n\n\n\n个人总结： 不论使用哪种方式捕获错误，目的都是对已知的某种错误场景进行正确的处理，而不是将错误直接抛给浏览器。","slug":"axios","published":1,"updated":"2021-01-15T05:35:26.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmbs3qae0006h0nh5w98yt4p","content":"<h2 id=\"问题：-在使用axios时，如何捕获错误-？\"><a href=\"#问题：-在使用axios时，如何捕获错误-？\" class=\"headerlink\" title=\"问题： 在使用axios时，如何捕获错误 ？\"></a>问题： 在使用axios时，如何捕获错误 ？</h2><ol>\n<li><p>回调写法： 使用自身的catch方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">`/vue/table`</span>, &#123;</span><br><span class=\"line\">    params: &#123;</span><br><span class=\"line\">        name: <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle result</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle error</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用async/await： 两种选择，不同处理</p>\n<ol>\n<li><p>使用自身的catch回调捕获</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> _getTableDataFun() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/vue/table`</span>, &#123;</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">                name: <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                data: [] </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.tableData = data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>catch 中的return 返回这一句很重要，非常重要，由于promise的链式操作，我们捕获了错误之后，await真正返回的结果就是catch中的返回内容， 我们有对返回结果进行解构 <code>const  { data } = ...</code> , 如果我们catch中不返回相应的结构，结构就会失败报错。</p>\n</blockquote>\n</li>\n<li><p>使用try/catch 捕获</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> _getTableDataFun() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/vue/table`</span>, &#123;</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">                name: <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tableData = data;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用try/catch 进行捕获时，不论是结构失败报错，还是axios自己请求http的报错，都会被catch捕获到</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<p>个人总结： 不论使用哪种方式捕获错误，目的都是对已知的某种错误场景进行正确的处理，而不是将错误直接抛给浏览器。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题：-在使用axios时，如何捕获错误-？\"><a href=\"#问题：-在使用axios时，如何捕获错误-？\" class=\"headerlink\" title=\"问题： 在使用axios时，如何捕获错误 ？\"></a>问题： 在使用axios时，如何捕获错误 ？</h2><ol>\n<li><p>回调写法： 使用自身的catch方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.get(<span class=\"string\">`/vue/table`</span>, &#123;</span><br><span class=\"line\">    params: &#123;</span><br><span class=\"line\">        name: <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle result</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle error</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用async/await： 两种选择，不同处理</p>\n<ol>\n<li><p>使用自身的catch回调捕获</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> _getTableDataFun() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/vue/table`</span>, &#123;</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">                name: <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                data: [] </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    \t<span class=\"keyword\">this</span>.tableData = data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>catch 中的return 返回这一句很重要，非常重要，由于promise的链式操作，我们捕获了错误之后，await真正返回的结果就是catch中的返回内容， 我们有对返回结果进行解构 <code>const  { data } = ...</code> , 如果我们catch中不返回相应的结构，结构就会失败报错。</p>\n</blockquote>\n</li>\n<li><p>使用try/catch 捕获</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> _getTableDataFun() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/vue/table`</span>, &#123;</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">                name: <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tableData = data;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'err'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用try/catch 进行捕获时，不论是结构失败报错，还是axios自己请求http的报错，都会被catch捕获到</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<p>个人总结： 不论使用哪种方式捕获错误，目的都是对已知的某种错误场景进行正确的处理，而不是将错误直接抛给浏览器。</p>\n"},{"title":"design-patterns","date":"2020-09-21T15:02:59.000Z","_content":"\n# 设计模式\n\n> 细节分类\n\n- 【发布订阅模式】vue 中的实现$on,$emit,$off\n- 【单例模式】errorDialog 可以使用进行优化\n- 【策略模式】vue 中的 form rule，配置化使用，map 结构提供策略可配置，环境类的去调用 map 中的实际方案（value）去执行，Monitor 校验配置使用的\n  - { key: ()=>{} }\n- 【代理模式】防抖节流， Proxy, defineProperty， 主要是替代访问本体的功能\n- 【中介者模式】目的，减少耦合，eg: 购物车需求,redux, vuex 都是中介者模式，通过 store 这个中介来操作对象\n- 【装饰器模式】eg: react 高阶组件, 主要是添加行为。\n- 【外观模式】外面只调用一个函数， 内部判断不同的分支，实现具体的逻辑\n- 【工厂模式】提供一个专门创建对象的接口\n- 【建造者模式】和工厂模式相比，参与了更多创建的过程 或者更为复杂\n- 【迭代器模式】\n- 【享元模式】重复利用一个模特，穿不同的衣服\n- 【责任链模式】中间件机制，每个中间件串行的对你的东西进行加工判断处理\n- 【适配器模式】理解为外观模式？\n\n> 大分类\n\n- 创建型设计模式\n  - 构造器模式\n  - 原型模式\n  - 工厂模式\n    - 提供一个接口实现创建，接口内部才是调用new Class()\n  - abstract factory 抽象工厂\n    - 内部的class可以通过接口进行注册\n  - 单例模式\n  - prototype模式\n    - object.create(obj, {}) 实际原理是函数委托给别人\n  - module模式\n    - 闭包自执行函数，暴露一个变量给外部使用，通过变量来操作内部私有属性\n  - 抽象模式\n  - 生成器模式（可以理解为一个生成器中包含了多个类的实例化，复杂化后的工厂模式）\n- 结构型设计模式（专注类和对象的组合）\n  - 代理模式\n    - 提供一个代理者去帮助你操作实际的内容，代理者会考虑容错场景，提供备选方案(loading 图片的展示，等实际加载完图片，再切换新的src)\n  - 外观模式\n    - 外部调用统一，内部实现进行判断兼容性\n  - Command（命令）模式\n    - 通过不同的命令（传参）做不同的事情，常含有（关联）接收者\n    - execute('requestInfo', 'Ford Mondeo', '321')\n    - execute('buyVehicle', 'Ford Escort', '789')\n  - Facade（外观）模式\n  - Mixin模式\n    - 类似于extend, merge等函数，将两个对象的key合并成一个，重复的以优先级进行覆盖\n  - Decorator（装饰器）模式\n  - Flyweight（享元）模式\n- 行为设计模式\n  - 观察者（发布订阅者模式） 关注对象之间的通信\n  - 策略模式\n    - 不同的算法做同一件事情\n\n> 设计原则 `人月神话` `代码大全` `unix编程艺术`\n\n- 开放封闭，开放扩展，封闭修改\n- 依赖倒转\n- 单一职责\n- 里式替换\n- 合成复用\n  - 组合优于继承\n\n> 学习设计模式的目的： 写着舒服，维护更舒服\n\n> 什么时候用\n\n- 带来开发收益\n- 带来可维护性收益\n- 把设计模式和组件挂钩（elementUI, antDesign）\n- 没有这些，if else 就是最简单的代码\n- 不要滥用\n- 懒，才是程序员成长的动力\n\n> 项目内部设计原则\n\n- 布鲁克斯法则： 软件开发的后期，添加人力，会让项目更慢\n- KISS 原则：保持简单,simple and stupid 模块设计需要遵循\n- 备份\n- 软件开发没有银弹\n- 过早优化效应\n  - 过早的优化是万恶之源\n\n> 学习感言\n\n```js\n代码处处是模式，其实设计模式的大白话就是套路，大家都实践过很多遍之后得出的真理。学习中间，就会发现，其实自己\n的代码当中很多地方已经用到了设计模式，只是你自己不知道那叫什么名字\n```","source":"_posts/design-patterns.md","raw":"---\ntitle: design-patterns\ndate: 2020-09-21 23:02:59\ntags:\n- desgin-patterns\ncategories:\n- desgin-patterns\n---\n\n# 设计模式\n\n> 细节分类\n\n- 【发布订阅模式】vue 中的实现$on,$emit,$off\n- 【单例模式】errorDialog 可以使用进行优化\n- 【策略模式】vue 中的 form rule，配置化使用，map 结构提供策略可配置，环境类的去调用 map 中的实际方案（value）去执行，Monitor 校验配置使用的\n  - { key: ()=>{} }\n- 【代理模式】防抖节流， Proxy, defineProperty， 主要是替代访问本体的功能\n- 【中介者模式】目的，减少耦合，eg: 购物车需求,redux, vuex 都是中介者模式，通过 store 这个中介来操作对象\n- 【装饰器模式】eg: react 高阶组件, 主要是添加行为。\n- 【外观模式】外面只调用一个函数， 内部判断不同的分支，实现具体的逻辑\n- 【工厂模式】提供一个专门创建对象的接口\n- 【建造者模式】和工厂模式相比，参与了更多创建的过程 或者更为复杂\n- 【迭代器模式】\n- 【享元模式】重复利用一个模特，穿不同的衣服\n- 【责任链模式】中间件机制，每个中间件串行的对你的东西进行加工判断处理\n- 【适配器模式】理解为外观模式？\n\n> 大分类\n\n- 创建型设计模式\n  - 构造器模式\n  - 原型模式\n  - 工厂模式\n    - 提供一个接口实现创建，接口内部才是调用new Class()\n  - abstract factory 抽象工厂\n    - 内部的class可以通过接口进行注册\n  - 单例模式\n  - prototype模式\n    - object.create(obj, {}) 实际原理是函数委托给别人\n  - module模式\n    - 闭包自执行函数，暴露一个变量给外部使用，通过变量来操作内部私有属性\n  - 抽象模式\n  - 生成器模式（可以理解为一个生成器中包含了多个类的实例化，复杂化后的工厂模式）\n- 结构型设计模式（专注类和对象的组合）\n  - 代理模式\n    - 提供一个代理者去帮助你操作实际的内容，代理者会考虑容错场景，提供备选方案(loading 图片的展示，等实际加载完图片，再切换新的src)\n  - 外观模式\n    - 外部调用统一，内部实现进行判断兼容性\n  - Command（命令）模式\n    - 通过不同的命令（传参）做不同的事情，常含有（关联）接收者\n    - execute('requestInfo', 'Ford Mondeo', '321')\n    - execute('buyVehicle', 'Ford Escort', '789')\n  - Facade（外观）模式\n  - Mixin模式\n    - 类似于extend, merge等函数，将两个对象的key合并成一个，重复的以优先级进行覆盖\n  - Decorator（装饰器）模式\n  - Flyweight（享元）模式\n- 行为设计模式\n  - 观察者（发布订阅者模式） 关注对象之间的通信\n  - 策略模式\n    - 不同的算法做同一件事情\n\n> 设计原则 `人月神话` `代码大全` `unix编程艺术`\n\n- 开放封闭，开放扩展，封闭修改\n- 依赖倒转\n- 单一职责\n- 里式替换\n- 合成复用\n  - 组合优于继承\n\n> 学习设计模式的目的： 写着舒服，维护更舒服\n\n> 什么时候用\n\n- 带来开发收益\n- 带来可维护性收益\n- 把设计模式和组件挂钩（elementUI, antDesign）\n- 没有这些，if else 就是最简单的代码\n- 不要滥用\n- 懒，才是程序员成长的动力\n\n> 项目内部设计原则\n\n- 布鲁克斯法则： 软件开发的后期，添加人力，会让项目更慢\n- KISS 原则：保持简单,simple and stupid 模块设计需要遵循\n- 备份\n- 软件开发没有银弹\n- 过早优化效应\n  - 过早的优化是万恶之源\n\n> 学习感言\n\n```js\n代码处处是模式，其实设计模式的大白话就是套路，大家都实践过很多遍之后得出的真理。学习中间，就会发现，其实自己\n的代码当中很多地方已经用到了设计模式，只是你自己不知道那叫什么名字\n```","slug":"design-patterns","published":1,"updated":"2021-01-15T02:39:36.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmbs3qaj0007h0nhuubv8ddi","content":"<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><blockquote>\n<p>细节分类</p>\n</blockquote>\n<ul>\n<li>【发布订阅模式】vue 中的实现$on,$emit,$off</li>\n<li>【单例模式】errorDialog 可以使用进行优化</li>\n<li>【策略模式】vue 中的 form rule，配置化使用，map 结构提供策略可配置，环境类的去调用 map 中的实际方案（value）去执行，Monitor 校验配置使用的<ul>\n<li>{ key: ()=&gt;{} }</li>\n</ul>\n</li>\n<li>【代理模式】防抖节流， Proxy, defineProperty， 主要是替代访问本体的功能</li>\n<li>【中介者模式】目的，减少耦合，eg: 购物车需求,redux, vuex 都是中介者模式，通过 store 这个中介来操作对象</li>\n<li>【装饰器模式】eg: react 高阶组件, 主要是添加行为。</li>\n<li>【外观模式】外面只调用一个函数， 内部判断不同的分支，实现具体的逻辑</li>\n<li>【工厂模式】提供一个专门创建对象的接口</li>\n<li>【建造者模式】和工厂模式相比，参与了更多创建的过程 或者更为复杂</li>\n<li>【迭代器模式】</li>\n<li>【享元模式】重复利用一个模特，穿不同的衣服</li>\n<li>【责任链模式】中间件机制，每个中间件串行的对你的东西进行加工判断处理</li>\n<li>【适配器模式】理解为外观模式？</li>\n</ul>\n<blockquote>\n<p>大分类</p>\n</blockquote>\n<ul>\n<li>创建型设计模式<ul>\n<li>构造器模式</li>\n<li>原型模式</li>\n<li>工厂模式<ul>\n<li>提供一个接口实现创建，接口内部才是调用new Class()</li>\n</ul>\n</li>\n<li>abstract factory 抽象工厂<ul>\n<li>内部的class可以通过接口进行注册</li>\n</ul>\n</li>\n<li>单例模式</li>\n<li>prototype模式<ul>\n<li>object.create(obj, {}) 实际原理是函数委托给别人</li>\n</ul>\n</li>\n<li>module模式<ul>\n<li>闭包自执行函数，暴露一个变量给外部使用，通过变量来操作内部私有属性</li>\n</ul>\n</li>\n<li>抽象模式</li>\n<li>生成器模式（可以理解为一个生成器中包含了多个类的实例化，复杂化后的工厂模式）</li>\n</ul>\n</li>\n<li>结构型设计模式（专注类和对象的组合）<ul>\n<li>代理模式<ul>\n<li>提供一个代理者去帮助你操作实际的内容，代理者会考虑容错场景，提供备选方案(loading 图片的展示，等实际加载完图片，再切换新的src)</li>\n</ul>\n</li>\n<li>外观模式<ul>\n<li>外部调用统一，内部实现进行判断兼容性</li>\n</ul>\n</li>\n<li>Command（命令）模式<ul>\n<li>通过不同的命令（传参）做不同的事情，常含有（关联）接收者</li>\n<li>execute(‘requestInfo’, ‘Ford Mondeo’, ‘321’)</li>\n<li>execute(‘buyVehicle’, ‘Ford Escort’, ‘789’)</li>\n</ul>\n</li>\n<li>Facade（外观）模式</li>\n<li>Mixin模式<ul>\n<li>类似于extend, merge等函数，将两个对象的key合并成一个，重复的以优先级进行覆盖</li>\n</ul>\n</li>\n<li>Decorator（装饰器）模式</li>\n<li>Flyweight（享元）模式</li>\n</ul>\n</li>\n<li>行为设计模式<ul>\n<li>观察者（发布订阅者模式） 关注对象之间的通信</li>\n<li>策略模式<ul>\n<li>不同的算法做同一件事情</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>设计原则 <code>人月神话</code> <code>代码大全</code> <code>unix编程艺术</code></p>\n</blockquote>\n<ul>\n<li>开放封闭，开放扩展，封闭修改</li>\n<li>依赖倒转</li>\n<li>单一职责</li>\n<li>里式替换</li>\n<li>合成复用<ul>\n<li>组合优于继承</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>学习设计模式的目的： 写着舒服，维护更舒服</p>\n</blockquote>\n<blockquote>\n<p>什么时候用</p>\n</blockquote>\n<ul>\n<li>带来开发收益</li>\n<li>带来可维护性收益</li>\n<li>把设计模式和组件挂钩（elementUI, antDesign）</li>\n<li>没有这些，if else 就是最简单的代码</li>\n<li>不要滥用</li>\n<li>懒，才是程序员成长的动力</li>\n</ul>\n<blockquote>\n<p>项目内部设计原则</p>\n</blockquote>\n<ul>\n<li>布鲁克斯法则： 软件开发的后期，添加人力，会让项目更慢</li>\n<li>KISS 原则：保持简单,simple and stupid 模块设计需要遵循</li>\n<li>备份</li>\n<li>软件开发没有银弹</li>\n<li>过早优化效应<ul>\n<li>过早的优化是万恶之源</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>学习感言</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码处处是模式，其实设计模式的大白话就是套路，大家都实践过很多遍之后得出的真理。学习中间，就会发现，其实自己</span><br><span class=\"line\">的代码当中很多地方已经用到了设计模式，只是你自己不知道那叫什么名字</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><blockquote>\n<p>细节分类</p>\n</blockquote>\n<ul>\n<li>【发布订阅模式】vue 中的实现$on,$emit,$off</li>\n<li>【单例模式】errorDialog 可以使用进行优化</li>\n<li>【策略模式】vue 中的 form rule，配置化使用，map 结构提供策略可配置，环境类的去调用 map 中的实际方案（value）去执行，Monitor 校验配置使用的<ul>\n<li>{ key: ()=&gt;{} }</li>\n</ul>\n</li>\n<li>【代理模式】防抖节流， Proxy, defineProperty， 主要是替代访问本体的功能</li>\n<li>【中介者模式】目的，减少耦合，eg: 购物车需求,redux, vuex 都是中介者模式，通过 store 这个中介来操作对象</li>\n<li>【装饰器模式】eg: react 高阶组件, 主要是添加行为。</li>\n<li>【外观模式】外面只调用一个函数， 内部判断不同的分支，实现具体的逻辑</li>\n<li>【工厂模式】提供一个专门创建对象的接口</li>\n<li>【建造者模式】和工厂模式相比，参与了更多创建的过程 或者更为复杂</li>\n<li>【迭代器模式】</li>\n<li>【享元模式】重复利用一个模特，穿不同的衣服</li>\n<li>【责任链模式】中间件机制，每个中间件串行的对你的东西进行加工判断处理</li>\n<li>【适配器模式】理解为外观模式？</li>\n</ul>\n<blockquote>\n<p>大分类</p>\n</blockquote>\n<ul>\n<li>创建型设计模式<ul>\n<li>构造器模式</li>\n<li>原型模式</li>\n<li>工厂模式<ul>\n<li>提供一个接口实现创建，接口内部才是调用new Class()</li>\n</ul>\n</li>\n<li>abstract factory 抽象工厂<ul>\n<li>内部的class可以通过接口进行注册</li>\n</ul>\n</li>\n<li>单例模式</li>\n<li>prototype模式<ul>\n<li>object.create(obj, {}) 实际原理是函数委托给别人</li>\n</ul>\n</li>\n<li>module模式<ul>\n<li>闭包自执行函数，暴露一个变量给外部使用，通过变量来操作内部私有属性</li>\n</ul>\n</li>\n<li>抽象模式</li>\n<li>生成器模式（可以理解为一个生成器中包含了多个类的实例化，复杂化后的工厂模式）</li>\n</ul>\n</li>\n<li>结构型设计模式（专注类和对象的组合）<ul>\n<li>代理模式<ul>\n<li>提供一个代理者去帮助你操作实际的内容，代理者会考虑容错场景，提供备选方案(loading 图片的展示，等实际加载完图片，再切换新的src)</li>\n</ul>\n</li>\n<li>外观模式<ul>\n<li>外部调用统一，内部实现进行判断兼容性</li>\n</ul>\n</li>\n<li>Command（命令）模式<ul>\n<li>通过不同的命令（传参）做不同的事情，常含有（关联）接收者</li>\n<li>execute(‘requestInfo’, ‘Ford Mondeo’, ‘321’)</li>\n<li>execute(‘buyVehicle’, ‘Ford Escort’, ‘789’)</li>\n</ul>\n</li>\n<li>Facade（外观）模式</li>\n<li>Mixin模式<ul>\n<li>类似于extend, merge等函数，将两个对象的key合并成一个，重复的以优先级进行覆盖</li>\n</ul>\n</li>\n<li>Decorator（装饰器）模式</li>\n<li>Flyweight（享元）模式</li>\n</ul>\n</li>\n<li>行为设计模式<ul>\n<li>观察者（发布订阅者模式） 关注对象之间的通信</li>\n<li>策略模式<ul>\n<li>不同的算法做同一件事情</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>设计原则 <code>人月神话</code> <code>代码大全</code> <code>unix编程艺术</code></p>\n</blockquote>\n<ul>\n<li>开放封闭，开放扩展，封闭修改</li>\n<li>依赖倒转</li>\n<li>单一职责</li>\n<li>里式替换</li>\n<li>合成复用<ul>\n<li>组合优于继承</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>学习设计模式的目的： 写着舒服，维护更舒服</p>\n</blockquote>\n<blockquote>\n<p>什么时候用</p>\n</blockquote>\n<ul>\n<li>带来开发收益</li>\n<li>带来可维护性收益</li>\n<li>把设计模式和组件挂钩（elementUI, antDesign）</li>\n<li>没有这些，if else 就是最简单的代码</li>\n<li>不要滥用</li>\n<li>懒，才是程序员成长的动力</li>\n</ul>\n<blockquote>\n<p>项目内部设计原则</p>\n</blockquote>\n<ul>\n<li>布鲁克斯法则： 软件开发的后期，添加人力，会让项目更慢</li>\n<li>KISS 原则：保持简单,simple and stupid 模块设计需要遵循</li>\n<li>备份</li>\n<li>软件开发没有银弹</li>\n<li>过早优化效应<ul>\n<li>过早的优化是万恶之源</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>学习感言</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码处处是模式，其实设计模式的大白话就是套路，大家都实践过很多遍之后得出的真理。学习中间，就会发现，其实自己</span><br><span class=\"line\">的代码当中很多地方已经用到了设计模式，只是你自己不知道那叫什么名字</span><br></pre></td></tr></table></figure>"},{"title":"es6Class","date":"2019-03-04T02:06:36.000Z","comments":0,"_content":"\n# es6中class的基本使用\n\n- 有几个关键字的使用：\n\n  - class： 用来定义'类'； \n  - constructor： 用来初始化'类'；\n  - extends： 用来子类继承父类；\n  - super： 调用父类方法\n    - 区分一： constructor 中，直接调用super()并传参，相当于调用父级的constructor；\n    - 区分二：普通方法中（原型方法），super指向父类的原型对象，调用super.xx()， xx指代父级的某个方法；\n\n- 示例代码：\n\n  ```\tjs\n  // 基类-动物\n  class Animal {\n      constructor(name) {\n          this.name = name;\n      }\n      sayName() {\n          console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n      }\n  }\n  \n  let animal = new Animal('小动物');\n  animal.sayName();\n  \n  // 子类，狗--继承于动物类\n  class Dog extends Animal {\n      constructor(name, age) {\n          super(name);\n          this.age = age;\n      }\n      sayName() {\n          // 调用父类方法\n          super.sayName();\n          // 写子类自己的方法\n          console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n      }\n  }\n  \n  let dog = new Dog('大黄', '7');\n  dog.sayName();\n  \n  ```\n  简不简单，惊不惊喜，意不意外，开不开心？\n\n  > class使用就是这么简单，但是要知道这只是语法糖，es5中继承是如何实现呢？\n\n# es5中继承的基本实现\n\n- 几个关键字的使用：\n\n  - function：类就是使用函数创建出来的；\n  - prototype：原型属性；\n  - Object.create(`__proto__`, `obj`)：用来创建对象\n    - 参数一`__proto__`：必需，被创建对象的原型对象。\n    - 参数二`obj`：可选，包含一个或多个属性描述符的 JavaScript 对象，用来规定要被添加到对象的属性，可以分为两类，数据属性和访问器属性\n\n- 简单使用示例代码(从基本示例中引发思考，如何调用父级方法)：\n\n  ```js\n  // 基类-动物\n  function Animal(name) {\n      this.name = name;\n  }\n  \n  Animal.prototype.sayName = function() {\n      console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n  }\n  \n  // 子类，狗--继承于动物类\n  function Dog(name, age) {\n      this.name = name;\n      this.age = age;\n  }\n  \n  // 将Dog的原型指向Animal的一个实例\n  Dog.prototype = new Animal();\n  // 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。\n  Dog.prototype.sayName = function(argument) {\n      console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n  }\n  var dog = new Dog('大黄', '7');\n  dog.sayName();\n  ```\n\n# es6class创建和es5中function创建，异同点在哪里？\n\n- 相同点：\n\n  - 都分为声明式和表达式\n  - 对待name,length表现一致\n  - 对待创建变量结果一致***\n  - fn对待相同，都可以用call,apply.bind来改变this指向\n\n- 不同点：\n\n  - 声明式，es5中的fn是存在变量提升的，es6中的class没有\n  - Dog类， fn创建可以使用call调用，class创建的不能\n  - 在全局中创建Dog类，fn可以在window中访问Dog,class生成的不能\n  - 武昌补充。。。我没琢磨粗来\n\n\n> 那在es6还没出来的时候，当初的开发人员是如何写类的继承呢？别天真了，人没有那么傻，别个早已经封装实现了此类方法。\n  <video id=\"video\" controls=\"\" preload=\"none\" poster=\"laugh.mp4\">\n    sorry,您的浏览器不支持该视频类型!\n    <source id=\"mp4\" src=\"laugh.mp4\" type=\"video/mp4\">\n  </video>  \n> 看看es5的时候，别个是如何使用继承的\n\n```js\n// 基类-动物\nvar Animal = Class.extend({\n    // init是构造函数，起到contructor的作用\n    init: function(name) {\n        this.name = name;\n    },\n    sayName: function() {\n        console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n    }\n});\n\nvar animal = new Animal('小动物');\nanimal.sayName();\n\n// 子类，狗--继承于动物类\nvar Dog = Animal.extend({\n    // init是构造函数\n    init: function(name, age) {\n        //  在构造函数中调用父类的构造函数\n        this._super(name);\n        this.age = age;\n    },\n    sayName: function() {\n        // 调用父类方法\n        this._super();\n        // 写子类自己的方法\n        console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n    }\n});\n\nvar dog = new Dog('大黄', '7');\ndog.sayName();\n```\n\n\n\n# 看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\n\n- 示例看基本的继承\n\n  ```js\n  // 基类-动物\n  function Animal(name) {\n      this.name = name;\n  }\n  \n  Animal.prototype.sayName = function() {\n      console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n  }\n  // 子类，狗--继承于动物类\n  function Dog(name, age) {\n      this.name = name;\n      this.age = age;\n  }\n  \n  // 将Dog的原型指向Animal的一个实例\n  Dog.prototype = new Animal();\n  // 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。\n  Dog.prototype.sayName = function() {\n      console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n  }\n  var dog = new Dog('大黄', '7');\n  dog.sayName();\n  ```\n\n- 上述示例的缺陷：\n\n  1. 在创建Dog构造函数和原型时，就对Animal进行了实例化，这是不合适的。\n  2. Dog的构造函数没法调用父类Animal的构造函数，导致在Dog构造函数中对name属性的重复赋值。\n  3. Dog中的函数会覆盖Animal中的同名函数，没有重载的机制（和上一条是一个类型的问题）。\n  4. 实现中有constructor属性的指向错误。\n  5. 单一职责，不够通用。 \n\n- 我们将其一个一个缺陷进行解决，最后便可以得到我们想要的封装结构,下面是完整代码\n\n  ```js\n  var Class = (function() {\n    // 标识类的初始化是否完成，如果完成，便可以调用init进行初始化构造函数\n    var initCompleteStatus = false;\n    // 定义正则，边界为_super完整的字符串则是真\n    var reg = /\\b_super\\b/;\n  \n    function parentClass() {} // 父级，初始化基类是空对象\n  \n    parentClass.extend = function(props) {\n      function childClass() {\n        if (initCompleteStatus) {\n          this.init.apply(this, arguments);\n        }\n      }\n      \n      var _super = this.prototype; // 父级类的原型\n      // 保存父级的所有属性为子类的原型，并重置constructor\n        \n      initCompleteStatus = false;\n      // 此时的实例化不会调用init\n      childClass.prototype = new this();\n      initCompleteStatus = true;\n        \n      Object.defineProperty(childClass.prototype, \"constructor\", {\n        value: childClass\n      });\n      \n      // 自身属性的赋值\n      for (var name in props) {\n        if (typeof props[name] === \"function\" && reg.test(props[name])) {\n          childClass.prototype[name] = (function(name, fn) {\n            return function() {\n              console.dir(Object.toString.call(fn));\n              var temp = this._super;\n              this._super = _super[name];\n              // 拿到函数返回值\n              var result = fn.apply(this, arguments);\n              this._super = temp;\n              // 将返回值返回\n              return result;\n            };\n          })(name, props[name]);\n        } else {\n          childClass.prototype[name] = props[name];\n        }\n      }\n      childClass.extend = arguments.callee;\n      return childClass;\n    };\n    return parentClass;\n  })();\n  ```\n","source":"_posts/es6Class.md","raw":"---\ntitle: es6Class\ndate: 2019-03-04 10:06:36\ntags: \n- class\n- prototype\ncategories:\n- class\n- prototype\ncomments: false\n---\n\n# es6中class的基本使用\n\n- 有几个关键字的使用：\n\n  - class： 用来定义'类'； \n  - constructor： 用来初始化'类'；\n  - extends： 用来子类继承父类；\n  - super： 调用父类方法\n    - 区分一： constructor 中，直接调用super()并传参，相当于调用父级的constructor；\n    - 区分二：普通方法中（原型方法），super指向父类的原型对象，调用super.xx()， xx指代父级的某个方法；\n\n- 示例代码：\n\n  ```\tjs\n  // 基类-动物\n  class Animal {\n      constructor(name) {\n          this.name = name;\n      }\n      sayName() {\n          console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n      }\n  }\n  \n  let animal = new Animal('小动物');\n  animal.sayName();\n  \n  // 子类，狗--继承于动物类\n  class Dog extends Animal {\n      constructor(name, age) {\n          super(name);\n          this.age = age;\n      }\n      sayName() {\n          // 调用父类方法\n          super.sayName();\n          // 写子类自己的方法\n          console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n      }\n  }\n  \n  let dog = new Dog('大黄', '7');\n  dog.sayName();\n  \n  ```\n  简不简单，惊不惊喜，意不意外，开不开心？\n\n  > class使用就是这么简单，但是要知道这只是语法糖，es5中继承是如何实现呢？\n\n# es5中继承的基本实现\n\n- 几个关键字的使用：\n\n  - function：类就是使用函数创建出来的；\n  - prototype：原型属性；\n  - Object.create(`__proto__`, `obj`)：用来创建对象\n    - 参数一`__proto__`：必需，被创建对象的原型对象。\n    - 参数二`obj`：可选，包含一个或多个属性描述符的 JavaScript 对象，用来规定要被添加到对象的属性，可以分为两类，数据属性和访问器属性\n\n- 简单使用示例代码(从基本示例中引发思考，如何调用父级方法)：\n\n  ```js\n  // 基类-动物\n  function Animal(name) {\n      this.name = name;\n  }\n  \n  Animal.prototype.sayName = function() {\n      console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n  }\n  \n  // 子类，狗--继承于动物类\n  function Dog(name, age) {\n      this.name = name;\n      this.age = age;\n  }\n  \n  // 将Dog的原型指向Animal的一个实例\n  Dog.prototype = new Animal();\n  // 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。\n  Dog.prototype.sayName = function(argument) {\n      console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n  }\n  var dog = new Dog('大黄', '7');\n  dog.sayName();\n  ```\n\n# es6class创建和es5中function创建，异同点在哪里？\n\n- 相同点：\n\n  - 都分为声明式和表达式\n  - 对待name,length表现一致\n  - 对待创建变量结果一致***\n  - fn对待相同，都可以用call,apply.bind来改变this指向\n\n- 不同点：\n\n  - 声明式，es5中的fn是存在变量提升的，es6中的class没有\n  - Dog类， fn创建可以使用call调用，class创建的不能\n  - 在全局中创建Dog类，fn可以在window中访问Dog,class生成的不能\n  - 武昌补充。。。我没琢磨粗来\n\n\n> 那在es6还没出来的时候，当初的开发人员是如何写类的继承呢？别天真了，人没有那么傻，别个早已经封装实现了此类方法。\n  <video id=\"video\" controls=\"\" preload=\"none\" poster=\"laugh.mp4\">\n    sorry,您的浏览器不支持该视频类型!\n    <source id=\"mp4\" src=\"laugh.mp4\" type=\"video/mp4\">\n  </video>  \n> 看看es5的时候，别个是如何使用继承的\n\n```js\n// 基类-动物\nvar Animal = Class.extend({\n    // init是构造函数，起到contructor的作用\n    init: function(name) {\n        this.name = name;\n    },\n    sayName: function() {\n        console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n    }\n});\n\nvar animal = new Animal('小动物');\nanimal.sayName();\n\n// 子类，狗--继承于动物类\nvar Dog = Animal.extend({\n    // init是构造函数\n    init: function(name, age) {\n        //  在构造函数中调用父类的构造函数\n        this._super(name);\n        this.age = age;\n    },\n    sayName: function() {\n        // 调用父类方法\n        this._super();\n        // 写子类自己的方法\n        console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n    }\n});\n\nvar dog = new Dog('大黄', '7');\ndog.sayName();\n```\n\n\n\n# 看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\n\n- 示例看基本的继承\n\n  ```js\n  // 基类-动物\n  function Animal(name) {\n      this.name = name;\n  }\n  \n  Animal.prototype.sayName = function() {\n      console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n  }\n  // 子类，狗--继承于动物类\n  function Dog(name, age) {\n      this.name = name;\n      this.age = age;\n  }\n  \n  // 将Dog的原型指向Animal的一个实例\n  Dog.prototype = new Animal();\n  // 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。\n  Dog.prototype.sayName = function() {\n      console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n  }\n  var dog = new Dog('大黄', '7');\n  dog.sayName();\n  ```\n\n- 上述示例的缺陷：\n\n  1. 在创建Dog构造函数和原型时，就对Animal进行了实例化，这是不合适的。\n  2. Dog的构造函数没法调用父类Animal的构造函数，导致在Dog构造函数中对name属性的重复赋值。\n  3. Dog中的函数会覆盖Animal中的同名函数，没有重载的机制（和上一条是一个类型的问题）。\n  4. 实现中有constructor属性的指向错误。\n  5. 单一职责，不够通用。 \n\n- 我们将其一个一个缺陷进行解决，最后便可以得到我们想要的封装结构,下面是完整代码\n\n  ```js\n  var Class = (function() {\n    // 标识类的初始化是否完成，如果完成，便可以调用init进行初始化构造函数\n    var initCompleteStatus = false;\n    // 定义正则，边界为_super完整的字符串则是真\n    var reg = /\\b_super\\b/;\n  \n    function parentClass() {} // 父级，初始化基类是空对象\n  \n    parentClass.extend = function(props) {\n      function childClass() {\n        if (initCompleteStatus) {\n          this.init.apply(this, arguments);\n        }\n      }\n      \n      var _super = this.prototype; // 父级类的原型\n      // 保存父级的所有属性为子类的原型，并重置constructor\n        \n      initCompleteStatus = false;\n      // 此时的实例化不会调用init\n      childClass.prototype = new this();\n      initCompleteStatus = true;\n        \n      Object.defineProperty(childClass.prototype, \"constructor\", {\n        value: childClass\n      });\n      \n      // 自身属性的赋值\n      for (var name in props) {\n        if (typeof props[name] === \"function\" && reg.test(props[name])) {\n          childClass.prototype[name] = (function(name, fn) {\n            return function() {\n              console.dir(Object.toString.call(fn));\n              var temp = this._super;\n              this._super = _super[name];\n              // 拿到函数返回值\n              var result = fn.apply(this, arguments);\n              this._super = temp;\n              // 将返回值返回\n              return result;\n            };\n          })(name, props[name]);\n        } else {\n          childClass.prototype[name] = props[name];\n        }\n      }\n      childClass.extend = arguments.callee;\n      return childClass;\n    };\n    return parentClass;\n  })();\n  ```\n","slug":"es6Class","published":1,"updated":"2021-01-15T02:39:36.465Z","layout":"post","photos":[],"link":"","_id":"ckmbs3qam0008h0nhx9duv6ik","content":"<h1 id=\"es6中class的基本使用\"><a href=\"#es6中class的基本使用\" class=\"headerlink\" title=\"es6中class的基本使用\"></a>es6中class的基本使用</h1><ul>\n<li><p>有几个关键字的使用：</p>\n<ul>\n<li>class： 用来定义’类’； </li>\n<li>constructor： 用来初始化’类’；</li>\n<li>extends： 用来子类继承父类；</li>\n<li>super： 调用父类方法<ul>\n<li>区分一： constructor 中，直接调用super()并传参，相当于调用父级的constructor；</li>\n<li>区分二：普通方法中（原型方法），super指向父类的原型对象，调用super.xx()， xx指代父级的某个方法；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayName() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'小动物'</span>);</span><br><span class=\"line\">animal.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayName() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.sayName();</span><br><span class=\"line\">        <span class=\"comment\">// 写子类自己的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n<p>简不简单，惊不惊喜，意不意外，开不开心？</p>\n<blockquote>\n<p>class使用就是这么简单，但是要知道这只是语法糖，es5中继承是如何实现呢？</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"es5中继承的基本实现\"><a href=\"#es5中继承的基本实现\" class=\"headerlink\" title=\"es5中继承的基本实现\"></a>es5中继承的基本实现</h1><ul>\n<li><p>几个关键字的使用：</p>\n<ul>\n<li>function：类就是使用函数创建出来的；</li>\n<li>prototype：原型属性；</li>\n<li>Object.create(<code>__proto__</code>, <code>obj</code>)：用来创建对象<ul>\n<li>参数一<code>__proto__</code>：必需，被创建对象的原型对象。</li>\n<li>参数二<code>obj</code>：可选，包含一个或多个属性描述符的 JavaScript 对象，用来规定要被添加到对象的属性，可以分为两类，数据属性和访问器属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>简单使用示例代码(从基本示例中引发思考，如何调用父级方法)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Dog的原型指向Animal的一个实例</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"comment\">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class=\"line\">Dog.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">argument</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"es6class创建和es5中function创建，异同点在哪里？\"><a href=\"#es6class创建和es5中function创建，异同点在哪里？\" class=\"headerlink\" title=\"es6class创建和es5中function创建，异同点在哪里？\"></a>es6class创建和es5中function创建，异同点在哪里？</h1><ul>\n<li><p>相同点：</p>\n<ul>\n<li>都分为声明式和表达式</li>\n<li>对待name,length表现一致</li>\n<li>对待创建变量结果一致***</li>\n<li>fn对待相同，都可以用call,apply.bind来改变this指向</li>\n</ul>\n</li>\n<li><p>不同点：</p>\n<ul>\n<li>声明式，es5中的fn是存在变量提升的，es6中的class没有</li>\n<li>Dog类， fn创建可以使用call调用，class创建的不能</li>\n<li>在全局中创建Dog类，fn可以在window中访问Dog,class生成的不能</li>\n<li>武昌补充。。。我没琢磨粗来</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>那在es6还没出来的时候，当初的开发人员是如何写类的继承呢？别天真了，人没有那么傻，别个早已经封装实现了此类方法。<br>  <video id=\"video\" controls preload=\"none\" poster=\"laugh.mp4\"><br>    sorry,您的浏览器不支持该视频类型!<br>    <source id=\"mp4\" src=\"laugh.mp4\" type=\"video/mp4\"><br>  </video><br>看看es5的时候，别个是如何使用继承的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Animal = Class.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init是构造函数，起到contructor的作用</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'小动物'</span>);</span><br><span class=\"line\">animal.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Dog = Animal.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init是构造函数</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  在构造函数中调用父类的构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._super(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._super();</span><br><span class=\"line\">        <span class=\"comment\">// 写子类自己的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n<h1 id=\"看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\"><a href=\"#看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\" class=\"headerlink\" title=\"看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\"></a>看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承</h1><ul>\n<li><p>示例看基本的继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Dog的原型指向Animal的一个实例</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"comment\">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class=\"line\">Dog.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上述示例的缺陷：</p>\n<ol>\n<li>在创建Dog构造函数和原型时，就对Animal进行了实例化，这是不合适的。</li>\n<li>Dog的构造函数没法调用父类Animal的构造函数，导致在Dog构造函数中对name属性的重复赋值。</li>\n<li>Dog中的函数会覆盖Animal中的同名函数，没有重载的机制（和上一条是一个类型的问题）。</li>\n<li>实现中有constructor属性的指向错误。</li>\n<li>单一职责，不够通用。 </li>\n</ol>\n</li>\n<li><p>我们将其一个一个缺陷进行解决，最后便可以得到我们想要的封装结构,下面是完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Class = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标识类的初始化是否完成，如果完成，便可以调用init进行初始化构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> initCompleteStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 定义正则，边界为_super完整的字符串则是真</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\b_super\\b/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parentClass</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 父级，初始化基类是空对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  parentClass.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childClass</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (initCompleteStatus) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> _super = <span class=\"keyword\">this</span>.prototype; <span class=\"comment\">// 父级类的原型</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存父级的所有属性为子类的原型，并重置constructor</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    initCompleteStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 此时的实例化不会调用init</span></span><br><span class=\"line\">    childClass.prototype = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>();</span><br><span class=\"line\">    initCompleteStatus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(childClass.prototype, <span class=\"string\">\"constructor\"</span>, &#123;</span><br><span class=\"line\">      value: childClass</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 自身属性的赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> props) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props[name] === <span class=\"string\">\"function\"</span> &amp;&amp; reg.test(props[name])) &#123;</span><br><span class=\"line\">        childClass.prototype[name] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(<span class=\"built_in\">Object</span>.toString.call(fn));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = <span class=\"keyword\">this</span>._super;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._super = _super[name];</span><br><span class=\"line\">            <span class=\"comment\">// 拿到函数返回值</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._super = temp;</span><br><span class=\"line\">            <span class=\"comment\">// 将返回值返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;)(name, props[name]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        childClass.prototype[name] = props[name];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childClass.extend = <span class=\"built_in\">arguments</span>.callee;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> childClass;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> parentClass;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"es6中class的基本使用\"><a href=\"#es6中class的基本使用\" class=\"headerlink\" title=\"es6中class的基本使用\"></a>es6中class的基本使用</h1><ul>\n<li><p>有几个关键字的使用：</p>\n<ul>\n<li>class： 用来定义’类’； </li>\n<li>constructor： 用来初始化’类’；</li>\n<li>extends： 用来子类继承父类；</li>\n<li>super： 调用父类方法<ul>\n<li>区分一： constructor 中，直接调用super()并传参，相当于调用父级的constructor；</li>\n<li>区分二：普通方法中（原型方法），super指向父类的原型对象，调用super.xx()， xx指代父级的某个方法；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayName() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'小动物'</span>);</span><br><span class=\"line\">animal.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayName() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.sayName();</span><br><span class=\"line\">        <span class=\"comment\">// 写子类自己的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n<p>简不简单，惊不惊喜，意不意外，开不开心？</p>\n<blockquote>\n<p>class使用就是这么简单，但是要知道这只是语法糖，es5中继承是如何实现呢？</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"es5中继承的基本实现\"><a href=\"#es5中继承的基本实现\" class=\"headerlink\" title=\"es5中继承的基本实现\"></a>es5中继承的基本实现</h1><ul>\n<li><p>几个关键字的使用：</p>\n<ul>\n<li>function：类就是使用函数创建出来的；</li>\n<li>prototype：原型属性；</li>\n<li>Object.create(<code>__proto__</code>, <code>obj</code>)：用来创建对象<ul>\n<li>参数一<code>__proto__</code>：必需，被创建对象的原型对象。</li>\n<li>参数二<code>obj</code>：可选，包含一个或多个属性描述符的 JavaScript 对象，用来规定要被添加到对象的属性，可以分为两类，数据属性和访问器属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>简单使用示例代码(从基本示例中引发思考，如何调用父级方法)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Dog的原型指向Animal的一个实例</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"comment\">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class=\"line\">Dog.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">argument</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"es6class创建和es5中function创建，异同点在哪里？\"><a href=\"#es6class创建和es5中function创建，异同点在哪里？\" class=\"headerlink\" title=\"es6class创建和es5中function创建，异同点在哪里？\"></a>es6class创建和es5中function创建，异同点在哪里？</h1><ul>\n<li><p>相同点：</p>\n<ul>\n<li>都分为声明式和表达式</li>\n<li>对待name,length表现一致</li>\n<li>对待创建变量结果一致***</li>\n<li>fn对待相同，都可以用call,apply.bind来改变this指向</li>\n</ul>\n</li>\n<li><p>不同点：</p>\n<ul>\n<li>声明式，es5中的fn是存在变量提升的，es6中的class没有</li>\n<li>Dog类， fn创建可以使用call调用，class创建的不能</li>\n<li>在全局中创建Dog类，fn可以在window中访问Dog,class生成的不能</li>\n<li>武昌补充。。。我没琢磨粗来</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>那在es6还没出来的时候，当初的开发人员是如何写类的继承呢？别天真了，人没有那么傻，别个早已经封装实现了此类方法。<br>  <video id=\"video\" controls preload=\"none\" poster=\"laugh.mp4\"><br>    sorry,您的浏览器不支持该视频类型!<br>    <source id=\"mp4\" src=\"laugh.mp4\" type=\"video/mp4\"><br>  </video><br>看看es5的时候，别个是如何使用继承的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Animal = Class.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init是构造函数，起到contructor的作用</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'小动物'</span>);</span><br><span class=\"line\">animal.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Dog = Animal.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init是构造函数</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  在构造函数中调用父类的构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._super(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._super();</span><br><span class=\"line\">        <span class=\"comment\">// 写子类自己的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n<h1 id=\"看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\"><a href=\"#看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\" class=\"headerlink\" title=\"看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\"></a>看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承</h1><ul>\n<li><p>示例看基本的继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Dog的原型指向Animal的一个实例</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"comment\">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class=\"line\">Dog.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上述示例的缺陷：</p>\n<ol>\n<li>在创建Dog构造函数和原型时，就对Animal进行了实例化，这是不合适的。</li>\n<li>Dog的构造函数没法调用父类Animal的构造函数，导致在Dog构造函数中对name属性的重复赋值。</li>\n<li>Dog中的函数会覆盖Animal中的同名函数，没有重载的机制（和上一条是一个类型的问题）。</li>\n<li>实现中有constructor属性的指向错误。</li>\n<li>单一职责，不够通用。 </li>\n</ol>\n</li>\n<li><p>我们将其一个一个缺陷进行解决，最后便可以得到我们想要的封装结构,下面是完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Class = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标识类的初始化是否完成，如果完成，便可以调用init进行初始化构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> initCompleteStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 定义正则，边界为_super完整的字符串则是真</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\b_super\\b/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parentClass</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 父级，初始化基类是空对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  parentClass.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childClass</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (initCompleteStatus) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> _super = <span class=\"keyword\">this</span>.prototype; <span class=\"comment\">// 父级类的原型</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存父级的所有属性为子类的原型，并重置constructor</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    initCompleteStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 此时的实例化不会调用init</span></span><br><span class=\"line\">    childClass.prototype = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>();</span><br><span class=\"line\">    initCompleteStatus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(childClass.prototype, <span class=\"string\">\"constructor\"</span>, &#123;</span><br><span class=\"line\">      value: childClass</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 自身属性的赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> props) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props[name] === <span class=\"string\">\"function\"</span> &amp;&amp; reg.test(props[name])) &#123;</span><br><span class=\"line\">        childClass.prototype[name] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(<span class=\"built_in\">Object</span>.toString.call(fn));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = <span class=\"keyword\">this</span>._super;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._super = _super[name];</span><br><span class=\"line\">            <span class=\"comment\">// 拿到函数返回值</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._super = temp;</span><br><span class=\"line\">            <span class=\"comment\">// 将返回值返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;)(name, props[name]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        childClass.prototype[name] = props[name];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childClass.extend = <span class=\"built_in\">arguments</span>.callee;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> childClass;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> parentClass;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"git 常用命令","date":"2021-01-07T12:07:44.000Z","comments":0,"_content":"\n[可以观看廖雪峰大神写的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n*   `git init`\n\n    > 初始化一个git仓库\n\n*   `git remote add origin <git@server-name:path/repo-name.git>`\n\n    > 关联远程库\n\n*   `git clone`\n\n    > 克隆\n\n*   `git checkout -b <name>` or `git switch -c <name>`\n\n    > 检出分支pr-branch并切换到新分支上\n\n*   `git checkout -b <new-branch> origin/<remote-branch>`\n\n    > 检出远程分支remote-branch到本地，命名为new-branch\n\n*  ` git commit`\n\n    > 本地提交\n\n*   `git pull`\n\n    > 远程更新拉到本地\n\n*   `git push`\n\n    > 本地推送到远程\n\n*   `git merge c2`\n\n    > 把c2 branch 内容合并到当前分支上\n\n*   `git rebase c2`\n\n    > 将c2分支最新的提交同步到当前分支，并变成线性提交\n\n*   `git checkout c2^`\n\n    > 分离HEAD，让其指向c2的父级\n\n*   `git checkout c2~2`\n\n    > 让其指向c2的父级的父级\n\n*   `git branch -f c2 HEAD~2`\n\n    > 将分支c2重新分配给当前分支的父级的父级\n\n*   `git reset HEAD~1`\n\n    > 将当前分支向后移到较早的提交上来恢复更改\n\n*   `git revert HEAD`\n\n    > 重写当前分支，把上次的提交，反转过来再次提交， 来恢复之前的更改\n\n*   `git push -u origin master`\n\n    > 将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了\n\n*   `git pull`\n\n    > 相当于git fetch, git merge\n\n*   `git pull --rebase`\n\n    > 相当于git fetch , git rebase ，本地就不会出现提交分叉以及万恶的merge commit信息\n\n*   `rebase` 好处\n\n    <pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"reStructuredText\" cid=\"n214\" mdtype=\"fences\" style=\"box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;\">想要更好的提交树，使用rebase操作会更好一点。\n    这样可以线性的看到每一次提交，并且没有增加提交节点。\n    merge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。\n    而rebase 操作的话，会中断rebase,同时会提示去解决冲突。\n    解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</pre>\n\n*   `git stash`\n\n    > 储藏现场工作（将git仓库已经追踪记录的，但是没有commit的东西先存起来）\n\n*   `git stash list`\n\n    > 查看储藏区\n\n*   `git stash apply stash@{0}`\n\n    > 恢复储藏区， 不会删除储藏区的内容，等待commit\n\n*   `git stash pop`\n\n    > 恢复储藏区， 同时会删除储藏区的内容，等待commit\n\n*   `git stash drop stash@{0}`\n\n    > 删除储藏区的内容\n\n*   `git cherry-pick 4c805e2`\n\n    > 复制一个特定的提交到当前分支\n\n*   `git tag <tagname> ? <commit ID>`\n\n    > 用于新建一个标签，默认为`HEAD`，也可以指定一个commit id\n\n*   `git tag -a <tagname> -m \"This is a tag\"`\n\n    > 可以指定标签信息\n\n*   `git tag`\n\n    > 查看所有标签\n\n*   `git show <tagname>`\n\n    > 查看一个标签\n\n*   `git tag -d <tagname>`\n\n    > 删除一个标签\n\n*   `git push origin <tagname>`\n\n    > 推送一个本地标签 到 远程\n\n*   `git push origin --tags`\n\n    > 推送全部未推送过的本地标签\n\n*   `git push origin :refs/tags/<tagname>`\n\n    > 删除一个远程标签\n\n","source":"_posts/gitCommand.md","raw":"---\ntitle: git 常用命令\ndate: 2021-01-07 20:07:44\ntags: \n- git\ncategories:\n- git\ncomments: false\n---\n\n[可以观看廖雪峰大神写的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n*   `git init`\n\n    > 初始化一个git仓库\n\n*   `git remote add origin <git@server-name:path/repo-name.git>`\n\n    > 关联远程库\n\n*   `git clone`\n\n    > 克隆\n\n*   `git checkout -b <name>` or `git switch -c <name>`\n\n    > 检出分支pr-branch并切换到新分支上\n\n*   `git checkout -b <new-branch> origin/<remote-branch>`\n\n    > 检出远程分支remote-branch到本地，命名为new-branch\n\n*  ` git commit`\n\n    > 本地提交\n\n*   `git pull`\n\n    > 远程更新拉到本地\n\n*   `git push`\n\n    > 本地推送到远程\n\n*   `git merge c2`\n\n    > 把c2 branch 内容合并到当前分支上\n\n*   `git rebase c2`\n\n    > 将c2分支最新的提交同步到当前分支，并变成线性提交\n\n*   `git checkout c2^`\n\n    > 分离HEAD，让其指向c2的父级\n\n*   `git checkout c2~2`\n\n    > 让其指向c2的父级的父级\n\n*   `git branch -f c2 HEAD~2`\n\n    > 将分支c2重新分配给当前分支的父级的父级\n\n*   `git reset HEAD~1`\n\n    > 将当前分支向后移到较早的提交上来恢复更改\n\n*   `git revert HEAD`\n\n    > 重写当前分支，把上次的提交，反转过来再次提交， 来恢复之前的更改\n\n*   `git push -u origin master`\n\n    > 将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了\n\n*   `git pull`\n\n    > 相当于git fetch, git merge\n\n*   `git pull --rebase`\n\n    > 相当于git fetch , git rebase ，本地就不会出现提交分叉以及万恶的merge commit信息\n\n*   `rebase` 好处\n\n    <pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"reStructuredText\" cid=\"n214\" mdtype=\"fences\" style=\"box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;\">想要更好的提交树，使用rebase操作会更好一点。\n    这样可以线性的看到每一次提交，并且没有增加提交节点。\n    merge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。\n    而rebase 操作的话，会中断rebase,同时会提示去解决冲突。\n    解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</pre>\n\n*   `git stash`\n\n    > 储藏现场工作（将git仓库已经追踪记录的，但是没有commit的东西先存起来）\n\n*   `git stash list`\n\n    > 查看储藏区\n\n*   `git stash apply stash@{0}`\n\n    > 恢复储藏区， 不会删除储藏区的内容，等待commit\n\n*   `git stash pop`\n\n    > 恢复储藏区， 同时会删除储藏区的内容，等待commit\n\n*   `git stash drop stash@{0}`\n\n    > 删除储藏区的内容\n\n*   `git cherry-pick 4c805e2`\n\n    > 复制一个特定的提交到当前分支\n\n*   `git tag <tagname> ? <commit ID>`\n\n    > 用于新建一个标签，默认为`HEAD`，也可以指定一个commit id\n\n*   `git tag -a <tagname> -m \"This is a tag\"`\n\n    > 可以指定标签信息\n\n*   `git tag`\n\n    > 查看所有标签\n\n*   `git show <tagname>`\n\n    > 查看一个标签\n\n*   `git tag -d <tagname>`\n\n    > 删除一个标签\n\n*   `git push origin <tagname>`\n\n    > 推送一个本地标签 到 远程\n\n*   `git push origin --tags`\n\n    > 推送全部未推送过的本地标签\n\n*   `git push origin :refs/tags/<tagname>`\n\n    > 删除一个远程标签\n\n","slug":"gitCommand","published":1,"updated":"2021-01-15T02:39:36.479Z","layout":"post","photos":[],"link":"","_id":"ckmbs3qas000bh0nh21rog7wn","content":"<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">可以观看廖雪峰大神写的git教程</a></p>\n<ul>\n<li><p><code>git init</code></p>\n<blockquote>\n<p>初始化一个git仓库</p>\n</blockquote>\n</li>\n<li><p><code>git remote add origin &lt;git@server-name:path/repo-name.git&gt;</code></p>\n<blockquote>\n<p>关联远程库</p>\n</blockquote>\n</li>\n<li><p><code>git clone</code></p>\n<blockquote>\n<p>克隆</p>\n</blockquote>\n</li>\n<li><p><code>git checkout -b &lt;name&gt;</code> or <code>git switch -c &lt;name&gt;</code></p>\n<blockquote>\n<p>检出分支pr-branch并切换到新分支上</p>\n</blockquote>\n</li>\n<li><p><code>git checkout -b &lt;new-branch&gt; origin/&lt;remote-branch&gt;</code></p>\n<blockquote>\n<p>检出远程分支remote-branch到本地，命名为new-branch</p>\n</blockquote>\n</li>\n<li><p><code>git commit</code></p>\n<blockquote>\n<p>本地提交</p>\n</blockquote>\n</li>\n<li><p><code>git pull</code></p>\n<blockquote>\n<p>远程更新拉到本地</p>\n</blockquote>\n</li>\n<li><p><code>git push</code></p>\n<blockquote>\n<p>本地推送到远程</p>\n</blockquote>\n</li>\n<li><p><code>git merge c2</code></p>\n<blockquote>\n<p>把c2 branch 内容合并到当前分支上</p>\n</blockquote>\n</li>\n<li><p><code>git rebase c2</code></p>\n<blockquote>\n<p>将c2分支最新的提交同步到当前分支，并变成线性提交</p>\n</blockquote>\n</li>\n<li><p><code>git checkout c2^</code></p>\n<blockquote>\n<p>分离HEAD，让其指向c2的父级</p>\n</blockquote>\n</li>\n<li><p><code>git checkout c2~2</code></p>\n<blockquote>\n<p>让其指向c2的父级的父级</p>\n</blockquote>\n</li>\n<li><p><code>git branch -f c2 HEAD~2</code></p>\n<blockquote>\n<p>将分支c2重新分配给当前分支的父级的父级</p>\n</blockquote>\n</li>\n<li><p><code>git reset HEAD~1</code></p>\n<blockquote>\n<p>将当前分支向后移到较早的提交上来恢复更改</p>\n</blockquote>\n</li>\n<li><p><code>git revert HEAD</code></p>\n<blockquote>\n<p>重写当前分支，把上次的提交，反转过来再次提交， 来恢复之前的更改</p>\n</blockquote>\n</li>\n<li><p><code>git push -u origin master</code></p>\n<blockquote>\n<p>将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了</p>\n</blockquote>\n</li>\n<li><p><code>git pull</code></p>\n<blockquote>\n<p>相当于git fetch, git merge</p>\n</blockquote>\n</li>\n<li><p><code>git pull --rebase</code></p>\n<blockquote>\n<p>相当于git fetch , git rebase ，本地就不会出现提交分叉以及万恶的merge commit信息</p>\n</blockquote>\n</li>\n<li><p><code>rebase</code> 好处</p>\n<pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"reStructuredText\" cid=\"n214\" mdtype=\"fences\" style=\"box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;\">想要更好的提交树，使用rebase操作会更好一点。\n这样可以线性的看到每一次提交，并且没有增加提交节点。\nmerge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。\n而rebase 操作的话，会中断rebase,同时会提示去解决冲突。\n解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</pre>\n</li>\n<li><p><code>git stash</code></p>\n<blockquote>\n<p>储藏现场工作（将git仓库已经追踪记录的，但是没有commit的东西先存起来）</p>\n</blockquote>\n</li>\n<li><p><code>git stash list</code></p>\n<blockquote>\n<p>查看储藏区</p>\n</blockquote>\n</li>\n<li><p><code>git stash apply stash@{0}</code></p>\n<blockquote>\n<p>恢复储藏区， 不会删除储藏区的内容，等待commit</p>\n</blockquote>\n</li>\n<li><p><code>git stash pop</code></p>\n<blockquote>\n<p>恢复储藏区， 同时会删除储藏区的内容，等待commit</p>\n</blockquote>\n</li>\n<li><p><code>git stash drop stash@{0}</code></p>\n<blockquote>\n<p>删除储藏区的内容</p>\n</blockquote>\n</li>\n<li><p><code>git cherry-pick 4c805e2</code></p>\n<blockquote>\n<p>复制一个特定的提交到当前分支</p>\n</blockquote>\n</li>\n<li><p><code>git tag &lt;tagname&gt; ? &lt;commit ID&gt;</code></p>\n<blockquote>\n<p>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id</p>\n</blockquote>\n</li>\n<li><p><code>git tag -a &lt;tagname&gt; -m &quot;This is a tag&quot;</code></p>\n<blockquote>\n<p>可以指定标签信息</p>\n</blockquote>\n</li>\n<li><p><code>git tag</code></p>\n<blockquote>\n<p>查看所有标签</p>\n</blockquote>\n</li>\n<li><p><code>git show &lt;tagname&gt;</code></p>\n<blockquote>\n<p>查看一个标签</p>\n</blockquote>\n</li>\n<li><p><code>git tag -d &lt;tagname&gt;</code></p>\n<blockquote>\n<p>删除一个标签</p>\n</blockquote>\n</li>\n<li><p><code>git push origin &lt;tagname&gt;</code></p>\n<blockquote>\n<p>推送一个本地标签 到 远程</p>\n</blockquote>\n</li>\n<li><p><code>git push origin --tags</code></p>\n<blockquote>\n<p>推送全部未推送过的本地标签</p>\n</blockquote>\n</li>\n<li><p><code>git push origin :refs/tags/&lt;tagname&gt;</code></p>\n<blockquote>\n<p>删除一个远程标签</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">可以观看廖雪峰大神写的git教程</a></p>\n<ul>\n<li><p><code>git init</code></p>\n<blockquote>\n<p>初始化一个git仓库</p>\n</blockquote>\n</li>\n<li><p><code>git remote add origin &lt;git@server-name:path/repo-name.git&gt;</code></p>\n<blockquote>\n<p>关联远程库</p>\n</blockquote>\n</li>\n<li><p><code>git clone</code></p>\n<blockquote>\n<p>克隆</p>\n</blockquote>\n</li>\n<li><p><code>git checkout -b &lt;name&gt;</code> or <code>git switch -c &lt;name&gt;</code></p>\n<blockquote>\n<p>检出分支pr-branch并切换到新分支上</p>\n</blockquote>\n</li>\n<li><p><code>git checkout -b &lt;new-branch&gt; origin/&lt;remote-branch&gt;</code></p>\n<blockquote>\n<p>检出远程分支remote-branch到本地，命名为new-branch</p>\n</blockquote>\n</li>\n<li><p><code>git commit</code></p>\n<blockquote>\n<p>本地提交</p>\n</blockquote>\n</li>\n<li><p><code>git pull</code></p>\n<blockquote>\n<p>远程更新拉到本地</p>\n</blockquote>\n</li>\n<li><p><code>git push</code></p>\n<blockquote>\n<p>本地推送到远程</p>\n</blockquote>\n</li>\n<li><p><code>git merge c2</code></p>\n<blockquote>\n<p>把c2 branch 内容合并到当前分支上</p>\n</blockquote>\n</li>\n<li><p><code>git rebase c2</code></p>\n<blockquote>\n<p>将c2分支最新的提交同步到当前分支，并变成线性提交</p>\n</blockquote>\n</li>\n<li><p><code>git checkout c2^</code></p>\n<blockquote>\n<p>分离HEAD，让其指向c2的父级</p>\n</blockquote>\n</li>\n<li><p><code>git checkout c2~2</code></p>\n<blockquote>\n<p>让其指向c2的父级的父级</p>\n</blockquote>\n</li>\n<li><p><code>git branch -f c2 HEAD~2</code></p>\n<blockquote>\n<p>将分支c2重新分配给当前分支的父级的父级</p>\n</blockquote>\n</li>\n<li><p><code>git reset HEAD~1</code></p>\n<blockquote>\n<p>将当前分支向后移到较早的提交上来恢复更改</p>\n</blockquote>\n</li>\n<li><p><code>git revert HEAD</code></p>\n<blockquote>\n<p>重写当前分支，把上次的提交，反转过来再次提交， 来恢复之前的更改</p>\n</blockquote>\n</li>\n<li><p><code>git push -u origin master</code></p>\n<blockquote>\n<p>将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了</p>\n</blockquote>\n</li>\n<li><p><code>git pull</code></p>\n<blockquote>\n<p>相当于git fetch, git merge</p>\n</blockquote>\n</li>\n<li><p><code>git pull --rebase</code></p>\n<blockquote>\n<p>相当于git fetch , git rebase ，本地就不会出现提交分叉以及万恶的merge commit信息</p>\n</blockquote>\n</li>\n<li><p><code>rebase</code> 好处</p>\n<pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"reStructuredText\" cid=\"n214\" mdtype=\"fences\" style=\"box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;\">想要更好的提交树，使用rebase操作会更好一点。\n这样可以线性的看到每一次提交，并且没有增加提交节点。\nmerge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。\n而rebase 操作的话，会中断rebase,同时会提示去解决冲突。\n解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</pre>\n</li>\n<li><p><code>git stash</code></p>\n<blockquote>\n<p>储藏现场工作（将git仓库已经追踪记录的，但是没有commit的东西先存起来）</p>\n</blockquote>\n</li>\n<li><p><code>git stash list</code></p>\n<blockquote>\n<p>查看储藏区</p>\n</blockquote>\n</li>\n<li><p><code>git stash apply stash@{0}</code></p>\n<blockquote>\n<p>恢复储藏区， 不会删除储藏区的内容，等待commit</p>\n</blockquote>\n</li>\n<li><p><code>git stash pop</code></p>\n<blockquote>\n<p>恢复储藏区， 同时会删除储藏区的内容，等待commit</p>\n</blockquote>\n</li>\n<li><p><code>git stash drop stash@{0}</code></p>\n<blockquote>\n<p>删除储藏区的内容</p>\n</blockquote>\n</li>\n<li><p><code>git cherry-pick 4c805e2</code></p>\n<blockquote>\n<p>复制一个特定的提交到当前分支</p>\n</blockquote>\n</li>\n<li><p><code>git tag &lt;tagname&gt; ? &lt;commit ID&gt;</code></p>\n<blockquote>\n<p>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id</p>\n</blockquote>\n</li>\n<li><p><code>git tag -a &lt;tagname&gt; -m &quot;This is a tag&quot;</code></p>\n<blockquote>\n<p>可以指定标签信息</p>\n</blockquote>\n</li>\n<li><p><code>git tag</code></p>\n<blockquote>\n<p>查看所有标签</p>\n</blockquote>\n</li>\n<li><p><code>git show &lt;tagname&gt;</code></p>\n<blockquote>\n<p>查看一个标签</p>\n</blockquote>\n</li>\n<li><p><code>git tag -d &lt;tagname&gt;</code></p>\n<blockquote>\n<p>删除一个标签</p>\n</blockquote>\n</li>\n<li><p><code>git push origin &lt;tagname&gt;</code></p>\n<blockquote>\n<p>推送一个本地标签 到 远程</p>\n</blockquote>\n</li>\n<li><p><code>git push origin --tags</code></p>\n<blockquote>\n<p>推送全部未推送过的本地标签</p>\n</blockquote>\n</li>\n<li><p><code>git push origin :refs/tags/&lt;tagname&gt;</code></p>\n<blockquote>\n<p>删除一个远程标签</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"grunt","date":"2019-08-27T14:54:08.000Z","_content":"\n# grunt\n\n1. 安装环境\n\n   - npm init -y\n\n   - grunt `npm install grunt --save-dev`\n\n   - grunt-cli `npm install grunt-cli -g`, 这里我是全局安装grunt-cli\n\n     \n\n2. 配置文件\n\n   - 在package.json同级目录下，创建`Gruntfile.js`文件\n\n     ```js\n     module.exports = function(grunt) {\n       // Do grunt-related things in here\n     };\n     ```\n\n3. 为工程增加babel转义功能\n\n   - 为何要这么做？\n\n     - 由于现代浏览器对es6+的语法支持度不够高，对于...解构、async/await 等无法识别，所以需要将我们的代码编译为浏览器认识的代码（方便我们使用最新的语法去编写代码，使代码更清晰明了高大上）\n\n   - 安装依赖\n\n     - `npm install --save-dev grunt-babel @babel/core`\n     - `npm install @babel/preset-env --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       require(\"load-grunt-tasks\")(grunt); // npm install --save-dev load-grunt-tasks\n       \n       grunt.initConfig({\n         \"babel\": {\n           options: {\n             sourceMap: false,\n             presets: [\n               [\n                 '@babel/preset-env',\n                 {\n                   targets: {\n                     browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']\n                   }\n                 }\n               ]\n             ]\n           },\n           dist: {\n             files: {\n               \"dist/app.js\": \"src/app.js\"\n             }\n           }\n         }\n       });\n       \n       grunt.registerTask(\"default\", [\"babel\"]);\n       ```\n\n       ```\n       grunt.loadNpmTasks('grunt-babel');\n       ```\n\n       \n\n     - `@babel/core` 是实际用来转义es6+代码的\n\n     - `@babel/preset-env`是做转义预设，指定转义规则的\n\n4. 为环境增加全局变量`babel-polyfill`\n\n   - 为何要这样做？\n\n     - 当babel转义后，其实还有一些东西无法转义，比如es6+中的全局变量中的Promise, Object.assign()方法等，这就需要我们对当前环境进行一个polyfill，填充他们缺少的功能。（如果不填充，浏览器如果不认识Promise，那肯定运行的时候报错噻）\n\n   - 安装依赖\n\n     - `npm install --save-dev @babel/polyfill`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       presets: [\n               [\n                 '@babel/preset-env',\n                 {\n                   targets: {\n                     browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']\n                   },\n                   modules: 'commonjs', // 选项用于模块转化规则设置，可选配置包括：\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, 默认使用 \"commonjs\"。即，将代码中的ES6的import转为require。\n                   corejs: '3', // 声明corejs版本\n                   useBuiltIns: 'usage' // 不用显示引用@babel/polyfill\n                 }\n               ]\n             ]\n       ```\n\n       \n\n5. 为环境增加browserify功能\n\n   - 为何这样做\n\n     - 我们会发现babel转义出来的代码里面，会有require()/import语法，这都是引入的polyfill，但是浏览器不认识require() 这种commonJs 的CMD语法，也不认识import/exports 等语法，必须转换为浏览器认识的。\n     - browserify默认是将require进行转换。\n     - 对前端define的转换还不知道怎么配置。\n\n   - 安装依赖\n\n     - `npm install --save-dev browserify`\n     - `npm install --save-dev grunt-browserify`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       // 让浏览器适配require(commonJS,CMD)\n          browserify: {\n             dist: {\n               files: [\n                 {\n                   expand: true,\n                   src: ['**/*.js'], //所有js文件\n                   dest: tmpDirBabel, //输出到此目录下\n                   cwd: tmpDirBabel //js目录下\n                 }\n               ]\n             }\n           }\n       ```\n\n       ```\n       grunt.loadNpmTasks('grunt-browserify');\n       ```\n\n6. 配置压缩功能\n\n   - 为何这样做？\n\n     - js文件进行压缩体积，优化方向\n\n   - 安装依赖\n\n     - `npm install grunt-contrib-uglify --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       // 自定义压缩\n           uglify: {\n             options: {\n               mangle: true, //混淆变量名\n               comments: 'false' //false（删除全部注释），some（保留@preserve @license @cc_on等注释）\n             },\n             uglifyFile: {\n               files: [\n                 {\n                   expand: true,\n                   src: ['**/*.js'], //所有js文件\n                   dest: tmpDirBabel, //输出到此目录下\n                   cwd: tmpDirBabel //js目录下\n                 }\n               ]\n             }\n           }\n       ```\n\n       ```js\n       grunt.loadNpmTasks('grunt-contrib-uglify');\n       ```\n\n7. 配置监听\n\n   - 为何这么做？\n\n     - 当文件发生更改时，需要做的一些任务，通常配置dev环境，比如less的编译， 本地js的转义等\n\n   - 安装依赖\n\n     - `npm install grunt-contrib-watch grunt-contrib-livereload --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       watch: {\n             js: {\n               files: ['localApp/**/*.js'], //所有js\n               tasks: [\n                 'babel',\n                 'browserify'\n               ],\n               options: {\n                 interrupt: true, // 如果文件再次更改，则停止上一次的任务，重新构建新的\n                 livereload: true\n               }\n             },\n             others: {\n               files: ['localApp/**/*', '!localApp/**/*.js'], // 除了js\n               tasks: ['copy:copyOthersToWebApp'],\n               options: {\n                 interrupt: true,\n                 livereload: true\n               }\n             }\n           }\n       \n       ```\n\n       ```js\n        grunt.loadNpmTasks('grunt-contrib-watch');\n        grunt.loadNpmTasks('grunt-contrib-livereload');\n       \n       ```\n\n8. 加载npm任务\n\n   ```js\n     grunt.loadNpmTasks('grunt-babel');\n   \n   ```\n\n   \n\n9. 注册自定义任务\n\n   ```js\n   grunt.registerTask('dev', ['watch']);\n   \n   ```\n\n   ","source":"_posts/grunt.md","raw":"---\ntitle: grunt\ndate: 2019-08-27 22:54:08\ntags: \n- 自动化构建\ncategories:\n- 自动化构建\n---\n\n# grunt\n\n1. 安装环境\n\n   - npm init -y\n\n   - grunt `npm install grunt --save-dev`\n\n   - grunt-cli `npm install grunt-cli -g`, 这里我是全局安装grunt-cli\n\n     \n\n2. 配置文件\n\n   - 在package.json同级目录下，创建`Gruntfile.js`文件\n\n     ```js\n     module.exports = function(grunt) {\n       // Do grunt-related things in here\n     };\n     ```\n\n3. 为工程增加babel转义功能\n\n   - 为何要这么做？\n\n     - 由于现代浏览器对es6+的语法支持度不够高，对于...解构、async/await 等无法识别，所以需要将我们的代码编译为浏览器认识的代码（方便我们使用最新的语法去编写代码，使代码更清晰明了高大上）\n\n   - 安装依赖\n\n     - `npm install --save-dev grunt-babel @babel/core`\n     - `npm install @babel/preset-env --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       require(\"load-grunt-tasks\")(grunt); // npm install --save-dev load-grunt-tasks\n       \n       grunt.initConfig({\n         \"babel\": {\n           options: {\n             sourceMap: false,\n             presets: [\n               [\n                 '@babel/preset-env',\n                 {\n                   targets: {\n                     browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']\n                   }\n                 }\n               ]\n             ]\n           },\n           dist: {\n             files: {\n               \"dist/app.js\": \"src/app.js\"\n             }\n           }\n         }\n       });\n       \n       grunt.registerTask(\"default\", [\"babel\"]);\n       ```\n\n       ```\n       grunt.loadNpmTasks('grunt-babel');\n       ```\n\n       \n\n     - `@babel/core` 是实际用来转义es6+代码的\n\n     - `@babel/preset-env`是做转义预设，指定转义规则的\n\n4. 为环境增加全局变量`babel-polyfill`\n\n   - 为何要这样做？\n\n     - 当babel转义后，其实还有一些东西无法转义，比如es6+中的全局变量中的Promise, Object.assign()方法等，这就需要我们对当前环境进行一个polyfill，填充他们缺少的功能。（如果不填充，浏览器如果不认识Promise，那肯定运行的时候报错噻）\n\n   - 安装依赖\n\n     - `npm install --save-dev @babel/polyfill`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       presets: [\n               [\n                 '@babel/preset-env',\n                 {\n                   targets: {\n                     browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']\n                   },\n                   modules: 'commonjs', // 选项用于模块转化规则设置，可选配置包括：\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, 默认使用 \"commonjs\"。即，将代码中的ES6的import转为require。\n                   corejs: '3', // 声明corejs版本\n                   useBuiltIns: 'usage' // 不用显示引用@babel/polyfill\n                 }\n               ]\n             ]\n       ```\n\n       \n\n5. 为环境增加browserify功能\n\n   - 为何这样做\n\n     - 我们会发现babel转义出来的代码里面，会有require()/import语法，这都是引入的polyfill，但是浏览器不认识require() 这种commonJs 的CMD语法，也不认识import/exports 等语法，必须转换为浏览器认识的。\n     - browserify默认是将require进行转换。\n     - 对前端define的转换还不知道怎么配置。\n\n   - 安装依赖\n\n     - `npm install --save-dev browserify`\n     - `npm install --save-dev grunt-browserify`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       // 让浏览器适配require(commonJS,CMD)\n          browserify: {\n             dist: {\n               files: [\n                 {\n                   expand: true,\n                   src: ['**/*.js'], //所有js文件\n                   dest: tmpDirBabel, //输出到此目录下\n                   cwd: tmpDirBabel //js目录下\n                 }\n               ]\n             }\n           }\n       ```\n\n       ```\n       grunt.loadNpmTasks('grunt-browserify');\n       ```\n\n6. 配置压缩功能\n\n   - 为何这样做？\n\n     - js文件进行压缩体积，优化方向\n\n   - 安装依赖\n\n     - `npm install grunt-contrib-uglify --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       // 自定义压缩\n           uglify: {\n             options: {\n               mangle: true, //混淆变量名\n               comments: 'false' //false（删除全部注释），some（保留@preserve @license @cc_on等注释）\n             },\n             uglifyFile: {\n               files: [\n                 {\n                   expand: true,\n                   src: ['**/*.js'], //所有js文件\n                   dest: tmpDirBabel, //输出到此目录下\n                   cwd: tmpDirBabel //js目录下\n                 }\n               ]\n             }\n           }\n       ```\n\n       ```js\n       grunt.loadNpmTasks('grunt-contrib-uglify');\n       ```\n\n7. 配置监听\n\n   - 为何这么做？\n\n     - 当文件发生更改时，需要做的一些任务，通常配置dev环境，比如less的编译， 本地js的转义等\n\n   - 安装依赖\n\n     - `npm install grunt-contrib-watch grunt-contrib-livereload --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       watch: {\n             js: {\n               files: ['localApp/**/*.js'], //所有js\n               tasks: [\n                 'babel',\n                 'browserify'\n               ],\n               options: {\n                 interrupt: true, // 如果文件再次更改，则停止上一次的任务，重新构建新的\n                 livereload: true\n               }\n             },\n             others: {\n               files: ['localApp/**/*', '!localApp/**/*.js'], // 除了js\n               tasks: ['copy:copyOthersToWebApp'],\n               options: {\n                 interrupt: true,\n                 livereload: true\n               }\n             }\n           }\n       \n       ```\n\n       ```js\n        grunt.loadNpmTasks('grunt-contrib-watch');\n        grunt.loadNpmTasks('grunt-contrib-livereload');\n       \n       ```\n\n8. 加载npm任务\n\n   ```js\n     grunt.loadNpmTasks('grunt-babel');\n   \n   ```\n\n   \n\n9. 注册自定义任务\n\n   ```js\n   grunt.registerTask('dev', ['watch']);\n   \n   ```\n\n   ","slug":"grunt","published":1,"updated":"2021-01-15T02:39:36.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmbs3qay000ch0nhp3ypyp21","content":"<h1 id=\"grunt\"><a href=\"#grunt\" class=\"headerlink\" title=\"grunt\"></a>grunt</h1><ol>\n<li><p>安装环境</p>\n<ul>\n<li><p>npm init -y</p>\n</li>\n<li><p>grunt <code>npm install grunt --save-dev</code></p>\n</li>\n<li><p>grunt-cli <code>npm install grunt-cli -g</code>, 这里我是全局安装grunt-cli</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>配置文件</p>\n<ul>\n<li><p>在package.json同级目录下，创建<code>Gruntfile.js</code>文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do grunt-related things in here</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>为工程增加babel转义功能</p>\n<ul>\n<li><p>为何要这么做？</p>\n<ul>\n<li>由于现代浏览器对es6+的语法支持度不够高，对于…解构、async/await 等无法识别，所以需要将我们的代码编译为浏览器认识的代码（方便我们使用最新的语法去编写代码，使代码更清晰明了高大上）</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev grunt-babel @babel/core</code></li>\n<li><code>npm install @babel/preset-env --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"load-grunt-tasks\"</span>)(grunt); <span class=\"comment\">// npm install --save-dev load-grunt-tasks</span></span><br><span class=\"line\"></span><br><span class=\"line\">grunt.initConfig(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"babel\"</span>: &#123;</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">          <span class=\"string\">'@babel/preset-env'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            targets: &#123;</span><br><span class=\"line\">              browsers: [<span class=\"string\">'&gt; 1%'</span>, <span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'not ie &lt;= 8'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    dist: &#123;</span><br><span class=\"line\">      files: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"dist/app.js\"</span>: <span class=\"string\">\"src/app.js\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">grunt.registerTask(<span class=\"string\">\"default\"</span>, [<span class=\"string\">\"babel\"</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&apos;grunt-babel&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>- `@babel/core` 是实际用来转义es6+代码的\n\n- `@babel/preset-env`是做转义预设，指定转义规则的\n</code></pre><ol start=\"4\">\n<li><p>为环境增加全局变量<code>babel-polyfill</code></p>\n<ul>\n<li><p>为何要这样做？</p>\n<ul>\n<li>当babel转义后，其实还有一些东西无法转义，比如es6+中的全局变量中的Promise, Object.assign()方法等，这就需要我们对当前环境进行一个polyfill，填充他们缺少的功能。（如果不填充，浏览器如果不认识Promise，那肯定运行的时候报错噻）</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev @babel/polyfill</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">presets: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">          <span class=\"string\">'@babel/preset-env'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            targets: &#123;</span><br><span class=\"line\">              browsers: [<span class=\"string\">'&gt; 1%'</span>, <span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'not ie &lt;= 8'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            modules: <span class=\"string\">'commonjs'</span>, <span class=\"comment\">// 选项用于模块转化规则设置，可选配置包括：\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, 默认使用 \"commonjs\"。即，将代码中的ES6的import转为require。</span></span><br><span class=\"line\">            corejs: <span class=\"string\">'3'</span>, <span class=\"comment\">// 声明corejs版本</span></span><br><span class=\"line\">            useBuiltIns: <span class=\"string\">'usage'</span> <span class=\"comment\">// 不用显示引用@babel/polyfill</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      ]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>为环境增加browserify功能</p>\n<ul>\n<li><p>为何这样做</p>\n<ul>\n<li>我们会发现babel转义出来的代码里面，会有require()/import语法，这都是引入的polyfill，但是浏览器不认识require() 这种commonJs 的CMD语法，也不认识import/exports 等语法，必须转换为浏览器认识的。</li>\n<li>browserify默认是将require进行转换。</li>\n<li>对前端define的转换还不知道怎么配置。</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev browserify</code></li>\n<li><code>npm install --save-dev grunt-browserify</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让浏览器适配require(commonJS,CMD)</span></span><br><span class=\"line\">   browserify: &#123;</span><br><span class=\"line\">      dist: &#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            expand: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            src: [<span class=\"string\">'**/*.js'</span>], <span class=\"comment\">//所有js文件</span></span><br><span class=\"line\">            dest: tmpDirBabel, <span class=\"comment\">//输出到此目录下</span></span><br><span class=\"line\">            cwd: tmpDirBabel <span class=\"comment\">//js目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&apos;grunt-browserify&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置压缩功能</p>\n<ul>\n<li><p>为何这样做？</p>\n<ul>\n<li>js文件进行压缩体积，优化方向</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install grunt-contrib-uglify --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义压缩</span></span><br><span class=\"line\">    uglify: &#123;</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        mangle: <span class=\"literal\">true</span>, <span class=\"comment\">//混淆变量名</span></span><br><span class=\"line\">        comments: <span class=\"string\">'false'</span> <span class=\"comment\">//false（删除全部注释），some（保留@preserve @license @cc_on等注释）</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      uglifyFile: &#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            expand: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            src: [<span class=\"string\">'**/*.js'</span>], <span class=\"comment\">//所有js文件</span></span><br><span class=\"line\">            dest: tmpDirBabel, <span class=\"comment\">//输出到此目录下</span></span><br><span class=\"line\">            cwd: tmpDirBabel <span class=\"comment\">//js目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置监听</p>\n<ul>\n<li><p>为何这么做？</p>\n<ul>\n<li>当文件发生更改时，需要做的一些任务，通常配置dev环境，比如less的编译， 本地js的转义等</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install grunt-contrib-watch grunt-contrib-livereload --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">      js: &#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'localApp/**/*.js'</span>], <span class=\"comment\">//所有js</span></span><br><span class=\"line\">        tasks: [</span><br><span class=\"line\">          <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">          <span class=\"string\">'browserify'</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          interrupt: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果文件再次更改，则停止上一次的任务，重新构建新的</span></span><br><span class=\"line\">          livereload: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      others: &#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'localApp/**/*'</span>, <span class=\"string\">'!localApp/**/*.js'</span>], <span class=\"comment\">// 除了js</span></span><br><span class=\"line\">        tasks: [<span class=\"string\">'copy:copyOthersToWebApp'</span>],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          interrupt: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          livereload: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</span><br><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-livereload'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>加载npm任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-babel'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"9\">\n<li><p>注册自定义任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.registerTask(<span class=\"string\">'dev'</span>, [<span class=\"string\">'watch'</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"grunt\"><a href=\"#grunt\" class=\"headerlink\" title=\"grunt\"></a>grunt</h1><ol>\n<li><p>安装环境</p>\n<ul>\n<li><p>npm init -y</p>\n</li>\n<li><p>grunt <code>npm install grunt --save-dev</code></p>\n</li>\n<li><p>grunt-cli <code>npm install grunt-cli -g</code>, 这里我是全局安装grunt-cli</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>配置文件</p>\n<ul>\n<li><p>在package.json同级目录下，创建<code>Gruntfile.js</code>文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do grunt-related things in here</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>为工程增加babel转义功能</p>\n<ul>\n<li><p>为何要这么做？</p>\n<ul>\n<li>由于现代浏览器对es6+的语法支持度不够高，对于…解构、async/await 等无法识别，所以需要将我们的代码编译为浏览器认识的代码（方便我们使用最新的语法去编写代码，使代码更清晰明了高大上）</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev grunt-babel @babel/core</code></li>\n<li><code>npm install @babel/preset-env --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"load-grunt-tasks\"</span>)(grunt); <span class=\"comment\">// npm install --save-dev load-grunt-tasks</span></span><br><span class=\"line\"></span><br><span class=\"line\">grunt.initConfig(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"babel\"</span>: &#123;</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">          <span class=\"string\">'@babel/preset-env'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            targets: &#123;</span><br><span class=\"line\">              browsers: [<span class=\"string\">'&gt; 1%'</span>, <span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'not ie &lt;= 8'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    dist: &#123;</span><br><span class=\"line\">      files: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"dist/app.js\"</span>: <span class=\"string\">\"src/app.js\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">grunt.registerTask(<span class=\"string\">\"default\"</span>, [<span class=\"string\">\"babel\"</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&apos;grunt-babel&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>- `@babel/core` 是实际用来转义es6+代码的\n\n- `@babel/preset-env`是做转义预设，指定转义规则的\n</code></pre><ol start=\"4\">\n<li><p>为环境增加全局变量<code>babel-polyfill</code></p>\n<ul>\n<li><p>为何要这样做？</p>\n<ul>\n<li>当babel转义后，其实还有一些东西无法转义，比如es6+中的全局变量中的Promise, Object.assign()方法等，这就需要我们对当前环境进行一个polyfill，填充他们缺少的功能。（如果不填充，浏览器如果不认识Promise，那肯定运行的时候报错噻）</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev @babel/polyfill</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">presets: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">          <span class=\"string\">'@babel/preset-env'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            targets: &#123;</span><br><span class=\"line\">              browsers: [<span class=\"string\">'&gt; 1%'</span>, <span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'not ie &lt;= 8'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            modules: <span class=\"string\">'commonjs'</span>, <span class=\"comment\">// 选项用于模块转化规则设置，可选配置包括：\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, 默认使用 \"commonjs\"。即，将代码中的ES6的import转为require。</span></span><br><span class=\"line\">            corejs: <span class=\"string\">'3'</span>, <span class=\"comment\">// 声明corejs版本</span></span><br><span class=\"line\">            useBuiltIns: <span class=\"string\">'usage'</span> <span class=\"comment\">// 不用显示引用@babel/polyfill</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      ]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>为环境增加browserify功能</p>\n<ul>\n<li><p>为何这样做</p>\n<ul>\n<li>我们会发现babel转义出来的代码里面，会有require()/import语法，这都是引入的polyfill，但是浏览器不认识require() 这种commonJs 的CMD语法，也不认识import/exports 等语法，必须转换为浏览器认识的。</li>\n<li>browserify默认是将require进行转换。</li>\n<li>对前端define的转换还不知道怎么配置。</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev browserify</code></li>\n<li><code>npm install --save-dev grunt-browserify</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让浏览器适配require(commonJS,CMD)</span></span><br><span class=\"line\">   browserify: &#123;</span><br><span class=\"line\">      dist: &#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            expand: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            src: [<span class=\"string\">'**/*.js'</span>], <span class=\"comment\">//所有js文件</span></span><br><span class=\"line\">            dest: tmpDirBabel, <span class=\"comment\">//输出到此目录下</span></span><br><span class=\"line\">            cwd: tmpDirBabel <span class=\"comment\">//js目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&apos;grunt-browserify&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置压缩功能</p>\n<ul>\n<li><p>为何这样做？</p>\n<ul>\n<li>js文件进行压缩体积，优化方向</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install grunt-contrib-uglify --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义压缩</span></span><br><span class=\"line\">    uglify: &#123;</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        mangle: <span class=\"literal\">true</span>, <span class=\"comment\">//混淆变量名</span></span><br><span class=\"line\">        comments: <span class=\"string\">'false'</span> <span class=\"comment\">//false（删除全部注释），some（保留@preserve @license @cc_on等注释）</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      uglifyFile: &#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            expand: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            src: [<span class=\"string\">'**/*.js'</span>], <span class=\"comment\">//所有js文件</span></span><br><span class=\"line\">            dest: tmpDirBabel, <span class=\"comment\">//输出到此目录下</span></span><br><span class=\"line\">            cwd: tmpDirBabel <span class=\"comment\">//js目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置监听</p>\n<ul>\n<li><p>为何这么做？</p>\n<ul>\n<li>当文件发生更改时，需要做的一些任务，通常配置dev环境，比如less的编译， 本地js的转义等</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install grunt-contrib-watch grunt-contrib-livereload --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">      js: &#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'localApp/**/*.js'</span>], <span class=\"comment\">//所有js</span></span><br><span class=\"line\">        tasks: [</span><br><span class=\"line\">          <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">          <span class=\"string\">'browserify'</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          interrupt: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果文件再次更改，则停止上一次的任务，重新构建新的</span></span><br><span class=\"line\">          livereload: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      others: &#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'localApp/**/*'</span>, <span class=\"string\">'!localApp/**/*.js'</span>], <span class=\"comment\">// 除了js</span></span><br><span class=\"line\">        tasks: [<span class=\"string\">'copy:copyOthersToWebApp'</span>],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          interrupt: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          livereload: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</span><br><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-livereload'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>加载npm任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-babel'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"9\">\n<li><p>注册自定义任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.registerTask(<span class=\"string\">'dev'</span>, [<span class=\"string\">'watch'</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"karma 前端单元测试工具","date":"2021-01-25T03:33:24.000Z","_content":"\n- 支持es6的语法检测及其覆盖率\n\n  - `npm install karma-coverage-istanbul-instrumenter karma-coverage-istanbul-reporter -D`\n\n  - karma.conf.js\n\n    ```js\n    preprocessors: {\n        'webapp/controller/*.js': ['karma-coverage-istanbul-instrumenter'] // 可以识别这些文件的es6语法\n    },\n    coverageIstanbulInstrumenter: {\n        esModules: false\n    },\n    reporters: ['progress', 'coverage-istanbul'],\n    coverageIstanbulReporter: {\n        dir: './target/coverage',\n        includeAllSources: true,\n        // 生成的是xml，cobertura改为html将生成html文件的覆盖率报告\n        reports: ['cobertura', 'lcovonly', 'text-summary'] \n    },\n    plugins: ['karma-*']\n    ```\n\n    \n\n","source":"_posts/karma.md","raw":"---\ntitle: karma 前端单元测试工具\ndate: 2021-01-25 11:33:24\ntags:\ncategories:\n---\n\n- 支持es6的语法检测及其覆盖率\n\n  - `npm install karma-coverage-istanbul-instrumenter karma-coverage-istanbul-reporter -D`\n\n  - karma.conf.js\n\n    ```js\n    preprocessors: {\n        'webapp/controller/*.js': ['karma-coverage-istanbul-instrumenter'] // 可以识别这些文件的es6语法\n    },\n    coverageIstanbulInstrumenter: {\n        esModules: false\n    },\n    reporters: ['progress', 'coverage-istanbul'],\n    coverageIstanbulReporter: {\n        dir: './target/coverage',\n        includeAllSources: true,\n        // 生成的是xml，cobertura改为html将生成html文件的覆盖率报告\n        reports: ['cobertura', 'lcovonly', 'text-summary'] \n    },\n    plugins: ['karma-*']\n    ```\n\n    \n\n","slug":"karma","published":1,"updated":"2021-01-25T03:34:13.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmbs3qb6000fh0nhu2uhgexo","content":"<ul>\n<li><p>支持es6的语法检测及其覆盖率</p>\n<ul>\n<li><p><code>npm install karma-coverage-istanbul-instrumenter karma-coverage-istanbul-reporter -D</code></p>\n</li>\n<li><p>karma.conf.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preprocessors: &#123;</span><br><span class=\"line\">    <span class=\"string\">'webapp/controller/*.js'</span>: [<span class=\"string\">'karma-coverage-istanbul-instrumenter'</span>] <span class=\"comment\">// 可以识别这些文件的es6语法</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">coverageIstanbulInstrumenter: &#123;</span><br><span class=\"line\">    esModules: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">reporters: [<span class=\"string\">'progress'</span>, <span class=\"string\">'coverage-istanbul'</span>],</span><br><span class=\"line\">coverageIstanbulReporter: &#123;</span><br><span class=\"line\">    dir: <span class=\"string\">'./target/coverage'</span>,</span><br><span class=\"line\">    includeAllSources: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生成的是xml，cobertura改为html将生成html文件的覆盖率报告</span></span><br><span class=\"line\">    reports: [<span class=\"string\">'cobertura'</span>, <span class=\"string\">'lcovonly'</span>, <span class=\"string\">'text-summary'</span>] </span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [<span class=\"string\">'karma-*'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>支持es6的语法检测及其覆盖率</p>\n<ul>\n<li><p><code>npm install karma-coverage-istanbul-instrumenter karma-coverage-istanbul-reporter -D</code></p>\n</li>\n<li><p>karma.conf.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">preprocessors: &#123;</span><br><span class=\"line\">    <span class=\"string\">'webapp/controller/*.js'</span>: [<span class=\"string\">'karma-coverage-istanbul-instrumenter'</span>] <span class=\"comment\">// 可以识别这些文件的es6语法</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">coverageIstanbulInstrumenter: &#123;</span><br><span class=\"line\">    esModules: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">reporters: [<span class=\"string\">'progress'</span>, <span class=\"string\">'coverage-istanbul'</span>],</span><br><span class=\"line\">coverageIstanbulReporter: &#123;</span><br><span class=\"line\">    dir: <span class=\"string\">'./target/coverage'</span>,</span><br><span class=\"line\">    includeAllSources: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 生成的是xml，cobertura改为html将生成html文件的覆盖率报告</span></span><br><span class=\"line\">    reports: [<span class=\"string\">'cobertura'</span>, <span class=\"string\">'lcovonly'</span>, <span class=\"string\">'text-summary'</span>] </span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">plugins: [<span class=\"string\">'karma-*'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"单元测试","date":"2018-12-29T07:31:51.000Z","comments":0,"_content":"# mocha + chai 单元测试\n\n参考链接： [测试框架 Mocha 实例教程](http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html)\n断言库使用 [chai](https://www.chaijs.com/api/bdd/)\n\n> 主要为个人的练习记录存放，下面会展示一些或者重点易错点。\n\n## 通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。\n```js\n$ mocha spec/{my,awesome}.js\n$ mocha test/unit/*.js\n$ mocha 'test/**/*.@(js|jsx)' // 也支持node的通配符，使用字符串包裹起来即可\n\n提示： 如果只有一个文件的时候，也需要加上, 比如 mocha test/{cf,}.js 否则会报错。\nWarning: Could not find any test files matching pattern: test/{cf}.js\nNo test files found\n\n```\n\n## 递归执行（mocha默认会执行当前目录下的test目录下的文件）\n\n```js\n如果想执行内嵌的其他文件，比如：\ntest/cf/**.js;\ntest/gg/tt/**.js;\n这种默认使用mocha命令是不会执行的，因为他们不在test目录下。\n可以使用：\nmocha --recursive 即可以递归执行test目录下所有文件，包含深度嵌套的。\n```\n\n## 显示报告结果(`--reporter`参数用来指定测试报告的格式，默认是`spec`格式。)\n\n```js\n$ mocha\n# 等同于\n$ mocha --reporter spec\n```\n\n> `--reporters`参数可以显示所有内置的报告格式。\n\n```js\n$ mocha --reporters\n```\n\n## 生成报告结果（使用[`mochawesome`](http://adamgruber.github.io/mochawesome/)模块，可以生成漂亮的HTML格式的报告。）\n\n```js\n$ npm install --save-dev mochawesome\n$ ../node_modules/.bin/mocha --reporter mochawesome\n```\n\n上面代码中，`mocha`命令使用了项目内安装的版本，而不是全局安装的版本，因为`mochawesome`模块是安装在项目内的。\n\n然后，测试结果报告就在[`mochaawesome-reports`](https://github.com/ruanyf/mocha-demos/blob/master/demo02/mochawesome-reports)子目录生成。\n\n## 配置文件mocha.opts\n\nMocha允许在`test`目录下面，放置配置文件`mocha.opts`，把命令行参数写在里面。请先进入[`demo03`](https://github.com/ruanyf/mocha-demos/tree/master/demo03)目录，运行下面的命令。\n\n```js\n$ mocha --recursive --reporter tap\n```\n\n上面这个命令有两个参数`--recursive`、`--reporter tap`。\n\n然后，把这两个参数写入`test`目录下的[`mocha.opts`](https://github.com/ruanyf/mocha-demos/blob/master/demo03/test/mocha.opts)文件。\n\n```js\n--reporter tap\n--recursive\n```\n\n然后，执行`mocha`就能取得与第一行命令一样的效果。\n\n```js\n$ mocha\n```\n\n如果测试用例不是存放在test子目录，可以在`mocha.opts`写入以下内容。\n\n```js\notherDirTests\n--recursive\n```\n\n上面代码指定运行`otherDirTests`目录及其子目录之中的测试脚本。\n\n## ES6测试\n\n如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入[`demo04`](https://github.com/ruanyf/mocha-demos/tree/master/demo04)目录，打开[`test/add.test.js`](https://github.com/ruanyf/mocha-demos/blob/master/demo04/test/add.test.js)文件，可以看到这个测试用例是用ES6写的。\n\n```js\nimport add from '../src/add.js';\nimport chai from 'chai';\n\nlet expect = chai.expect;\n\ndescribe('加法函数的测试', function() {\n  it('1 加 1 应该等于 2', function() {\n    expect(add(1, 1)).to.be.equal(2);\n  });\n});\n```\n\nES6转码，需要安装Babel。\n\n```js\n$ npm install babel-core babel-preset-es2015 --save-dev\n```\n\n然后，在项目目录下面，新建一个[`.babelrc`](https://github.com/ruanyf/mocha-demos/blob/master/demo04/.babelrc)配置文件。\n\n```js\n{\n  \"presets\": [ \"es2015\" ]\n}\n```\n\n最后，使用`--compilers`参数指定测试脚本的转码器。\n\n```js\n$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n```\n\n上面代码中，`--compilers`参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用`babel-core/register`模块，处理一下`.js`文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。\n\n> 可以结合mocha.opts使用，或者在package.json中自定义命令去实现。\n\n\n### package.json（使用方式：`npm run test`）\n\n```js\n\"scripts\": {\n    \"test\": \"mocha --recursive --compilers js:babel-core/register\"\n }\n```\n\n--compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！\n\n```js\n\"scripts\": {\n    \"test\": \"mocha --recursive --require babel-core/register\"\n }\n```\n\n### Mocha.opts（使用方式： `mocha`）\n\n```js\n--reporter spec\n--recursive\n--compilers js:babel-core/register\n```\n\n--compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！\n\n```js\n--reporter spec\n--recursive\n--require babel-core/register\n```","source":"_posts/mocha.md","raw":"---\ntitle: 单元测试\ndate: 2018-12-29 15:31:51\ntags:\n- mocha\ncategories:\n- mocha\ncomments: false\n---\n# mocha + chai 单元测试\n\n参考链接： [测试框架 Mocha 实例教程](http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html)\n断言库使用 [chai](https://www.chaijs.com/api/bdd/)\n\n> 主要为个人的练习记录存放，下面会展示一些或者重点易错点。\n\n## 通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。\n```js\n$ mocha spec/{my,awesome}.js\n$ mocha test/unit/*.js\n$ mocha 'test/**/*.@(js|jsx)' // 也支持node的通配符，使用字符串包裹起来即可\n\n提示： 如果只有一个文件的时候，也需要加上, 比如 mocha test/{cf,}.js 否则会报错。\nWarning: Could not find any test files matching pattern: test/{cf}.js\nNo test files found\n\n```\n\n## 递归执行（mocha默认会执行当前目录下的test目录下的文件）\n\n```js\n如果想执行内嵌的其他文件，比如：\ntest/cf/**.js;\ntest/gg/tt/**.js;\n这种默认使用mocha命令是不会执行的，因为他们不在test目录下。\n可以使用：\nmocha --recursive 即可以递归执行test目录下所有文件，包含深度嵌套的。\n```\n\n## 显示报告结果(`--reporter`参数用来指定测试报告的格式，默认是`spec`格式。)\n\n```js\n$ mocha\n# 等同于\n$ mocha --reporter spec\n```\n\n> `--reporters`参数可以显示所有内置的报告格式。\n\n```js\n$ mocha --reporters\n```\n\n## 生成报告结果（使用[`mochawesome`](http://adamgruber.github.io/mochawesome/)模块，可以生成漂亮的HTML格式的报告。）\n\n```js\n$ npm install --save-dev mochawesome\n$ ../node_modules/.bin/mocha --reporter mochawesome\n```\n\n上面代码中，`mocha`命令使用了项目内安装的版本，而不是全局安装的版本，因为`mochawesome`模块是安装在项目内的。\n\n然后，测试结果报告就在[`mochaawesome-reports`](https://github.com/ruanyf/mocha-demos/blob/master/demo02/mochawesome-reports)子目录生成。\n\n## 配置文件mocha.opts\n\nMocha允许在`test`目录下面，放置配置文件`mocha.opts`，把命令行参数写在里面。请先进入[`demo03`](https://github.com/ruanyf/mocha-demos/tree/master/demo03)目录，运行下面的命令。\n\n```js\n$ mocha --recursive --reporter tap\n```\n\n上面这个命令有两个参数`--recursive`、`--reporter tap`。\n\n然后，把这两个参数写入`test`目录下的[`mocha.opts`](https://github.com/ruanyf/mocha-demos/blob/master/demo03/test/mocha.opts)文件。\n\n```js\n--reporter tap\n--recursive\n```\n\n然后，执行`mocha`就能取得与第一行命令一样的效果。\n\n```js\n$ mocha\n```\n\n如果测试用例不是存放在test子目录，可以在`mocha.opts`写入以下内容。\n\n```js\notherDirTests\n--recursive\n```\n\n上面代码指定运行`otherDirTests`目录及其子目录之中的测试脚本。\n\n## ES6测试\n\n如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入[`demo04`](https://github.com/ruanyf/mocha-demos/tree/master/demo04)目录，打开[`test/add.test.js`](https://github.com/ruanyf/mocha-demos/blob/master/demo04/test/add.test.js)文件，可以看到这个测试用例是用ES6写的。\n\n```js\nimport add from '../src/add.js';\nimport chai from 'chai';\n\nlet expect = chai.expect;\n\ndescribe('加法函数的测试', function() {\n  it('1 加 1 应该等于 2', function() {\n    expect(add(1, 1)).to.be.equal(2);\n  });\n});\n```\n\nES6转码，需要安装Babel。\n\n```js\n$ npm install babel-core babel-preset-es2015 --save-dev\n```\n\n然后，在项目目录下面，新建一个[`.babelrc`](https://github.com/ruanyf/mocha-demos/blob/master/demo04/.babelrc)配置文件。\n\n```js\n{\n  \"presets\": [ \"es2015\" ]\n}\n```\n\n最后，使用`--compilers`参数指定测试脚本的转码器。\n\n```js\n$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n```\n\n上面代码中，`--compilers`参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用`babel-core/register`模块，处理一下`.js`文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。\n\n> 可以结合mocha.opts使用，或者在package.json中自定义命令去实现。\n\n\n### package.json（使用方式：`npm run test`）\n\n```js\n\"scripts\": {\n    \"test\": \"mocha --recursive --compilers js:babel-core/register\"\n }\n```\n\n--compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！\n\n```js\n\"scripts\": {\n    \"test\": \"mocha --recursive --require babel-core/register\"\n }\n```\n\n### Mocha.opts（使用方式： `mocha`）\n\n```js\n--reporter spec\n--recursive\n--compilers js:babel-core/register\n```\n\n--compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！\n\n```js\n--reporter spec\n--recursive\n--require babel-core/register\n```","slug":"mocha","published":1,"updated":"2021-01-15T02:39:36.492Z","layout":"post","photos":[],"link":"","_id":"ckmbs3qbe000hh0nhk1d4qt17","content":"<h1 id=\"mocha-chai-单元测试\"><a href=\"#mocha-chai-单元测试\" class=\"headerlink\" title=\"mocha + chai 单元测试\"></a>mocha + chai 单元测试</h1><p>参考链接： <a href=\"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\" target=\"_blank\" rel=\"noopener\">测试框架 Mocha 实例教程</a><br>断言库使用 <a href=\"https://www.chaijs.com/api/bdd/\" target=\"_blank\" rel=\"noopener\">chai</a></p>\n<blockquote>\n<p>主要为个人的练习记录存放，下面会展示一些或者重点易错点。</p>\n</blockquote>\n<h2 id=\"通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。\"><a href=\"#通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。\" class=\"headerlink\" title=\"通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。\"></a>通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha spec/&#123;my,awesome&#125;.js</span><br><span class=\"line\">$ mocha test/unit<span class=\"comment\">/*.js</span></span><br><span class=\"line\"><span class=\"comment\">$ mocha 'test/**/</span>*.@(js|jsx)<span class=\"string\">' // 也支持node的通配符，使用字符串包裹起来即可</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">提示： 如果只有一个文件的时候，也需要加上, 比如 mocha test/&#123;cf,&#125;.js 否则会报错。</span></span><br><span class=\"line\"><span class=\"string\">Warning: Could not find any test files matching pattern: test/&#123;cf&#125;.js</span></span><br><span class=\"line\"><span class=\"string\">No test files found</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"递归执行（mocha默认会执行当前目录下的test目录下的文件）\"><a href=\"#递归执行（mocha默认会执行当前目录下的test目录下的文件）\" class=\"headerlink\" title=\"递归执行（mocha默认会执行当前目录下的test目录下的文件）\"></a>递归执行（mocha默认会执行当前目录下的test目录下的文件）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果想执行内嵌的其他文件，比如：</span><br><span class=\"line\">test/cf<span class=\"comment\">/**.js;</span></span><br><span class=\"line\"><span class=\"comment\">test/gg/tt/**.js;</span></span><br><span class=\"line\"><span class=\"comment\">这种默认使用mocha命令是不会执行的，因为他们不在test目录下。</span></span><br><span class=\"line\"><span class=\"comment\">可以使用：</span></span><br><span class=\"line\"><span class=\"comment\">mocha --recursive 即可以递归执行test目录下所有文件，包含深度嵌套的。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。\"><a href=\"#显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。\" class=\"headerlink\" title=\"显示报告结果(--reporter参数用来指定测试报告的格式，默认是spec格式。)\"></a>显示报告结果(<code>--reporter</code>参数用来指定测试报告的格式，默认是<code>spec</code>格式。)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">$ mocha --reporter spec</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--reporters</code>参数可以显示所有内置的报告格式。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --reporters</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\"><a href=\"#生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\" class=\"headerlink\" title=\"生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\"></a>生成报告结果（使用<a href=\"http://adamgruber.github.io/mochawesome/\" target=\"_blank\" rel=\"noopener\"><code>mochawesome</code></a>模块，可以生成漂亮的HTML格式的报告。）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev mochawesome</span><br><span class=\"line\">$ ../node_modules/.bin/mocha --reporter mochawesome</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>mocha</code>命令使用了项目内安装的版本，而不是全局安装的版本，因为<code>mochawesome</code>模块是安装在项目内的。</p>\n<p>然后，测试结果报告就在<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo02/mochawesome-reports\" target=\"_blank\" rel=\"noopener\"><code>mochaawesome-reports</code></a>子目录生成。</p>\n<h2 id=\"配置文件mocha-opts\"><a href=\"#配置文件mocha-opts\" class=\"headerlink\" title=\"配置文件mocha.opts\"></a>配置文件mocha.opts</h2><p>Mocha允许在<code>test</code>目录下面，放置配置文件<code>mocha.opts</code>，把命令行参数写在里面。请先进入<a href=\"https://github.com/ruanyf/mocha-demos/tree/master/demo03\" target=\"_blank\" rel=\"noopener\"><code>demo03</code></a>目录，运行下面的命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --recursive --reporter tap</span><br></pre></td></tr></table></figure>\n<p>上面这个命令有两个参数<code>--recursive</code>、<code>--reporter tap</code>。</p>\n<p>然后，把这两个参数写入<code>test</code>目录下的<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo03/test/mocha.opts\" target=\"_blank\" rel=\"noopener\"><code>mocha.opts</code></a>文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter tap</span><br><span class=\"line\">--recursive</span><br></pre></td></tr></table></figure>\n<p>然后，执行<code>mocha</code>就能取得与第一行命令一样的效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br></pre></td></tr></table></figure>\n<p>如果测试用例不是存放在test子目录，可以在<code>mocha.opts</code>写入以下内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">otherDirTests</span><br><span class=\"line\">--recursive</span><br></pre></td></tr></table></figure>\n<p>上面代码指定运行<code>otherDirTests</code>目录及其子目录之中的测试脚本。</p>\n<h2 id=\"ES6测试\"><a href=\"#ES6测试\" class=\"headerlink\" title=\"ES6测试\"></a>ES6测试</h2><p>如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入<a href=\"https://github.com/ruanyf/mocha-demos/tree/master/demo04\" target=\"_blank\" rel=\"noopener\"><code>demo04</code></a>目录，打开<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo04/test/add.test.js\" target=\"_blank\" rel=\"noopener\"><code>test/add.test.js</code></a>文件，可以看到这个测试用例是用ES6写的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> add <span class=\"keyword\">from</span> <span class=\"string\">'../src/add.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> chai <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> expect = chai.expect;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'加法函数的测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'1 加 1 应该等于 2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(add(<span class=\"number\">1</span>, <span class=\"number\">1</span>)).to.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>ES6转码，需要安装Babel。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install babel-core babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure>\n<p>然后，在项目目录下面，新建一个<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo04/.babelrc\" target=\"_blank\" rel=\"noopener\"><code>.babelrc</code></a>配置文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [ <span class=\"string\">\"es2015\"</span> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，使用<code>--compilers</code>参数指定测试脚本的转码器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>--compilers</code>参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用<code>babel-core/register</code>模块，处理一下<code>.js</code>文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。</p>\n<blockquote>\n<p>可以结合mocha.opts使用，或者在package.json中自定义命令去实现。</p>\n</blockquote>\n<h3 id=\"package-json（使用方式：npm-run-test）\"><a href=\"#package-json（使用方式：npm-run-test）\" class=\"headerlink\" title=\"package.json（使用方式：npm run test）\"></a>package.json（使用方式：<code>npm run test</code>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --recursive --compilers js:babel-core/register\"</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --recursive --require babel-core/register\"</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mocha-opts（使用方式：-mocha）\"><a href=\"#Mocha-opts（使用方式：-mocha）\" class=\"headerlink\" title=\"Mocha.opts（使用方式： mocha）\"></a>Mocha.opts（使用方式： <code>mocha</code>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter spec</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">--compilers js:babel-core/register</span><br></pre></td></tr></table></figure>\n<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter spec</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">--<span class=\"built_in\">require</span> babel-core/register</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mocha-chai-单元测试\"><a href=\"#mocha-chai-单元测试\" class=\"headerlink\" title=\"mocha + chai 单元测试\"></a>mocha + chai 单元测试</h1><p>参考链接： <a href=\"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\" target=\"_blank\" rel=\"noopener\">测试框架 Mocha 实例教程</a><br>断言库使用 <a href=\"https://www.chaijs.com/api/bdd/\" target=\"_blank\" rel=\"noopener\">chai</a></p>\n<blockquote>\n<p>主要为个人的练习记录存放，下面会展示一些或者重点易错点。</p>\n</blockquote>\n<h2 id=\"通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。\"><a href=\"#通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。\" class=\"headerlink\" title=\"通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。\"></a>通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha spec/&#123;my,awesome&#125;.js</span><br><span class=\"line\">$ mocha test/unit<span class=\"comment\">/*.js</span></span><br><span class=\"line\"><span class=\"comment\">$ mocha 'test/**/</span>*.@(js|jsx)<span class=\"string\">' // 也支持node的通配符，使用字符串包裹起来即可</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">提示： 如果只有一个文件的时候，也需要加上, 比如 mocha test/&#123;cf,&#125;.js 否则会报错。</span></span><br><span class=\"line\"><span class=\"string\">Warning: Could not find any test files matching pattern: test/&#123;cf&#125;.js</span></span><br><span class=\"line\"><span class=\"string\">No test files found</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"递归执行（mocha默认会执行当前目录下的test目录下的文件）\"><a href=\"#递归执行（mocha默认会执行当前目录下的test目录下的文件）\" class=\"headerlink\" title=\"递归执行（mocha默认会执行当前目录下的test目录下的文件）\"></a>递归执行（mocha默认会执行当前目录下的test目录下的文件）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果想执行内嵌的其他文件，比如：</span><br><span class=\"line\">test/cf<span class=\"comment\">/**.js;</span></span><br><span class=\"line\"><span class=\"comment\">test/gg/tt/**.js;</span></span><br><span class=\"line\"><span class=\"comment\">这种默认使用mocha命令是不会执行的，因为他们不在test目录下。</span></span><br><span class=\"line\"><span class=\"comment\">可以使用：</span></span><br><span class=\"line\"><span class=\"comment\">mocha --recursive 即可以递归执行test目录下所有文件，包含深度嵌套的。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。\"><a href=\"#显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。\" class=\"headerlink\" title=\"显示报告结果(--reporter参数用来指定测试报告的格式，默认是spec格式。)\"></a>显示报告结果(<code>--reporter</code>参数用来指定测试报告的格式，默认是<code>spec</code>格式。)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">$ mocha --reporter spec</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--reporters</code>参数可以显示所有内置的报告格式。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --reporters</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\"><a href=\"#生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\" class=\"headerlink\" title=\"生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\"></a>生成报告结果（使用<a href=\"http://adamgruber.github.io/mochawesome/\" target=\"_blank\" rel=\"noopener\"><code>mochawesome</code></a>模块，可以生成漂亮的HTML格式的报告。）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev mochawesome</span><br><span class=\"line\">$ ../node_modules/.bin/mocha --reporter mochawesome</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>mocha</code>命令使用了项目内安装的版本，而不是全局安装的版本，因为<code>mochawesome</code>模块是安装在项目内的。</p>\n<p>然后，测试结果报告就在<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo02/mochawesome-reports\" target=\"_blank\" rel=\"noopener\"><code>mochaawesome-reports</code></a>子目录生成。</p>\n<h2 id=\"配置文件mocha-opts\"><a href=\"#配置文件mocha-opts\" class=\"headerlink\" title=\"配置文件mocha.opts\"></a>配置文件mocha.opts</h2><p>Mocha允许在<code>test</code>目录下面，放置配置文件<code>mocha.opts</code>，把命令行参数写在里面。请先进入<a href=\"https://github.com/ruanyf/mocha-demos/tree/master/demo03\" target=\"_blank\" rel=\"noopener\"><code>demo03</code></a>目录，运行下面的命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --recursive --reporter tap</span><br></pre></td></tr></table></figure>\n<p>上面这个命令有两个参数<code>--recursive</code>、<code>--reporter tap</code>。</p>\n<p>然后，把这两个参数写入<code>test</code>目录下的<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo03/test/mocha.opts\" target=\"_blank\" rel=\"noopener\"><code>mocha.opts</code></a>文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter tap</span><br><span class=\"line\">--recursive</span><br></pre></td></tr></table></figure>\n<p>然后，执行<code>mocha</code>就能取得与第一行命令一样的效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br></pre></td></tr></table></figure>\n<p>如果测试用例不是存放在test子目录，可以在<code>mocha.opts</code>写入以下内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">otherDirTests</span><br><span class=\"line\">--recursive</span><br></pre></td></tr></table></figure>\n<p>上面代码指定运行<code>otherDirTests</code>目录及其子目录之中的测试脚本。</p>\n<h2 id=\"ES6测试\"><a href=\"#ES6测试\" class=\"headerlink\" title=\"ES6测试\"></a>ES6测试</h2><p>如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入<a href=\"https://github.com/ruanyf/mocha-demos/tree/master/demo04\" target=\"_blank\" rel=\"noopener\"><code>demo04</code></a>目录，打开<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo04/test/add.test.js\" target=\"_blank\" rel=\"noopener\"><code>test/add.test.js</code></a>文件，可以看到这个测试用例是用ES6写的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> add <span class=\"keyword\">from</span> <span class=\"string\">'../src/add.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> chai <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> expect = chai.expect;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'加法函数的测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'1 加 1 应该等于 2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(add(<span class=\"number\">1</span>, <span class=\"number\">1</span>)).to.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>ES6转码，需要安装Babel。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install babel-core babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure>\n<p>然后，在项目目录下面，新建一个<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo04/.babelrc\" target=\"_blank\" rel=\"noopener\"><code>.babelrc</code></a>配置文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [ <span class=\"string\">\"es2015\"</span> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，使用<code>--compilers</code>参数指定测试脚本的转码器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>--compilers</code>参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用<code>babel-core/register</code>模块，处理一下<code>.js</code>文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。</p>\n<blockquote>\n<p>可以结合mocha.opts使用，或者在package.json中自定义命令去实现。</p>\n</blockquote>\n<h3 id=\"package-json（使用方式：npm-run-test）\"><a href=\"#package-json（使用方式：npm-run-test）\" class=\"headerlink\" title=\"package.json（使用方式：npm run test）\"></a>package.json（使用方式：<code>npm run test</code>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --recursive --compilers js:babel-core/register\"</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --recursive --require babel-core/register\"</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mocha-opts（使用方式：-mocha）\"><a href=\"#Mocha-opts（使用方式：-mocha）\" class=\"headerlink\" title=\"Mocha.opts（使用方式： mocha）\"></a>Mocha.opts（使用方式： <code>mocha</code>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter spec</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">--compilers js:babel-core/register</span><br></pre></td></tr></table></figure>\n<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter spec</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">--<span class=\"built_in\">require</span> babel-core/register</span><br></pre></td></tr></table></figure>"},{"title":"如何给无网的服务器linux环境安装nodeJs","comments":0,"_content":"1. 首先我们本地需要有一个已经下载好的node文件\n\n   * [下载地址1（英文）]: (https://nodejs.org/en/download/)\n\n   * [下载地址2（中文）]: (http://nodejs.cn/download/)\n\n     >  备注： 首先通过ssh连接我们要进入的linux系统中，输入密码连接成功后，通过  uname -a  命令查看到Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图：\n\n   \t![Image1 text](no-network-linux-install-nodeJs/img1.jpg)\n\n   > 所以我们需要下载一个64位linux二进制包。\n\n   ![Image2 text](no-network-linux-install-nodeJs/img2.jpg)\n\n2. 将下载下来的文件上传服务器并解压，查看版本正常后，进行创建全局软连接\n\n   * 将文件上传服务器，通过scp命令，如图：\n\n     ![Image3 text](no-network-linux-install-nodeJs/img3.jpg)\n\n   * 然后再次通过ssh连接服务器后，在上面找到文件进行解压，正常流程如图：\n\n     > 备注：正常流程，linux支持xz解压，将文件解压为tar类型，再通过tar -xvf 解决即可。\n     >\n     > 如果你的linux不支持xz解压，请在自己本地[下载配置xz](https://www.jianshu.com/p/6efadc7f86cf)并且解压为tar文件，再通过scp命令传到服务器上，再通过tar -xvf 解决即可。\n     >\n     >\n\n     ![Image4 text](no-network-linux-install-nodeJs/img4.jpg)\n\n\n   * 最后一步，我们需要进入我所在tar解压后的文件夹下/bin\n\n     > 备注：进入到文件夹/bin下后，ls一下，会发现有node 和npm的存在，我们执行了node -v, npm -v；发现提示command not fount 命令不存在，因为我们没有创建全局软连接。\n     >\n     > * ln -s /dcf/node-v10.14.2-linux-x64/bin/node /usr/local/bin/\n     > * ln -s /dcf/node-v10.14.2-linux-x64/bin/npm /usr/local/bin/\n     >\n     > 通过ln -s 创建全局软连接之后，就可以正常使用。\n     >\n     > 注意：一定要用绝对路径，不要用相对路径去配置软连接，那样会无效！\n\n     ![Image5 text](no-network-linux-install-nodeJs/img5.jpg)\n\n3. 全局软连接建立完成后，执行node -v； npm -v；发现有版本后，就说明安装成了。","source":"_posts/no-network-linux-install-nodeJs.md","raw":"---\ntitle: 如何给无网的服务器linux环境安装nodeJs\ntags:\n- linux\n- node\ncategories: \n- linux\n- node\ncomments: false\n---\n1. 首先我们本地需要有一个已经下载好的node文件\n\n   * [下载地址1（英文）]: (https://nodejs.org/en/download/)\n\n   * [下载地址2（中文）]: (http://nodejs.cn/download/)\n\n     >  备注： 首先通过ssh连接我们要进入的linux系统中，输入密码连接成功后，通过  uname -a  命令查看到Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图：\n\n   \t![Image1 text](no-network-linux-install-nodeJs/img1.jpg)\n\n   > 所以我们需要下载一个64位linux二进制包。\n\n   ![Image2 text](no-network-linux-install-nodeJs/img2.jpg)\n\n2. 将下载下来的文件上传服务器并解压，查看版本正常后，进行创建全局软连接\n\n   * 将文件上传服务器，通过scp命令，如图：\n\n     ![Image3 text](no-network-linux-install-nodeJs/img3.jpg)\n\n   * 然后再次通过ssh连接服务器后，在上面找到文件进行解压，正常流程如图：\n\n     > 备注：正常流程，linux支持xz解压，将文件解压为tar类型，再通过tar -xvf 解决即可。\n     >\n     > 如果你的linux不支持xz解压，请在自己本地[下载配置xz](https://www.jianshu.com/p/6efadc7f86cf)并且解压为tar文件，再通过scp命令传到服务器上，再通过tar -xvf 解决即可。\n     >\n     >\n\n     ![Image4 text](no-network-linux-install-nodeJs/img4.jpg)\n\n\n   * 最后一步，我们需要进入我所在tar解压后的文件夹下/bin\n\n     > 备注：进入到文件夹/bin下后，ls一下，会发现有node 和npm的存在，我们执行了node -v, npm -v；发现提示command not fount 命令不存在，因为我们没有创建全局软连接。\n     >\n     > * ln -s /dcf/node-v10.14.2-linux-x64/bin/node /usr/local/bin/\n     > * ln -s /dcf/node-v10.14.2-linux-x64/bin/npm /usr/local/bin/\n     >\n     > 通过ln -s 创建全局软连接之后，就可以正常使用。\n     >\n     > 注意：一定要用绝对路径，不要用相对路径去配置软连接，那样会无效！\n\n     ![Image5 text](no-network-linux-install-nodeJs/img5.jpg)\n\n3. 全局软连接建立完成后，执行node -v； npm -v；发现有版本后，就说明安装成了。","slug":"no-network-linux-install-nodeJs","published":1,"date":"2021-01-15T02:39:36.494Z","updated":"2021-01-15T02:39:36.494Z","layout":"post","photos":[],"link":"","_id":"ckmbs3qbm000mh0nhhlan7m5z","content":"<ol>\n<li><p>首先我们本地需要有一个已经下载好的node文件</p>\n<ul>\n<li><p>[下载地址1（英文）]: (<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a>)</p>\n</li>\n<li><p>[下载地址2（中文）]: (<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/download/</a>)</p>\n<blockquote>\n<p> 备注： 首先通过ssh连接我们要进入的linux系统中，输入密码连接成功后，通过  uname -a  命令查看到Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图：</p>\n</blockquote>\n<p>  <img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img1.jpg\" alt=\"Image1 text\"></p>\n</li>\n</ul>\n<blockquote>\n<p>所以我们需要下载一个64位linux二进制包。</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img2.jpg\" alt=\"Image2 text\"></p>\n</li>\n<li><p>将下载下来的文件上传服务器并解压，查看版本正常后，进行创建全局软连接</p>\n<ul>\n<li><p>将文件上传服务器，通过scp命令，如图：</p>\n<p><img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img3.jpg\" alt=\"Image3 text\"></p>\n</li>\n<li><p>然后再次通过ssh连接服务器后，在上面找到文件进行解压，正常流程如图：</p>\n<blockquote>\n<p>备注：正常流程，linux支持xz解压，将文件解压为tar类型，再通过tar -xvf 解决即可。</p>\n<p>如果你的linux不支持xz解压，请在自己本地<a href=\"https://www.jianshu.com/p/6efadc7f86cf\" target=\"_blank\" rel=\"noopener\">下载配置xz</a>并且解压为tar文件，再通过scp命令传到服务器上，再通过tar -xvf 解决即可。</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img4.jpg\" alt=\"Image4 text\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>最后一步，我们需要进入我所在tar解压后的文件夹下/bin</p>\n<blockquote>\n<p>备注：进入到文件夹/bin下后，ls一下，会发现有node 和npm的存在，我们执行了node -v, npm -v；发现提示command not fount 命令不存在，因为我们没有创建全局软连接。</p>\n<ul>\n<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/node /usr/local/bin/</li>\n<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/npm /usr/local/bin/</li>\n</ul>\n<p>通过ln -s 创建全局软连接之后，就可以正常使用。</p>\n<p>注意：一定要用绝对路径，不要用相对路径去配置软连接，那样会无效！</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img5.jpg\" alt=\"Image5 text\"></p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>全局软连接建立完成后，执行node -v； npm -v；发现有版本后，就说明安装成了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>首先我们本地需要有一个已经下载好的node文件</p>\n<ul>\n<li><p>[下载地址1（英文）]: (<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a>)</p>\n</li>\n<li><p>[下载地址2（中文）]: (<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/download/</a>)</p>\n<blockquote>\n<p> 备注： 首先通过ssh连接我们要进入的linux系统中，输入密码连接成功后，通过  uname -a  命令查看到Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图：</p>\n</blockquote>\n<p>  <img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img1.jpg\" alt=\"Image1 text\"></p>\n</li>\n</ul>\n<blockquote>\n<p>所以我们需要下载一个64位linux二进制包。</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img2.jpg\" alt=\"Image2 text\"></p>\n</li>\n<li><p>将下载下来的文件上传服务器并解压，查看版本正常后，进行创建全局软连接</p>\n<ul>\n<li><p>将文件上传服务器，通过scp命令，如图：</p>\n<p><img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img3.jpg\" alt=\"Image3 text\"></p>\n</li>\n<li><p>然后再次通过ssh连接服务器后，在上面找到文件进行解压，正常流程如图：</p>\n<blockquote>\n<p>备注：正常流程，linux支持xz解压，将文件解压为tar类型，再通过tar -xvf 解决即可。</p>\n<p>如果你的linux不支持xz解压，请在自己本地<a href=\"https://www.jianshu.com/p/6efadc7f86cf\" target=\"_blank\" rel=\"noopener\">下载配置xz</a>并且解压为tar文件，再通过scp命令传到服务器上，再通过tar -xvf 解决即可。</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img4.jpg\" alt=\"Image4 text\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>最后一步，我们需要进入我所在tar解压后的文件夹下/bin</p>\n<blockquote>\n<p>备注：进入到文件夹/bin下后，ls一下，会发现有node 和npm的存在，我们执行了node -v, npm -v；发现提示command not fount 命令不存在，因为我们没有创建全局软连接。</p>\n<ul>\n<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/node /usr/local/bin/</li>\n<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/npm /usr/local/bin/</li>\n</ul>\n<p>通过ln -s 创建全局软连接之后，就可以正常使用。</p>\n<p>注意：一定要用绝对路径，不要用相对路径去配置软连接，那样会无效！</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/15/no-network-linux-install-nodeJs/img5.jpg\" alt=\"Image5 text\"></p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>全局软连接建立完成后，执行node -v； npm -v；发现有版本后，就说明安装成了。</li>\n</ol>\n"},{"title":"protractor","date":"2020-04-04T06:58:26.000Z","comments":0,"_content":"\n# protractor\n\n[Source Code](https://github.com/dangchaofeng/protractor)\n\n","source":"_posts/protractor.md","raw":"---\ntitle: protractor\ndate: 2020-04-04 14:58:26\ntags:\n- e2e\ncategories:\n- protractor\ncomments: false\n---\n\n# protractor\n\n[Source Code](https://github.com/dangchaofeng/protractor)\n\n","slug":"protractor","published":1,"updated":"2021-01-15T02:39:36.518Z","layout":"post","photos":[],"link":"","_id":"ckmbs3qbs000oh0nhaoxqy9pt","content":"<h1 id=\"protractor\"><a href=\"#protractor\" class=\"headerlink\" title=\"protractor\"></a>protractor</h1><p><a href=\"https://github.com/dangchaofeng/protractor\" target=\"_blank\" rel=\"noopener\">Source Code</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"protractor\"><a href=\"#protractor\" class=\"headerlink\" title=\"protractor\"></a>protractor</h1><p><a href=\"https://github.com/dangchaofeng/protractor\" target=\"_blank\" rel=\"noopener\">Source Code</a></p>\n"},{"title":"转载-实现标准Promise规范","date":"2019-01-02T11:27:30.000Z","comments":0,"_content":"\n![image text](http://www.hankill.com/wp-content/uploads/2018/08/WX20180803-103846.png)\n\n>原文：[BAT前端经典面试问题：史上最最最详细的手写Promise教程](https://juejin.im/post/5b2f02cd5188252b937548ab)\n\nes6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要：\n\n可以参照[promisesA+规范](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)\n\n# Promise 的声明\n\n首先呢，promise肯定是一个类，我们就用class来声明。\n\n由于`new Promise((resolve, reject)=>{})`，所以传入一个参数（函数），叫他executor，传入就执行。\nexecutor里面有两个参数，一个叫`resolve`（成功），一个叫`reject`（失败）。\n由于resolve和reject可执行，所以都是函数，我们用let声明。\n\n\n\n```js\nclass Promise{\n  // 构造器\n  constructor(executor){\n    // 成功\n    let resolve = () => { };\n    // 失败\n    let reject = () => { };\n    // 立即执行\n    executor(resolve, reject);\n  }\n}\n```\n\n## 解决基本状态\n\n#### Promise规定：\n\n- Promise存在三个状态（state）pending、fulfilled、rejected\n- pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）\n- 成功时，不可转为其他状态，且必须有一个不可改变的值（value）\n- 失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）\n- `new Promise((resolve, reject)=>{resolve(value)})` resolve为成功，接收参数value，状态改变为fulfilled，不可再次改变。\n- `new Promise((resolve, reject)=>{reject(reason)})` reject为失败，接收参数reason，状态改变为rejected，不可再次改变。\n- 若是executor函数报错 直接执行reject();\n\n于是乎，我们获得以下代码\n\n```js\nclass Promise{\n  constructor(executor){\n    // 初始化state为等待态\n    this.state = 'pending';\n    // 成功的值\n    this.value = undefined;\n    // 失败的原因\n    this.reason = undefined;\n    let resolve = value => {\n      // state改变,resolve调用就会失败\n      if (this.state === 'pending') {\n        // resolve调用后，state转化为成功态\n        this.state = 'fulfilled';\n        // 储存成功的值\n        this.value = value;\n      }\n    };\n    let reject = reason => {\n      // state改变,reject调用就会失败\n      if (this.state === 'pending') {\n        // reject调用后，state转化为失败态\n        this.state = 'rejected';\n        // 储存失败的原因\n        this.reason = reason;\n      }\n    };\n    // 如果executor执行报错，直接执行reject\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n}\n```\n\n## then方法\n\n#### Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因\n\n- 当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason\n- onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数\n\n```js\nclass Promise{\n  constructor(executor){...}\n  // then 方法 有两个参数onFulfilled onRejected\n  then(onFulfilled,onRejected) {\n    // 状态为fulfilled，执行onFulfilled，传入成功的值\n    if (this.state === 'fulfilled') {\n      onFulfilled(this.value);\n    };\n    // 状态为rejected，执行onRejected，传入失败的原因\n    if (this.state === 'rejected') {\n      onRejected(this.reason);\n    };\n  }\n}\n```\n\n## 解决异步实现\n\n**现在基本可以实现简单的同步代码，但是当resolve在setTomeout内执行，then时state还是pending等待状态 我们就需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们**\n类似于发布订阅，先将then里面的两个函数储存起来，由于一个promise可以有多个then，所以存在同一个数组内。\n\n\n```\n// 多个then的情况\nlet p = new Promise();\np.then();\np.then();\n```\n\n成功或者失败时，forEach调用它们\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    // 成功存放的数组\n    this.onResolvedCallbacks = [];\n    // 失败存放法数组\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        // 一旦resolve执行，调用成功数组的函数\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        // 一旦reject执行，调用失败数组的函数\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    if (this.state === 'fulfilled') {\n      onFulfilled(this.value);\n    };\n    if (this.state === 'rejected') {\n      onRejected(this.reason);\n    };\n    // 当状态state为pending时\n    if (this.state === 'pending') {\n      // onFulfilled传入到成功数组\n      this.onResolvedCallbacks.push(()=>{\n        onFulfilled(this.value);\n      })\n      // onRejected传入到失败数组\n      this.onRejectedCallbacks.push(()=>{\n        onRejected(this.reason);\n      })\n    }\n  }\n}\n```\n\n## 解决链式调用\n\n**我门常常用到new Promise().then().then(),这就是链式调用，用来解决回调地狱**\n1、为了达成链式，我们默认在第一个then里返回一个promise。[秘籍](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)规定了一种方法，就是在then里面返回一个新的promise,称为promise2：`promise2 = new Promise((resolve, reject)=>{})`\n\n- 将这个promise2返回的值传递到下一个then中\n- 如果返回一个普通的值，则将普通的值传递给下一个then中\n\n2、当我们在第一个then中`return`了一个参数（参数未知，需判断）。这个return出来的新的promise就是onFulfilled()或onRejected()的值\n规定onFulfilled()或onRejected()的值，即第一个then返回的值，叫做x，判断x的函数叫做resolvePromise\n\n- 首先，要看x是不是promise。\n- 如果是promise，则取它的结果，作为新的promise2成功的结果\n- 如果是普通值，直接作为promise2成功的结果\n- 所以要比较x和promise2\n- resolvePromise的参数有promise2（默认返回的promise）、x（我们自己`return`的对象）、resolve、reject\n- resolve和reject是promise2的\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    // 声明返回的promise2\n    let promise2 = new Promise((resolve, reject)=>{\n      if (this.state === 'fulfilled') {\n        let x = onFulfilled(this.value);\n        // resolvePromise函数，处理自己return的promise和默认的promise2的关系\n        resolvePromise(promise2, x, resolve, reject);\n      };\n      if (this.state === 'rejected') {\n        let x = onRejected(this.reason);\n        resolvePromise(promise2, x, resolve, reject);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(()=>{\n          let x = onFulfilled(this.value);\n          resolvePromise(promise2, x, resolve, reject);\n        })\n        this.onRejectedCallbacks.push(()=>{\n          let x = onRejected(this.reason);\n          resolvePromise(promise2, x, resolve, reject);\n        })\n      }\n    });\n    // 返回promise，完成链式\n    return promise2;\n  }\n}\n```\n\n## 完成resolvePromise函数\n\n规定了一段代码，让不同的promise代码互相套用，叫做resolvePromise\n\n- 如果 x === promise2，则是会造成循环引用，自己等待自己完成，则报“循环引用”错误\n\n```js\nlet p = new Promise(resolve => {\n  resolve(0);\n});\nvar p2 = p.then(data => {\n  // 循环引用，自己等待自己完成，一辈子完不成\n  return p2;\n})\n```\n\n1、判断x\n\n\n\n- **Otherwise, if x is an object or function,Let then be x.then**\n- x 不能是null\n- x 是普通值 直接resolve(x)\n- x 是对象或者函数（包括promise），`let then = x.then` 2、当x是对象或者函数（默认promise）\n- 声明了then\n- 如果取then报错，则走reject()\n- 如果then是个函数，则用call执行then，第一个参数是this，后面是成功的回调和失败的回调\n- 如果成功的回调还是pormise，就递归继续解析 3、成功和失败只能调用一个 所以设定一个called来防止多次调用\n\n```js\nfunction resolvePromise(promise2, x, resolve, reject){\n  // 循环引用报错\n  if(x === promise2){\n    // reject报错\n    return reject(new TypeError('Chaining cycle detected for promise'));\n  }\n  // 防止多次调用\n  let called;\n  // x不是null 且x是对象或者函数\n  if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n    try {\n      // A+规定，声明then = x的then方法\n      let then = x.then;\n      // 如果then是函数，就默认是promise了\n      if (typeof then === 'function') {\n        // 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调\n        then.call(x, y => {\n          // 成功和失败只能调用一个\n          if (called) return;\n          called = true;\n          // resolve的结果依旧是promise 那就继续解析\n          resolvePromise(promise2, y, resolve, reject);\n        }, err => {\n          // 成功和失败只能调用一个\n          if (called) return;\n          called = true;\n          reject(err);// 失败了就失败了\n        })\n      } else {\n        resolve(x); // 直接成功即可\n      }\n    } catch (e) {\n      // 也属于失败\n      if (called) return;\n      called = true;\n      // 取then出错了那就不要在继续执行了\n      reject(e);\n    }\n  } else {\n    resolve(x);\n  }\n}\n```\n\n## 解决其他问题\n\n1、规定onFulfilled,onRejected都是可选参数，如果他们不是函数，必须被忽略\n\n- onFulfilled返回一个普通的值，成功时直接等于 `value => value`\n- onRejected返回一个普通的值，失败时如果直接等于 value => value，则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误`reason => throw err` 2、[秘籍](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)规定onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题\n- 如果onFulfilled或onRejected报错，则直接返回reject()\n\n顺便附赠catch和resolve、reject、race、all方法\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    // onFulfilled如果不是函数，就忽略onFulfilled，直接返回value\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    // onRejected如果不是函数，就忽略onRejected，直接扔出错误\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.state === 'fulfilled') {\n        // 异步\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'rejected') {\n        // 异步\n        setTimeout(() => {\n          // 如果报错\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(() => {\n          // 异步\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0);\n        });\n        this.onRejectedCallbacks.push(() => {\n          // 异步\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0)\n        });\n      };\n    });\n    // 返回promise，完成链式\n    return promise2;\n  }\n}\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.state === 'fulfilled') {\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'rejected') {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0);\n        });\n        this.onRejectedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0)\n        });\n      };\n    });\n    return promise2;\n  }\n  catch(fn){\n    return this.then(null,fn);\n  }\n}\nfunction resolvePromise(promise2, x, resolve, reject){\n  if(x === promise2){\n    return reject(new TypeError('Chaining cycle detected for promise'));\n  }\n  let called;\n  if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n    try {\n      let then = x.then;\n      if (typeof then === 'function') {\n        then.call(x, y => {\n          if(called)return;\n          called = true;\n          resolvePromise(promise2, y, resolve, reject);\n        }, err => {\n          if(called)return;\n          called = true;\n          reject(err);\n        })\n      } else {\n        resolve(x);\n      }\n    } catch (e) {\n      if(called)return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    resolve(x);\n  }\n}\n//resolve方法\nPromise.resolve = function(val){\n  return new Promise((resolve,reject)=>{\n    resolve(val)\n  });\n}\n//reject方法\nPromise.reject = function(val){\n  return new Promise((resolve,reject)=>{\n    reject(val)\n  });\n}\n//race方法 \nPromise.race = function(promises) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < promises.length; i++) {\n            promises[i].then(resolve, reject)\n        };\n    })\n}\n//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回) 进行修订，processData添加resolve传参\nPromise.all = function(promises) {\n    let arr = [];\n    let i = 0;\n\n    function processData(index, data, resolve) {\n        arr[index] = data;\n        i++;\n        if (i == promises.length) {\n            resolve(arr);\n        };\n    };\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < promises.length; i++) {\n            promises[i].then(data => {\n                processData(i, data, resolve);\n            }, reject);\n        };\n    });\n}\n```\n\n## 如何验证我们的promise是否正确\n\n1、先在后面加上下述代码\n2、npm 有一个promises-aplus-tests插件 npm i promises-aplus-tests -g 可以全局安装 mac用户最前面加上sudo\n3、命令行 promises-aplus-tests [js文件名] 即可验证\n\n```js\n// 目前是通过他测试 他会测试一个对象\n// 语法糖\nPromise.defer = Promise.deferred = function () {\n  let dfd = {}\n  dfd.promise = new Promise((resolve,reject)=>{\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n}\nmodule.exports = Promise;\n//npm install promises-aplus-tests 用来测试自己的promise 符不符合promisesA+规范\n```","source":"_posts/promise.md","raw":"---\ntitle: 转载-实现标准Promise规范\ndate: 2019-01-02 19:27:30\ntags:\n- promise\n- javascript\ncategories:\n- promise\n- javascript\ncomments: false\n---\n\n![image text](http://www.hankill.com/wp-content/uploads/2018/08/WX20180803-103846.png)\n\n>原文：[BAT前端经典面试问题：史上最最最详细的手写Promise教程](https://juejin.im/post/5b2f02cd5188252b937548ab)\n\nes6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要：\n\n可以参照[promisesA+规范](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)\n\n# Promise 的声明\n\n首先呢，promise肯定是一个类，我们就用class来声明。\n\n由于`new Promise((resolve, reject)=>{})`，所以传入一个参数（函数），叫他executor，传入就执行。\nexecutor里面有两个参数，一个叫`resolve`（成功），一个叫`reject`（失败）。\n由于resolve和reject可执行，所以都是函数，我们用let声明。\n\n\n\n```js\nclass Promise{\n  // 构造器\n  constructor(executor){\n    // 成功\n    let resolve = () => { };\n    // 失败\n    let reject = () => { };\n    // 立即执行\n    executor(resolve, reject);\n  }\n}\n```\n\n## 解决基本状态\n\n#### Promise规定：\n\n- Promise存在三个状态（state）pending、fulfilled、rejected\n- pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）\n- 成功时，不可转为其他状态，且必须有一个不可改变的值（value）\n- 失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）\n- `new Promise((resolve, reject)=>{resolve(value)})` resolve为成功，接收参数value，状态改变为fulfilled，不可再次改变。\n- `new Promise((resolve, reject)=>{reject(reason)})` reject为失败，接收参数reason，状态改变为rejected，不可再次改变。\n- 若是executor函数报错 直接执行reject();\n\n于是乎，我们获得以下代码\n\n```js\nclass Promise{\n  constructor(executor){\n    // 初始化state为等待态\n    this.state = 'pending';\n    // 成功的值\n    this.value = undefined;\n    // 失败的原因\n    this.reason = undefined;\n    let resolve = value => {\n      // state改变,resolve调用就会失败\n      if (this.state === 'pending') {\n        // resolve调用后，state转化为成功态\n        this.state = 'fulfilled';\n        // 储存成功的值\n        this.value = value;\n      }\n    };\n    let reject = reason => {\n      // state改变,reject调用就会失败\n      if (this.state === 'pending') {\n        // reject调用后，state转化为失败态\n        this.state = 'rejected';\n        // 储存失败的原因\n        this.reason = reason;\n      }\n    };\n    // 如果executor执行报错，直接执行reject\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n}\n```\n\n## then方法\n\n#### Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因\n\n- 当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason\n- onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数\n\n```js\nclass Promise{\n  constructor(executor){...}\n  // then 方法 有两个参数onFulfilled onRejected\n  then(onFulfilled,onRejected) {\n    // 状态为fulfilled，执行onFulfilled，传入成功的值\n    if (this.state === 'fulfilled') {\n      onFulfilled(this.value);\n    };\n    // 状态为rejected，执行onRejected，传入失败的原因\n    if (this.state === 'rejected') {\n      onRejected(this.reason);\n    };\n  }\n}\n```\n\n## 解决异步实现\n\n**现在基本可以实现简单的同步代码，但是当resolve在setTomeout内执行，then时state还是pending等待状态 我们就需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们**\n类似于发布订阅，先将then里面的两个函数储存起来，由于一个promise可以有多个then，所以存在同一个数组内。\n\n\n```\n// 多个then的情况\nlet p = new Promise();\np.then();\np.then();\n```\n\n成功或者失败时，forEach调用它们\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    // 成功存放的数组\n    this.onResolvedCallbacks = [];\n    // 失败存放法数组\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        // 一旦resolve执行，调用成功数组的函数\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        // 一旦reject执行，调用失败数组的函数\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    if (this.state === 'fulfilled') {\n      onFulfilled(this.value);\n    };\n    if (this.state === 'rejected') {\n      onRejected(this.reason);\n    };\n    // 当状态state为pending时\n    if (this.state === 'pending') {\n      // onFulfilled传入到成功数组\n      this.onResolvedCallbacks.push(()=>{\n        onFulfilled(this.value);\n      })\n      // onRejected传入到失败数组\n      this.onRejectedCallbacks.push(()=>{\n        onRejected(this.reason);\n      })\n    }\n  }\n}\n```\n\n## 解决链式调用\n\n**我门常常用到new Promise().then().then(),这就是链式调用，用来解决回调地狱**\n1、为了达成链式，我们默认在第一个then里返回一个promise。[秘籍](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)规定了一种方法，就是在then里面返回一个新的promise,称为promise2：`promise2 = new Promise((resolve, reject)=>{})`\n\n- 将这个promise2返回的值传递到下一个then中\n- 如果返回一个普通的值，则将普通的值传递给下一个then中\n\n2、当我们在第一个then中`return`了一个参数（参数未知，需判断）。这个return出来的新的promise就是onFulfilled()或onRejected()的值\n规定onFulfilled()或onRejected()的值，即第一个then返回的值，叫做x，判断x的函数叫做resolvePromise\n\n- 首先，要看x是不是promise。\n- 如果是promise，则取它的结果，作为新的promise2成功的结果\n- 如果是普通值，直接作为promise2成功的结果\n- 所以要比较x和promise2\n- resolvePromise的参数有promise2（默认返回的promise）、x（我们自己`return`的对象）、resolve、reject\n- resolve和reject是promise2的\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    // 声明返回的promise2\n    let promise2 = new Promise((resolve, reject)=>{\n      if (this.state === 'fulfilled') {\n        let x = onFulfilled(this.value);\n        // resolvePromise函数，处理自己return的promise和默认的promise2的关系\n        resolvePromise(promise2, x, resolve, reject);\n      };\n      if (this.state === 'rejected') {\n        let x = onRejected(this.reason);\n        resolvePromise(promise2, x, resolve, reject);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(()=>{\n          let x = onFulfilled(this.value);\n          resolvePromise(promise2, x, resolve, reject);\n        })\n        this.onRejectedCallbacks.push(()=>{\n          let x = onRejected(this.reason);\n          resolvePromise(promise2, x, resolve, reject);\n        })\n      }\n    });\n    // 返回promise，完成链式\n    return promise2;\n  }\n}\n```\n\n## 完成resolvePromise函数\n\n规定了一段代码，让不同的promise代码互相套用，叫做resolvePromise\n\n- 如果 x === promise2，则是会造成循环引用，自己等待自己完成，则报“循环引用”错误\n\n```js\nlet p = new Promise(resolve => {\n  resolve(0);\n});\nvar p2 = p.then(data => {\n  // 循环引用，自己等待自己完成，一辈子完不成\n  return p2;\n})\n```\n\n1、判断x\n\n\n\n- **Otherwise, if x is an object or function,Let then be x.then**\n- x 不能是null\n- x 是普通值 直接resolve(x)\n- x 是对象或者函数（包括promise），`let then = x.then` 2、当x是对象或者函数（默认promise）\n- 声明了then\n- 如果取then报错，则走reject()\n- 如果then是个函数，则用call执行then，第一个参数是this，后面是成功的回调和失败的回调\n- 如果成功的回调还是pormise，就递归继续解析 3、成功和失败只能调用一个 所以设定一个called来防止多次调用\n\n```js\nfunction resolvePromise(promise2, x, resolve, reject){\n  // 循环引用报错\n  if(x === promise2){\n    // reject报错\n    return reject(new TypeError('Chaining cycle detected for promise'));\n  }\n  // 防止多次调用\n  let called;\n  // x不是null 且x是对象或者函数\n  if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n    try {\n      // A+规定，声明then = x的then方法\n      let then = x.then;\n      // 如果then是函数，就默认是promise了\n      if (typeof then === 'function') {\n        // 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调\n        then.call(x, y => {\n          // 成功和失败只能调用一个\n          if (called) return;\n          called = true;\n          // resolve的结果依旧是promise 那就继续解析\n          resolvePromise(promise2, y, resolve, reject);\n        }, err => {\n          // 成功和失败只能调用一个\n          if (called) return;\n          called = true;\n          reject(err);// 失败了就失败了\n        })\n      } else {\n        resolve(x); // 直接成功即可\n      }\n    } catch (e) {\n      // 也属于失败\n      if (called) return;\n      called = true;\n      // 取then出错了那就不要在继续执行了\n      reject(e);\n    }\n  } else {\n    resolve(x);\n  }\n}\n```\n\n## 解决其他问题\n\n1、规定onFulfilled,onRejected都是可选参数，如果他们不是函数，必须被忽略\n\n- onFulfilled返回一个普通的值，成功时直接等于 `value => value`\n- onRejected返回一个普通的值，失败时如果直接等于 value => value，则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误`reason => throw err` 2、[秘籍](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)规定onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题\n- 如果onFulfilled或onRejected报错，则直接返回reject()\n\n顺便附赠catch和resolve、reject、race、all方法\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    // onFulfilled如果不是函数，就忽略onFulfilled，直接返回value\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    // onRejected如果不是函数，就忽略onRejected，直接扔出错误\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.state === 'fulfilled') {\n        // 异步\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'rejected') {\n        // 异步\n        setTimeout(() => {\n          // 如果报错\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(() => {\n          // 异步\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0);\n        });\n        this.onRejectedCallbacks.push(() => {\n          // 异步\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0)\n        });\n      };\n    });\n    // 返回promise，完成链式\n    return promise2;\n  }\n}\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.state === 'fulfilled') {\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'rejected') {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0);\n        });\n        this.onRejectedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0)\n        });\n      };\n    });\n    return promise2;\n  }\n  catch(fn){\n    return this.then(null,fn);\n  }\n}\nfunction resolvePromise(promise2, x, resolve, reject){\n  if(x === promise2){\n    return reject(new TypeError('Chaining cycle detected for promise'));\n  }\n  let called;\n  if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n    try {\n      let then = x.then;\n      if (typeof then === 'function') {\n        then.call(x, y => {\n          if(called)return;\n          called = true;\n          resolvePromise(promise2, y, resolve, reject);\n        }, err => {\n          if(called)return;\n          called = true;\n          reject(err);\n        })\n      } else {\n        resolve(x);\n      }\n    } catch (e) {\n      if(called)return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    resolve(x);\n  }\n}\n//resolve方法\nPromise.resolve = function(val){\n  return new Promise((resolve,reject)=>{\n    resolve(val)\n  });\n}\n//reject方法\nPromise.reject = function(val){\n  return new Promise((resolve,reject)=>{\n    reject(val)\n  });\n}\n//race方法 \nPromise.race = function(promises) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < promises.length; i++) {\n            promises[i].then(resolve, reject)\n        };\n    })\n}\n//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回) 进行修订，processData添加resolve传参\nPromise.all = function(promises) {\n    let arr = [];\n    let i = 0;\n\n    function processData(index, data, resolve) {\n        arr[index] = data;\n        i++;\n        if (i == promises.length) {\n            resolve(arr);\n        };\n    };\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < promises.length; i++) {\n            promises[i].then(data => {\n                processData(i, data, resolve);\n            }, reject);\n        };\n    });\n}\n```\n\n## 如何验证我们的promise是否正确\n\n1、先在后面加上下述代码\n2、npm 有一个promises-aplus-tests插件 npm i promises-aplus-tests -g 可以全局安装 mac用户最前面加上sudo\n3、命令行 promises-aplus-tests [js文件名] 即可验证\n\n```js\n// 目前是通过他测试 他会测试一个对象\n// 语法糖\nPromise.defer = Promise.deferred = function () {\n  let dfd = {}\n  dfd.promise = new Promise((resolve,reject)=>{\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n}\nmodule.exports = Promise;\n//npm install promises-aplus-tests 用来测试自己的promise 符不符合promisesA+规范\n```","slug":"promise","published":1,"updated":"2021-01-15T02:39:36.516Z","layout":"post","photos":[],"link":"","_id":"ckmbs3qby000rh0nhkzdzkoch","content":"<p><img src=\"http://www.hankill.com/wp-content/uploads/2018/08/WX20180803-103846.png\" alt=\"image text\"></p>\n<blockquote>\n<p>原文：<a href=\"https://juejin.im/post/5b2f02cd5188252b937548ab\" target=\"_blank\" rel=\"noopener\">BAT前端经典面试问题：史上最最最详细的手写Promise教程</a></p>\n</blockquote>\n<p>es6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要：</p>\n<p>可以参照<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">promisesA+规范</a></p>\n<h1 id=\"Promise-的声明\"><a href=\"#Promise-的声明\" class=\"headerlink\" title=\"Promise 的声明\"></a>Promise 的声明</h1><p>首先呢，promise肯定是一个类，我们就用class来声明。</p>\n<p>由于<code>new Promise((resolve, reject)=&gt;{})</code>，所以传入一个参数（函数），叫他executor，传入就执行。<br>executor里面有两个参数，一个叫<code>resolve</code>（成功），一个叫<code>reject</code>（失败）。<br>由于resolve和reject可执行，所以都是函数，我们用let声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 失败</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 立即执行</span></span><br><span class=\"line\">    executor(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决基本状态\"><a href=\"#解决基本状态\" class=\"headerlink\" title=\"解决基本状态\"></a>解决基本状态</h2><h4 id=\"Promise规定：\"><a href=\"#Promise规定：\" class=\"headerlink\" title=\"Promise规定：\"></a>Promise规定：</h4><ul>\n<li>Promise存在三个状态（state）pending、fulfilled、rejected</li>\n<li>pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）</li>\n<li>成功时，不可转为其他状态，且必须有一个不可改变的值（value）</li>\n<li>失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）</li>\n<li><code>new Promise((resolve, reject)=&gt;{resolve(value)})</code> resolve为成功，接收参数value，状态改变为fulfilled，不可再次改变。</li>\n<li><code>new Promise((resolve, reject)=&gt;{reject(reason)})</code> reject为失败，接收参数reason，状态改变为rejected，不可再次改变。</li>\n<li>若是executor函数报错 直接执行reject();</li>\n</ul>\n<p>于是乎，我们获得以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化state为等待态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成功的值</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 失败的原因</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state改变,resolve调用就会失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// resolve调用后，state转化为成功态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 储存成功的值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state改变,reject调用就会失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// reject调用后，state转化为失败态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 储存失败的原因</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 如果executor执行报错，直接执行reject</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h2><h4 id=\"Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因\"><a href=\"#Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因\" class=\"headerlink\" title=\"Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因\"></a>Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因</h4><ul>\n<li>当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason</li>\n<li>onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;...&#125;</span><br><span class=\"line\">  <span class=\"comment\">// then 方法 有两个参数onFulfilled onRejected</span></span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 状态为fulfilled，执行onFulfilled，传入成功的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 状态为rejected，执行onRejected，传入失败的原因</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决异步实现\"><a href=\"#解决异步实现\" class=\"headerlink\" title=\"解决异步实现\"></a>解决异步实现</h2><p><strong>现在基本可以实现简单的同步代码，但是当resolve在setTomeout内执行，then时state还是pending等待状态 我们就需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们</strong><br>类似于发布订阅，先将then里面的两个函数储存起来，由于一个promise可以有多个then，所以存在同一个数组内。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多个then的情况</span><br><span class=\"line\">let p = new Promise();</span><br><span class=\"line\">p.then();</span><br><span class=\"line\">p.then();</span><br></pre></td></tr></table></figure>\n<p>成功或者失败时，forEach调用它们</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成功存放的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"comment\">// 失败存放法数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"comment\">// 一旦resolve执行，调用成功数组的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"comment\">// 一旦reject执行，调用失败数组的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 当状态state为pending时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// onFulfilled传入到成功数组</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// onRejected传入到失败数组</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决链式调用\"><a href=\"#解决链式调用\" class=\"headerlink\" title=\"解决链式调用\"></a>解决链式调用</h2><p><strong>我门常常用到new Promise().then().then(),这就是链式调用，用来解决回调地狱</strong><br>1、为了达成链式，我们默认在第一个then里返回一个promise。<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">秘籍</a>规定了一种方法，就是在then里面返回一个新的promise,称为promise2：<code>promise2 = new Promise((resolve, reject)=&gt;{})</code></p>\n<ul>\n<li>将这个promise2返回的值传递到下一个then中</li>\n<li>如果返回一个普通的值，则将普通的值传递给下一个then中</li>\n</ul>\n<p>2、当我们在第一个then中<code>return</code>了一个参数（参数未知，需判断）。这个return出来的新的promise就是onFulfilled()或onRejected()的值<br>规定onFulfilled()或onRejected()的值，即第一个then返回的值，叫做x，判断x的函数叫做resolvePromise</p>\n<ul>\n<li>首先，要看x是不是promise。</li>\n<li>如果是promise，则取它的结果，作为新的promise2成功的结果</li>\n<li>如果是普通值，直接作为promise2成功的结果</li>\n<li>所以要比较x和promise2</li>\n<li>resolvePromise的参数有promise2（默认返回的promise）、x（我们自己<code>return</code>的对象）、resolve、reject</li>\n<li>resolve和reject是promise2的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明返回的promise2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">        <span class=\"comment\">// resolvePromise函数，处理自己return的promise和默认的promise2的关系</span></span><br><span class=\"line\">        resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">        resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise，完成链式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完成resolvePromise函数\"><a href=\"#完成resolvePromise函数\" class=\"headerlink\" title=\"完成resolvePromise函数\"></a>完成resolvePromise函数</h2><p>规定了一段代码，让不同的promise代码互相套用，叫做resolvePromise</p>\n<ul>\n<li>如果 x === promise2，则是会造成循环引用，自己等待自己完成，则报“循环引用”错误</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环引用，自己等待自己完成，一辈子完不成</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>1、判断x</p>\n<ul>\n<li><strong>Otherwise, if x is an object or function,Let then be x.then</strong></li>\n<li>x 不能是null</li>\n<li>x 是普通值 直接resolve(x)</li>\n<li>x 是对象或者函数（包括promise），<code>let then = x.then</code> 2、当x是对象或者函数（默认promise）</li>\n<li>声明了then</li>\n<li>如果取then报错，则走reject()</li>\n<li>如果then是个函数，则用call执行then，第一个参数是this，后面是成功的回调和失败的回调</li>\n<li>如果成功的回调还是pormise，就递归继续解析 3、成功和失败只能调用一个 所以设定一个called来防止多次调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环引用报错</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === promise2)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// reject报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 防止多次调用</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"comment\">// x不是null 且x是对象或者函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x != <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// A+规定，声明then = x的then方法</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"comment\">// 如果then是函数，就默认是promise了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调</span></span><br><span class=\"line\">        then.call(x, y =&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"comment\">// resolve的结果依旧是promise 那就继续解析</span></span><br><span class=\"line\">          resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">        &#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          reject(err);<span class=\"comment\">// 失败了就失败了</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(x); <span class=\"comment\">// 直接成功即可</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 也属于失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 取then出错了那就不要在继续执行了</span></span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决其他问题\"><a href=\"#解决其他问题\" class=\"headerlink\" title=\"解决其他问题\"></a>解决其他问题</h2><p>1、规定onFulfilled,onRejected都是可选参数，如果他们不是函数，必须被忽略</p>\n<ul>\n<li>onFulfilled返回一个普通的值，成功时直接等于 <code>value =&gt; value</code></li>\n<li>onRejected返回一个普通的值，失败时如果直接等于 value =&gt; value，则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误<code>reason =&gt; throw err</code> 2、<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">秘籍</a>规定onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题</li>\n<li>如果onFulfilled或onRejected报错，则直接返回reject()</li>\n</ul>\n<p>顺便附赠catch和resolve、reject、race、all方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// onFulfilled如果不是函数，就忽略onFulfilled，直接返回value</span></span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    <span class=\"comment\">// onRejected如果不是函数，就忽略onRejected，直接扔出错误</span></span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果报错</span></span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 异步</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 异步</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise，完成链式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(fn)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>,fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === promise2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x != <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        then.call(x, y =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">        &#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//resolve方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resolve(val)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//reject方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reject(val)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//race方法 </span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">            promises[i].then(resolve, reject)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回) 进行修订，processData添加resolve传参</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processData</span>(<span class=\"params\">index, data, resolve</span>) </span>&#123;</span><br><span class=\"line\">        arr[index] = data;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == promises.length) &#123;</span><br><span class=\"line\">            resolve(arr);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">            promises[i].then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">                processData(i, data, resolve);</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何验证我们的promise是否正确\"><a href=\"#如何验证我们的promise是否正确\" class=\"headerlink\" title=\"如何验证我们的promise是否正确\"></a>如何验证我们的promise是否正确</h2><p>1、先在后面加上下述代码<br>2、npm 有一个promises-aplus-tests插件 npm i promises-aplus-tests -g 可以全局安装 mac用户最前面加上sudo<br>3、命令行 promises-aplus-tests [js文件名] 即可验证</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目前是通过他测试 他会测试一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 语法糖</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.defer = <span class=\"built_in\">Promise</span>.deferred = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dfd = &#123;&#125;</span><br><span class=\"line\">  dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    dfd.resolve = resolve;</span><br><span class=\"line\">    dfd.reject = reject;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\"><span class=\"comment\">//npm install promises-aplus-tests 用来测试自己的promise 符不符合promisesA+规范</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://www.hankill.com/wp-content/uploads/2018/08/WX20180803-103846.png\" alt=\"image text\"></p>\n<blockquote>\n<p>原文：<a href=\"https://juejin.im/post/5b2f02cd5188252b937548ab\" target=\"_blank\" rel=\"noopener\">BAT前端经典面试问题：史上最最最详细的手写Promise教程</a></p>\n</blockquote>\n<p>es6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要：</p>\n<p>可以参照<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">promisesA+规范</a></p>\n<h1 id=\"Promise-的声明\"><a href=\"#Promise-的声明\" class=\"headerlink\" title=\"Promise 的声明\"></a>Promise 的声明</h1><p>首先呢，promise肯定是一个类，我们就用class来声明。</p>\n<p>由于<code>new Promise((resolve, reject)=&gt;{})</code>，所以传入一个参数（函数），叫他executor，传入就执行。<br>executor里面有两个参数，一个叫<code>resolve</code>（成功），一个叫<code>reject</code>（失败）。<br>由于resolve和reject可执行，所以都是函数，我们用let声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 失败</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 立即执行</span></span><br><span class=\"line\">    executor(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决基本状态\"><a href=\"#解决基本状态\" class=\"headerlink\" title=\"解决基本状态\"></a>解决基本状态</h2><h4 id=\"Promise规定：\"><a href=\"#Promise规定：\" class=\"headerlink\" title=\"Promise规定：\"></a>Promise规定：</h4><ul>\n<li>Promise存在三个状态（state）pending、fulfilled、rejected</li>\n<li>pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）</li>\n<li>成功时，不可转为其他状态，且必须有一个不可改变的值（value）</li>\n<li>失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）</li>\n<li><code>new Promise((resolve, reject)=&gt;{resolve(value)})</code> resolve为成功，接收参数value，状态改变为fulfilled，不可再次改变。</li>\n<li><code>new Promise((resolve, reject)=&gt;{reject(reason)})</code> reject为失败，接收参数reason，状态改变为rejected，不可再次改变。</li>\n<li>若是executor函数报错 直接执行reject();</li>\n</ul>\n<p>于是乎，我们获得以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化state为等待态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成功的值</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 失败的原因</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state改变,resolve调用就会失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// resolve调用后，state转化为成功态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 储存成功的值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state改变,reject调用就会失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// reject调用后，state转化为失败态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 储存失败的原因</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 如果executor执行报错，直接执行reject</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h2><h4 id=\"Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因\"><a href=\"#Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因\" class=\"headerlink\" title=\"Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因\"></a>Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因</h4><ul>\n<li>当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason</li>\n<li>onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;...&#125;</span><br><span class=\"line\">  <span class=\"comment\">// then 方法 有两个参数onFulfilled onRejected</span></span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 状态为fulfilled，执行onFulfilled，传入成功的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 状态为rejected，执行onRejected，传入失败的原因</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决异步实现\"><a href=\"#解决异步实现\" class=\"headerlink\" title=\"解决异步实现\"></a>解决异步实现</h2><p><strong>现在基本可以实现简单的同步代码，但是当resolve在setTomeout内执行，then时state还是pending等待状态 我们就需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们</strong><br>类似于发布订阅，先将then里面的两个函数储存起来，由于一个promise可以有多个then，所以存在同一个数组内。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多个then的情况</span><br><span class=\"line\">let p = new Promise();</span><br><span class=\"line\">p.then();</span><br><span class=\"line\">p.then();</span><br></pre></td></tr></table></figure>\n<p>成功或者失败时，forEach调用它们</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成功存放的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"comment\">// 失败存放法数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"comment\">// 一旦resolve执行，调用成功数组的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"comment\">// 一旦reject执行，调用失败数组的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 当状态state为pending时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// onFulfilled传入到成功数组</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// onRejected传入到失败数组</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决链式调用\"><a href=\"#解决链式调用\" class=\"headerlink\" title=\"解决链式调用\"></a>解决链式调用</h2><p><strong>我门常常用到new Promise().then().then(),这就是链式调用，用来解决回调地狱</strong><br>1、为了达成链式，我们默认在第一个then里返回一个promise。<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">秘籍</a>规定了一种方法，就是在then里面返回一个新的promise,称为promise2：<code>promise2 = new Promise((resolve, reject)=&gt;{})</code></p>\n<ul>\n<li>将这个promise2返回的值传递到下一个then中</li>\n<li>如果返回一个普通的值，则将普通的值传递给下一个then中</li>\n</ul>\n<p>2、当我们在第一个then中<code>return</code>了一个参数（参数未知，需判断）。这个return出来的新的promise就是onFulfilled()或onRejected()的值<br>规定onFulfilled()或onRejected()的值，即第一个then返回的值，叫做x，判断x的函数叫做resolvePromise</p>\n<ul>\n<li>首先，要看x是不是promise。</li>\n<li>如果是promise，则取它的结果，作为新的promise2成功的结果</li>\n<li>如果是普通值，直接作为promise2成功的结果</li>\n<li>所以要比较x和promise2</li>\n<li>resolvePromise的参数有promise2（默认返回的promise）、x（我们自己<code>return</code>的对象）、resolve、reject</li>\n<li>resolve和reject是promise2的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明返回的promise2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">        <span class=\"comment\">// resolvePromise函数，处理自己return的promise和默认的promise2的关系</span></span><br><span class=\"line\">        resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">        resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise，完成链式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完成resolvePromise函数\"><a href=\"#完成resolvePromise函数\" class=\"headerlink\" title=\"完成resolvePromise函数\"></a>完成resolvePromise函数</h2><p>规定了一段代码，让不同的promise代码互相套用，叫做resolvePromise</p>\n<ul>\n<li>如果 x === promise2，则是会造成循环引用，自己等待自己完成，则报“循环引用”错误</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环引用，自己等待自己完成，一辈子完不成</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>1、判断x</p>\n<ul>\n<li><strong>Otherwise, if x is an object or function,Let then be x.then</strong></li>\n<li>x 不能是null</li>\n<li>x 是普通值 直接resolve(x)</li>\n<li>x 是对象或者函数（包括promise），<code>let then = x.then</code> 2、当x是对象或者函数（默认promise）</li>\n<li>声明了then</li>\n<li>如果取then报错，则走reject()</li>\n<li>如果then是个函数，则用call执行then，第一个参数是this，后面是成功的回调和失败的回调</li>\n<li>如果成功的回调还是pormise，就递归继续解析 3、成功和失败只能调用一个 所以设定一个called来防止多次调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环引用报错</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === promise2)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// reject报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 防止多次调用</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"comment\">// x不是null 且x是对象或者函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x != <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// A+规定，声明then = x的then方法</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"comment\">// 如果then是函数，就默认是promise了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调</span></span><br><span class=\"line\">        then.call(x, y =&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"comment\">// resolve的结果依旧是promise 那就继续解析</span></span><br><span class=\"line\">          resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">        &#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          reject(err);<span class=\"comment\">// 失败了就失败了</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(x); <span class=\"comment\">// 直接成功即可</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 也属于失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 取then出错了那就不要在继续执行了</span></span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决其他问题\"><a href=\"#解决其他问题\" class=\"headerlink\" title=\"解决其他问题\"></a>解决其他问题</h2><p>1、规定onFulfilled,onRejected都是可选参数，如果他们不是函数，必须被忽略</p>\n<ul>\n<li>onFulfilled返回一个普通的值，成功时直接等于 <code>value =&gt; value</code></li>\n<li>onRejected返回一个普通的值，失败时如果直接等于 value =&gt; value，则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误<code>reason =&gt; throw err</code> 2、<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">秘籍</a>规定onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题</li>\n<li>如果onFulfilled或onRejected报错，则直接返回reject()</li>\n</ul>\n<p>顺便附赠catch和resolve、reject、race、all方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// onFulfilled如果不是函数，就忽略onFulfilled，直接返回value</span></span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    <span class=\"comment\">// onRejected如果不是函数，就忽略onRejected，直接扔出错误</span></span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果报错</span></span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 异步</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 异步</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise，完成链式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(fn)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>,fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === promise2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x != <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        then.call(x, y =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">        &#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//resolve方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resolve(val)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//reject方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reject(val)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//race方法 </span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">            promises[i].then(resolve, reject)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回) 进行修订，processData添加resolve传参</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processData</span>(<span class=\"params\">index, data, resolve</span>) </span>&#123;</span><br><span class=\"line\">        arr[index] = data;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == promises.length) &#123;</span><br><span class=\"line\">            resolve(arr);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">            promises[i].then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">                processData(i, data, resolve);</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何验证我们的promise是否正确\"><a href=\"#如何验证我们的promise是否正确\" class=\"headerlink\" title=\"如何验证我们的promise是否正确\"></a>如何验证我们的promise是否正确</h2><p>1、先在后面加上下述代码<br>2、npm 有一个promises-aplus-tests插件 npm i promises-aplus-tests -g 可以全局安装 mac用户最前面加上sudo<br>3、命令行 promises-aplus-tests [js文件名] 即可验证</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目前是通过他测试 他会测试一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 语法糖</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.defer = <span class=\"built_in\">Promise</span>.deferred = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dfd = &#123;&#125;</span><br><span class=\"line\">  dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    dfd.resolve = resolve;</span><br><span class=\"line\">    dfd.reject = reject;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\"><span class=\"comment\">//npm install promises-aplus-tests 用来测试自己的promise 符不符合promisesA+规范</span></span><br></pre></td></tr></table></figure>"},{"title":"vue的双向绑定","date":"2019-01-02T02:11:40.000Z","comments":0,"_content":"\n# 简易Vue实现\n\n> 本人练习制作的(网速慢的时候，页面会显示源码{{getHelloWorld}})[简易版vue](https://dangchaofeng.github.io/vue-simple/cf-result/index.html)\n\n> 演示版的源码（含清晰注释/cf-result文件下）[在这里](https://github.com/dangchaofeng/vue-simple)\n\n> 要实现简单的vue，必须掌握两点：\n\n* 数据劫持，Object.defineProperty()\n* 发布-订阅模式 \n\n## 创建对象的方法\n\n### 字面量创建法\n\n```javascript\nvar people = {\n    name: 'DangChaofeng',\n    age: '25'\n};\n```\n\n### 构造函数创建法\n\n```\tjavascript\nvar people = new Object();\npeople.name = 'DangChaofeng';\npeople.age = '25';\n```\n\n创建出来的对象，我们可以对它进行任意操作，增删改查均可以。\n\nEg:\n\n```\tjavascript\n// 增加：\npeople.gender = 'man';\n// 删除\ndelete people.gender;\n// 修改\npeople.name = 'Suliang';\n// 查(获取)\npeople.name\n```\n\n但是你们有没有想过，为什么我们可以对它进行增删改查呢？我们已经知道对象是一个键值对，key-value（属性-值）的存在，少有人去知道，对象属性还有自己的特性。\n\n## 对象属性的四大特性\n\n### 数据属性\n\n```javascript\nvar obj = new Object();\nObject.defineProperty(obj, 'name', {\n    value: \"Tom\",\n    writable: true,\n    configurable: true,\n    enumerable: true\n});\n```\n\n### 访问器属性\n\n```\tjavascript\nvar obj = new Object();\nvar tempVar = '123';\nObject.defineProperty(obj, 'name', {\n    configurable: true,\n    enumerable: true,\n    set: function(val){\n        tempVar = val;\n    },\n    get: function(){\n        return tempVar;\n    }\n});\n```\n\n这里需要说明下： 如果我们不使用Object.defineProperty()来创建属性，默认创建出来的属性的特性，均为true,如果使用Object.defineProperty()来创建属性，不写的特性，均默认为fasle。\n\n如果我不写writable: true，则可写行性为false,赋值操作将失败。\n\nVUE中的`数据劫持`，就是利用对象的访问器属性，通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时做你想要做的事情。\n\n## 发布-订阅者模式\n\n> jq的$().on()、$().trigger()；就是典型的一种发布订阅模式实现。下来我们实现自己的一个简易版发布订阅者模式：\n\n```js\nfunction Public() {\n  // 一个中间站，是用来收集存储并建立发布者和订阅者之间的联系：\n  this.handlers = {};\n}\nPublic.prototype = {\n    // 订阅事件\n    on: function(eventType, handler){\n        var self = this;\n        // 如果不存在这个事件，则初始化，值是一个数组。(因为对一个事件可以监听多次，挂不同的回调函数，所以事件名称对应多个事件函数).\n        if(!(eventType in self.handlers)) {\n           self.handlers[eventType] = [];\n        } else {\n           self.handlers[eventType].push(handler);\n        }\n        return this;\n    },\n     // 触发事件(发布事件) 循环执行事件对应的所有事件函数，并把参数带进入。\n    emit: function(eventType){\n       var self = this;\n       var handlerArgs = Array.prototype.slice.call(arguments,1);\n       for(var i = 0; i < self.handlers[eventType].length; i++) {\n         self.handlers[eventType][i].apply(self,handlerArgs);\n       }\n       return self;\n    },\n    // 删除订阅事件\n    off: function(eventType, handler){\n        var currentEvent = this.handlers[eventType];\n        var len = 0;\n        if (currentEvent) {\n            len = currentEvent.length;\n            for (var i = len - 1; i >= 0; i--){\n                if (currentEvent[i] === handler){\n                    currentEvent.splice(i, 1);\n                }\n            }\n        }\n        return this;\n    }\n};\n \nvar Publisher = new Public();\n \n//订阅事件a\nPublisher.on('a', function(data){\n    console.log(1 + data);\n});\nPublisher.on('a', function(data){\n    console.log(2 + data);\n});\n \n//触发事件a\nPublisher.emit('a', '我是第1次调用的参数');\n \nPublisher.emit('a', '我是第2次调用的参数');　\n```\n\n\n\n\n","source":"_posts/vue.md","raw":"---\ntitle: vue的双向绑定\ndate: 2019-01-02 10:11:40\ntags:\n- vue\n- 数据劫持\n- 发布订阅\ncategories:\n- vue\n- 数据劫持\n- 发布订阅\ncomments: false\n---\n\n# 简易Vue实现\n\n> 本人练习制作的(网速慢的时候，页面会显示源码{{getHelloWorld}})[简易版vue](https://dangchaofeng.github.io/vue-simple/cf-result/index.html)\n\n> 演示版的源码（含清晰注释/cf-result文件下）[在这里](https://github.com/dangchaofeng/vue-simple)\n\n> 要实现简单的vue，必须掌握两点：\n\n* 数据劫持，Object.defineProperty()\n* 发布-订阅模式 \n\n## 创建对象的方法\n\n### 字面量创建法\n\n```javascript\nvar people = {\n    name: 'DangChaofeng',\n    age: '25'\n};\n```\n\n### 构造函数创建法\n\n```\tjavascript\nvar people = new Object();\npeople.name = 'DangChaofeng';\npeople.age = '25';\n```\n\n创建出来的对象，我们可以对它进行任意操作，增删改查均可以。\n\nEg:\n\n```\tjavascript\n// 增加：\npeople.gender = 'man';\n// 删除\ndelete people.gender;\n// 修改\npeople.name = 'Suliang';\n// 查(获取)\npeople.name\n```\n\n但是你们有没有想过，为什么我们可以对它进行增删改查呢？我们已经知道对象是一个键值对，key-value（属性-值）的存在，少有人去知道，对象属性还有自己的特性。\n\n## 对象属性的四大特性\n\n### 数据属性\n\n```javascript\nvar obj = new Object();\nObject.defineProperty(obj, 'name', {\n    value: \"Tom\",\n    writable: true,\n    configurable: true,\n    enumerable: true\n});\n```\n\n### 访问器属性\n\n```\tjavascript\nvar obj = new Object();\nvar tempVar = '123';\nObject.defineProperty(obj, 'name', {\n    configurable: true,\n    enumerable: true,\n    set: function(val){\n        tempVar = val;\n    },\n    get: function(){\n        return tempVar;\n    }\n});\n```\n\n这里需要说明下： 如果我们不使用Object.defineProperty()来创建属性，默认创建出来的属性的特性，均为true,如果使用Object.defineProperty()来创建属性，不写的特性，均默认为fasle。\n\n如果我不写writable: true，则可写行性为false,赋值操作将失败。\n\nVUE中的`数据劫持`，就是利用对象的访问器属性，通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时做你想要做的事情。\n\n## 发布-订阅者模式\n\n> jq的$().on()、$().trigger()；就是典型的一种发布订阅模式实现。下来我们实现自己的一个简易版发布订阅者模式：\n\n```js\nfunction Public() {\n  // 一个中间站，是用来收集存储并建立发布者和订阅者之间的联系：\n  this.handlers = {};\n}\nPublic.prototype = {\n    // 订阅事件\n    on: function(eventType, handler){\n        var self = this;\n        // 如果不存在这个事件，则初始化，值是一个数组。(因为对一个事件可以监听多次，挂不同的回调函数，所以事件名称对应多个事件函数).\n        if(!(eventType in self.handlers)) {\n           self.handlers[eventType] = [];\n        } else {\n           self.handlers[eventType].push(handler);\n        }\n        return this;\n    },\n     // 触发事件(发布事件) 循环执行事件对应的所有事件函数，并把参数带进入。\n    emit: function(eventType){\n       var self = this;\n       var handlerArgs = Array.prototype.slice.call(arguments,1);\n       for(var i = 0; i < self.handlers[eventType].length; i++) {\n         self.handlers[eventType][i].apply(self,handlerArgs);\n       }\n       return self;\n    },\n    // 删除订阅事件\n    off: function(eventType, handler){\n        var currentEvent = this.handlers[eventType];\n        var len = 0;\n        if (currentEvent) {\n            len = currentEvent.length;\n            for (var i = len - 1; i >= 0; i--){\n                if (currentEvent[i] === handler){\n                    currentEvent.splice(i, 1);\n                }\n            }\n        }\n        return this;\n    }\n};\n \nvar Publisher = new Public();\n \n//订阅事件a\nPublisher.on('a', function(data){\n    console.log(1 + data);\n});\nPublisher.on('a', function(data){\n    console.log(2 + data);\n});\n \n//触发事件a\nPublisher.emit('a', '我是第1次调用的参数');\n \nPublisher.emit('a', '我是第2次调用的参数');　\n```\n\n\n\n\n","slug":"vue","published":1,"updated":"2021-01-15T02:39:36.529Z","layout":"post","photos":[],"link":"","_id":"ckmbs3qc1000sh0nhrmnit2hy","content":"<h1 id=\"简易Vue实现\"><a href=\"#简易Vue实现\" class=\"headerlink\" title=\"简易Vue实现\"></a>简易Vue实现</h1><blockquote>\n<p>本人练习制作的(网速慢的时候，页面会显示源码)<a href=\"https://dangchaofeng.github.io/vue-simple/cf-result/index.html\">简易版vue</a></p>\n</blockquote>\n<blockquote>\n<p>演示版的源码（含清晰注释/cf-result文件下）<a href=\"https://github.com/dangchaofeng/vue-simple\" target=\"_blank\" rel=\"noopener\">在这里</a></p>\n</blockquote>\n<blockquote>\n<p>要实现简单的vue，必须掌握两点：</p>\n</blockquote>\n<ul>\n<li>数据劫持，Object.defineProperty()</li>\n<li>发布-订阅模式 </li>\n</ul>\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><h3 id=\"字面量创建法\"><a href=\"#字面量创建法\" class=\"headerlink\" title=\"字面量创建法\"></a>字面量创建法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'DangChaofeng'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'25'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数创建法\"><a href=\"#构造函数创建法\" class=\"headerlink\" title=\"构造函数创建法\"></a>构造函数创建法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">people.name = <span class=\"string\">'DangChaofeng'</span>;</span><br><span class=\"line\">people.age = <span class=\"string\">'25'</span>;</span><br></pre></td></tr></table></figure>\n<p>创建出来的对象，我们可以对它进行任意操作，增删改查均可以。</p>\n<p>Eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加：</span></span><br><span class=\"line\">people.gender = <span class=\"string\">'man'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> people.gender;</span><br><span class=\"line\"><span class=\"comment\">// 修改</span></span><br><span class=\"line\">people.name = <span class=\"string\">'Suliang'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 查(获取)</span></span><br><span class=\"line\">people.name</span><br></pre></td></tr></table></figure>\n<p>但是你们有没有想过，为什么我们可以对它进行增删改查呢？我们已经知道对象是一个键值对，key-value（属性-值）的存在，少有人去知道，对象属性还有自己的特性。</p>\n<h2 id=\"对象属性的四大特性\"><a href=\"#对象属性的四大特性\" class=\"headerlink\" title=\"对象属性的四大特性\"></a>对象属性的四大特性</h2><h3 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"Tom\"</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> tempVar = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(val)&#123;</span><br><span class=\"line\">        tempVar = val;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tempVar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里需要说明下： 如果我们不使用Object.defineProperty()来创建属性，默认创建出来的属性的特性，均为true,如果使用Object.defineProperty()来创建属性，不写的特性，均默认为fasle。</p>\n<p>如果我不写writable: true，则可写行性为false,赋值操作将失败。</p>\n<p>VUE中的<code>数据劫持</code>，就是利用对象的访问器属性，通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时做你想要做的事情。</p>\n<h2 id=\"发布-订阅者模式\"><a href=\"#发布-订阅者模式\" class=\"headerlink\" title=\"发布-订阅者模式\"></a>发布-订阅者模式</h2><blockquote>\n<p>jq的$().on()、$().trigger()；就是典型的一种发布订阅模式实现。下来我们实现自己的一个简易版发布订阅者模式：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Public</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一个中间站，是用来收集存储并建立发布者和订阅者之间的联系：</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlers = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Public.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 订阅事件</span></span><br><span class=\"line\">    on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不存在这个事件，则初始化，值是一个数组。(因为对一个事件可以监听多次，挂不同的回调函数，所以事件名称对应多个事件函数).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(eventType <span class=\"keyword\">in</span> self.handlers)) &#123;</span><br><span class=\"line\">           self.handlers[eventType] = [];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           self.handlers[eventType].push(handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">     <span class=\"comment\">// 触发事件(发布事件) 循环执行事件对应的所有事件函数，并把参数带进入。</span></span><br><span class=\"line\">    emit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> handlerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.handlers[eventType].length; i++) &#123;</span><br><span class=\"line\">         self.handlers[eventType][i].apply(self,handlerArgs);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 删除订阅事件</span></span><br><span class=\"line\">    off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentEvent = <span class=\"keyword\">this</span>.handlers[eventType];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentEvent) &#123;</span><br><span class=\"line\">            len = currentEvent.length;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentEvent[i] === handler)&#123;</span><br><span class=\"line\">                    currentEvent.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> Publisher = <span class=\"keyword\">new</span> Public();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//订阅事件a</span></span><br><span class=\"line\">Publisher.on(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Publisher.on(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//触发事件a</span></span><br><span class=\"line\">Publisher.emit(<span class=\"string\">'a'</span>, <span class=\"string\">'我是第1次调用的参数'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Publisher.emit(<span class=\"string\">'a'</span>, <span class=\"string\">'我是第2次调用的参数'</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简易Vue实现\"><a href=\"#简易Vue实现\" class=\"headerlink\" title=\"简易Vue实现\"></a>简易Vue实现</h1><blockquote>\n<p>本人练习制作的(网速慢的时候，页面会显示源码)<a href=\"https://dangchaofeng.github.io/vue-simple/cf-result/index.html\">简易版vue</a></p>\n</blockquote>\n<blockquote>\n<p>演示版的源码（含清晰注释/cf-result文件下）<a href=\"https://github.com/dangchaofeng/vue-simple\" target=\"_blank\" rel=\"noopener\">在这里</a></p>\n</blockquote>\n<blockquote>\n<p>要实现简单的vue，必须掌握两点：</p>\n</blockquote>\n<ul>\n<li>数据劫持，Object.defineProperty()</li>\n<li>发布-订阅模式 </li>\n</ul>\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><h3 id=\"字面量创建法\"><a href=\"#字面量创建法\" class=\"headerlink\" title=\"字面量创建法\"></a>字面量创建法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'DangChaofeng'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'25'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数创建法\"><a href=\"#构造函数创建法\" class=\"headerlink\" title=\"构造函数创建法\"></a>构造函数创建法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">people.name = <span class=\"string\">'DangChaofeng'</span>;</span><br><span class=\"line\">people.age = <span class=\"string\">'25'</span>;</span><br></pre></td></tr></table></figure>\n<p>创建出来的对象，我们可以对它进行任意操作，增删改查均可以。</p>\n<p>Eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加：</span></span><br><span class=\"line\">people.gender = <span class=\"string\">'man'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> people.gender;</span><br><span class=\"line\"><span class=\"comment\">// 修改</span></span><br><span class=\"line\">people.name = <span class=\"string\">'Suliang'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 查(获取)</span></span><br><span class=\"line\">people.name</span><br></pre></td></tr></table></figure>\n<p>但是你们有没有想过，为什么我们可以对它进行增删改查呢？我们已经知道对象是一个键值对，key-value（属性-值）的存在，少有人去知道，对象属性还有自己的特性。</p>\n<h2 id=\"对象属性的四大特性\"><a href=\"#对象属性的四大特性\" class=\"headerlink\" title=\"对象属性的四大特性\"></a>对象属性的四大特性</h2><h3 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"Tom\"</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> tempVar = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(val)&#123;</span><br><span class=\"line\">        tempVar = val;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tempVar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里需要说明下： 如果我们不使用Object.defineProperty()来创建属性，默认创建出来的属性的特性，均为true,如果使用Object.defineProperty()来创建属性，不写的特性，均默认为fasle。</p>\n<p>如果我不写writable: true，则可写行性为false,赋值操作将失败。</p>\n<p>VUE中的<code>数据劫持</code>，就是利用对象的访问器属性，通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时做你想要做的事情。</p>\n<h2 id=\"发布-订阅者模式\"><a href=\"#发布-订阅者模式\" class=\"headerlink\" title=\"发布-订阅者模式\"></a>发布-订阅者模式</h2><blockquote>\n<p>jq的$().on()、$().trigger()；就是典型的一种发布订阅模式实现。下来我们实现自己的一个简易版发布订阅者模式：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Public</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一个中间站，是用来收集存储并建立发布者和订阅者之间的联系：</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlers = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Public.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 订阅事件</span></span><br><span class=\"line\">    on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不存在这个事件，则初始化，值是一个数组。(因为对一个事件可以监听多次，挂不同的回调函数，所以事件名称对应多个事件函数).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(eventType <span class=\"keyword\">in</span> self.handlers)) &#123;</span><br><span class=\"line\">           self.handlers[eventType] = [];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           self.handlers[eventType].push(handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">     <span class=\"comment\">// 触发事件(发布事件) 循环执行事件对应的所有事件函数，并把参数带进入。</span></span><br><span class=\"line\">    emit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> handlerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.handlers[eventType].length; i++) &#123;</span><br><span class=\"line\">         self.handlers[eventType][i].apply(self,handlerArgs);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 删除订阅事件</span></span><br><span class=\"line\">    off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentEvent = <span class=\"keyword\">this</span>.handlers[eventType];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentEvent) &#123;</span><br><span class=\"line\">            len = currentEvent.length;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentEvent[i] === handler)&#123;</span><br><span class=\"line\">                    currentEvent.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> Publisher = <span class=\"keyword\">new</span> Public();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//订阅事件a</span></span><br><span class=\"line\">Publisher.on(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Publisher.on(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//触发事件a</span></span><br><span class=\"line\">Publisher.emit(<span class=\"string\">'a'</span>, <span class=\"string\">'我是第1次调用的参数'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Publisher.emit(<span class=\"string\">'a'</span>, <span class=\"string\">'我是第2次调用的参数'</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"npm常用命令","date":"2018-12-26T08:23:12.000Z","comments":0,"_content":"\n> 相信大家很多人，包括我自己，常常会对npm install --save-dev 、 npm install --save傻傻分不清楚,今天这里主要是对npm的常用命令进行一个总结。\n\n___\n\n> 首先，npm 是node.js自带的功能。查看npm版本\n\n```js\nnpm -v\n6.4.1\n```\n\n> 升级npm版本\n\n```js\nmac下: \n\tsudo npm install npm -g\nwindow下:\n\tnpm install npm -g\n```\n\n> 使用npm安装模块\n\n```js\nnpm install <Module Name>\neg: 使用npm安装node中的express框架\n\tnpm install express\n```\n\n安装好之后，express包就会放在当前工程目录下的node_modules 目录中，因此在代码中只需要通过 **require('express')** 的方式就好，无需指定第三方包路径。\n\n```js\nconst express = require('express');\n```\n\n> 默认方式为本地安装，还有一种是全局安装\n\n```js\nnpm install express -g   # 全局安装\n```\n\n> 接下来，我们列举下容易混淆的方式（注意①②的不同）\n\n```js\nnpm install X:\n\n\t- 会把X包安装到node_modules目录中\n\n\t- 不会修改package.json\n\n\t- 之后运行npm install命令时，不会自动安装X\n    \nnpm install X --save:\n\n    - 会把X包安装到node_modules目录中\n\n    - 会在package.json的 ①dependencies 属性下添加X\n\n    - 之后运行npm install命令时，会自动安装X到node_modules目录中\n\n    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，会自动安装msbuild到\t\t  node_modules目录中\nnpm install X --save-dev:\n\n    - 会把X包安装到node_modules目录中\n\n    - 会在package.json的 ②devDependencies 属性下添加X\n\n    - 之后运行npm install命令时，会自动安装X到node_modules目录中\n\n    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，不会自动安装X到\t\t\t  node_modules目录中\n```\n\n> npm install 使用原则\n\n```js\n运行时需要用到的包使用--save，否则使用--save-dev。\n```\n\n> npm 卸载模块\n\n```\nnpm uninstall X\n卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：\nnpm ls\n```\n\n> 更新模块\n\n```\nnpm update X\n```\n\n### 使用淘宝镜像\n\n> 大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n>\n> 你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:\n\n```js\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n注意： 如果使用的是cnpm，则只需要将第一个npm命令变为cnpm即可，其他和npm命令使用方式相同。","source":"_posts/npm-command.md","raw":"---\ntitle: npm常用命令\ndate: 2018-12-26 16:23:12\ntags: \n- npm\ncategories:\n- npm\ncomments: false\n---\n\n> 相信大家很多人，包括我自己，常常会对npm install --save-dev 、 npm install --save傻傻分不清楚,今天这里主要是对npm的常用命令进行一个总结。\n\n___\n\n> 首先，npm 是node.js自带的功能。查看npm版本\n\n```js\nnpm -v\n6.4.1\n```\n\n> 升级npm版本\n\n```js\nmac下: \n\tsudo npm install npm -g\nwindow下:\n\tnpm install npm -g\n```\n\n> 使用npm安装模块\n\n```js\nnpm install <Module Name>\neg: 使用npm安装node中的express框架\n\tnpm install express\n```\n\n安装好之后，express包就会放在当前工程目录下的node_modules 目录中，因此在代码中只需要通过 **require('express')** 的方式就好，无需指定第三方包路径。\n\n```js\nconst express = require('express');\n```\n\n> 默认方式为本地安装，还有一种是全局安装\n\n```js\nnpm install express -g   # 全局安装\n```\n\n> 接下来，我们列举下容易混淆的方式（注意①②的不同）\n\n```js\nnpm install X:\n\n\t- 会把X包安装到node_modules目录中\n\n\t- 不会修改package.json\n\n\t- 之后运行npm install命令时，不会自动安装X\n    \nnpm install X --save:\n\n    - 会把X包安装到node_modules目录中\n\n    - 会在package.json的 ①dependencies 属性下添加X\n\n    - 之后运行npm install命令时，会自动安装X到node_modules目录中\n\n    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，会自动安装msbuild到\t\t  node_modules目录中\nnpm install X --save-dev:\n\n    - 会把X包安装到node_modules目录中\n\n    - 会在package.json的 ②devDependencies 属性下添加X\n\n    - 之后运行npm install命令时，会自动安装X到node_modules目录中\n\n    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，不会自动安装X到\t\t\t  node_modules目录中\n```\n\n> npm install 使用原则\n\n```js\n运行时需要用到的包使用--save，否则使用--save-dev。\n```\n\n> npm 卸载模块\n\n```\nnpm uninstall X\n卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：\nnpm ls\n```\n\n> 更新模块\n\n```\nnpm update X\n```\n\n### 使用淘宝镜像\n\n> 大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n>\n> 你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:\n\n```js\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n注意： 如果使用的是cnpm，则只需要将第一个npm命令变为cnpm即可，其他和npm命令使用方式相同。","slug":"npm-command","published":1,"updated":"2021-01-15T02:39:36.513Z","layout":"post","photos":[],"link":"","_id":"ckmbs3qc7000uh0nhuzgqaglm","content":"<blockquote>\n<p>相信大家很多人，包括我自己，常常会对npm install –save-dev 、 npm install –save傻傻分不清楚,今天这里主要是对npm的常用命令进行一个总结。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>首先，npm 是node.js自带的功能。查看npm版本</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"><span class=\"number\">6.4</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>升级npm版本</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac下: </span><br><span class=\"line\">\tsudo npm install npm -g</span><br><span class=\"line\"><span class=\"built_in\">window</span>下:</span><br><span class=\"line\">\tnpm install npm -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用npm安装模块</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;Module Name&gt;</span><br><span class=\"line\">eg: 使用npm安装node中的express框架</span><br><span class=\"line\">\tnpm install express</span><br></pre></td></tr></table></figure>\n<p>安装好之后，express包就会放在当前工程目录下的node_modules 目录中，因此在代码中只需要通过 <strong>require(‘express’)</strong> 的方式就好，无需指定第三方包路径。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认方式为本地安装，还有一种是全局安装</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接下来，我们列举下容易混淆的方式（注意①②的不同）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install X:</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 不会修改package.json</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 之后运行npm install命令时，不会自动安装X</span><br><span class=\"line\">    </span><br><span class=\"line\">npm install X --save:</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会在package.json的 ①dependencies 属性下添加X</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，会自动安装msbuild到\t\t  node_modules目录中</span><br><span class=\"line\">npm install X --save-dev:</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会在package.json的 ②devDependencies 属性下添加X</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，不会自动安装X到\t\t\t  node_modules目录中</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm install 使用原则</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行时需要用到的包使用--save，否则使用--save-dev。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm 卸载模块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall X</span><br><span class=\"line\">卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</span><br><span class=\"line\">npm ls</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更新模块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update X</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用淘宝镜像\"><a href=\"#使用淘宝镜像\" class=\"headerlink\" title=\"使用淘宝镜像\"></a>使用淘宝镜像</h3><blockquote>\n<p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n<p>注意： 如果使用的是cnpm，则只需要将第一个npm命令变为cnpm即可，其他和npm命令使用方式相同。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>相信大家很多人，包括我自己，常常会对npm install –save-dev 、 npm install –save傻傻分不清楚,今天这里主要是对npm的常用命令进行一个总结。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>首先，npm 是node.js自带的功能。查看npm版本</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"><span class=\"number\">6.4</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>升级npm版本</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac下: </span><br><span class=\"line\">\tsudo npm install npm -g</span><br><span class=\"line\"><span class=\"built_in\">window</span>下:</span><br><span class=\"line\">\tnpm install npm -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用npm安装模块</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;Module Name&gt;</span><br><span class=\"line\">eg: 使用npm安装node中的express框架</span><br><span class=\"line\">\tnpm install express</span><br></pre></td></tr></table></figure>\n<p>安装好之后，express包就会放在当前工程目录下的node_modules 目录中，因此在代码中只需要通过 <strong>require(‘express’)</strong> 的方式就好，无需指定第三方包路径。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认方式为本地安装，还有一种是全局安装</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接下来，我们列举下容易混淆的方式（注意①②的不同）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install X:</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 不会修改package.json</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 之后运行npm install命令时，不会自动安装X</span><br><span class=\"line\">    </span><br><span class=\"line\">npm install X --save:</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会在package.json的 ①dependencies 属性下添加X</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，会自动安装msbuild到\t\t  node_modules目录中</span><br><span class=\"line\">npm install X --save-dev:</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会在package.json的 ②devDependencies 属性下添加X</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，不会自动安装X到\t\t\t  node_modules目录中</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm install 使用原则</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行时需要用到的包使用--save，否则使用--save-dev。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm 卸载模块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall X</span><br><span class=\"line\">卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</span><br><span class=\"line\">npm ls</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更新模块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update X</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用淘宝镜像\"><a href=\"#使用淘宝镜像\" class=\"headerlink\" title=\"使用淘宝镜像\"></a>使用淘宝镜像</h3><blockquote>\n<p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n<p>注意： 如果使用的是cnpm，则只需要将第一个npm命令变为cnpm即可，其他和npm命令使用方式相同。</p>\n"},{"title":"TCP三次握手四次挥手","date":"2019-01-02T06:40:29.000Z","comments":0,"_content":"\n## TCP三次握手四次挥手\n\n### TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\n\n> 在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n>\n> 其中，对于我们日常的分析有用的就是前面的五个字段。\n\n```js\nSYN表示建立连接，\n\nFIN表示关闭连接，\n\nACK表示响应，\n\nPSH表示有 DATA数据传输，\n\nRST表示连接重置。\n```\n\n其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n\n如果只是单个的一个SYN，它表示的只是建立连接。\n\nTCP的几次握手就是通过这样的ACK表现出来的。\n\n但`SYN`与`FIN`是不会同时为1的，因为前者表示的是`建立连接`，而后者表示的是`断开连接`。\n\n\n\nRST一般是在FIN之后才会出现为1的情况，表示的是连接重置。\n\n 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n\n\n\nPSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\n\n\n\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\n概念补充-TCP三次握手：\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：\n\n`SYN`(synchronous建立联机) \n\n`ACK`(acknowledgement 确认) \n\n`PSH`(push传送) \n\n`FIN`(finish结束) \n\n`RST`(reset重置) \n\n`URG`(urgent紧急)\n\n`Sequence number`(顺序号码，用小写`seq`代替) \n\n`Acknowledge number`(确认号码，用小写`ack`代替)\n\n### TCP连接的建立（三次握手）\n\n> TCP三次握手如图：\n\n![img text](tcp/img1.png)\n\n1. TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；\n2. TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位`SYN=1`，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。<font color=red>TCP规定，SYN报文段（`SYN=1`的报文段）不能携带数据，但需要消耗掉一个序号。</font>\n3. TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 `ACK=1`，`SYN=1`，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。<font color=red>这个报文也不能携带数据，但是同样要消耗一个序号。</font>\n4. TCP客户进程收到确认后，还要向服务器给出确认。确认报文的`ACK=1`，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。<font color=red>TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</font>\n5. 当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。\n\n### 为什么TCP客户端最后还要发送一次确认呢？\n\n一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。\n\n如果使用的是两次握手建立连接，假设有这样一种场景，<font color=blue>客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，</font>由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<font color=blue>此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</font>\n\n如果采用的是三次握手，就算是<font color=green>那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。</font>由于服务器收不到确认，就知道客户端并没有请求连接。\n\n\n\n> 数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。tcp四次挥手如图：\n\n![img text](tcp/img2.png)\n\n1. 客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <font color=red face=\"黑体\">TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</font>\n2. 服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<font color=red face=\"黑体\">TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。</font><font color=blue>这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</font>\n3. 客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<font color=red>（在这之前还需要接受服务器发送的最后的数据）。</font>\n4. 01服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n5. 客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<font color=red>注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</font>\n6. 服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<font color=red>可以看到，服务器结束TCP连接的时间要比客户端早一些。</font>\n\n### 为什么客户端最后还要等待2MSL？\n\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。\n\n第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，<font color=blue>站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，</font>而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n\n第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\n\n为什么建立连接是三次握手，关闭连接确是四次挥手呢？\n\n建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 \n\n而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。\n\n### 如果已经建立了连接，但是客户端突然出现故障了怎么办？\n\nTCP还设有一个`保活计时器`，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，<font color=blue>时间通常是设置为2小时</font>，若两小时还没有收到客户端的任何数据，服务器就会发送一个<font color=blue>探测报文段，以后每隔75秒发送一次</font>。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。","source":"_posts/tcp.md","raw":"---\ntitle: TCP三次握手四次挥手\ndate: 2019-01-02 14:40:29\ntags:\n- tcp连接、断开连接\ncategories:\n- tcp连接、断开连接\ncomments: false\n---\n\n## TCP三次握手四次挥手\n\n### TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\n\n> 在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n>\n> 其中，对于我们日常的分析有用的就是前面的五个字段。\n\n```js\nSYN表示建立连接，\n\nFIN表示关闭连接，\n\nACK表示响应，\n\nPSH表示有 DATA数据传输，\n\nRST表示连接重置。\n```\n\n其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n\n如果只是单个的一个SYN，它表示的只是建立连接。\n\nTCP的几次握手就是通过这样的ACK表现出来的。\n\n但`SYN`与`FIN`是不会同时为1的，因为前者表示的是`建立连接`，而后者表示的是`断开连接`。\n\n\n\nRST一般是在FIN之后才会出现为1的情况，表示的是连接重置。\n\n 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n\n\n\nPSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\n\n\n\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\n概念补充-TCP三次握手：\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：\n\n`SYN`(synchronous建立联机) \n\n`ACK`(acknowledgement 确认) \n\n`PSH`(push传送) \n\n`FIN`(finish结束) \n\n`RST`(reset重置) \n\n`URG`(urgent紧急)\n\n`Sequence number`(顺序号码，用小写`seq`代替) \n\n`Acknowledge number`(确认号码，用小写`ack`代替)\n\n### TCP连接的建立（三次握手）\n\n> TCP三次握手如图：\n\n![img text](tcp/img1.png)\n\n1. TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；\n2. TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位`SYN=1`，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。<font color=red>TCP规定，SYN报文段（`SYN=1`的报文段）不能携带数据，但需要消耗掉一个序号。</font>\n3. TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 `ACK=1`，`SYN=1`，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。<font color=red>这个报文也不能携带数据，但是同样要消耗一个序号。</font>\n4. TCP客户进程收到确认后，还要向服务器给出确认。确认报文的`ACK=1`，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。<font color=red>TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</font>\n5. 当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。\n\n### 为什么TCP客户端最后还要发送一次确认呢？\n\n一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。\n\n如果使用的是两次握手建立连接，假设有这样一种场景，<font color=blue>客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，</font>由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<font color=blue>此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</font>\n\n如果采用的是三次握手，就算是<font color=green>那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。</font>由于服务器收不到确认，就知道客户端并没有请求连接。\n\n\n\n> 数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。tcp四次挥手如图：\n\n![img text](tcp/img2.png)\n\n1. 客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <font color=red face=\"黑体\">TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</font>\n2. 服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<font color=red face=\"黑体\">TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。</font><font color=blue>这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</font>\n3. 客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<font color=red>（在这之前还需要接受服务器发送的最后的数据）。</font>\n4. 01服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n5. 客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<font color=red>注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</font>\n6. 服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<font color=red>可以看到，服务器结束TCP连接的时间要比客户端早一些。</font>\n\n### 为什么客户端最后还要等待2MSL？\n\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。\n\n第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，<font color=blue>站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，</font>而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n\n第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\n\n为什么建立连接是三次握手，关闭连接确是四次挥手呢？\n\n建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 \n\n而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。\n\n### 如果已经建立了连接，但是客户端突然出现故障了怎么办？\n\nTCP还设有一个`保活计时器`，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，<font color=blue>时间通常是设置为2小时</font>，若两小时还没有收到客户端的任何数据，服务器就会发送一个<font color=blue>探测报文段，以后每隔75秒发送一次</font>。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。","slug":"tcp","published":1,"updated":"2021-01-15T02:39:36.520Z","layout":"post","photos":[],"link":"","_id":"ckmbs3qcd000yh0nhakmi6k3u","content":"<h2 id=\"TCP三次握手四次挥手\"><a href=\"#TCP三次握手四次挥手\" class=\"headerlink\" title=\"TCP三次握手四次挥手\"></a>TCP三次握手四次挥手</h2><h3 id=\"TCP的状态-SYN-FIN-ACK-PSH-RST-URG\"><a href=\"#TCP的状态-SYN-FIN-ACK-PSH-RST-URG\" class=\"headerlink\" title=\"TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\"></a>TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)</h3><blockquote>\n<p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>\n<p>其中，对于我们日常的分析有用的就是前面的五个字段。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYN表示建立连接，</span><br><span class=\"line\"></span><br><span class=\"line\">FIN表示关闭连接，</span><br><span class=\"line\"></span><br><span class=\"line\">ACK表示响应，</span><br><span class=\"line\"></span><br><span class=\"line\">PSH表示有 DATA数据传输，</span><br><span class=\"line\"></span><br><span class=\"line\">RST表示连接重置。</span><br></pre></td></tr></table></figure>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，</p>\n<p>如果只是单个的一个SYN，它表示的只是建立连接。</p>\n<p>TCP的几次握手就是通过这样的ACK表现出来的。</p>\n<p>但<code>SYN</code>与<code>FIN</code>是不会同时为1的，因为前者表示的是<code>建立连接</code>，而后者表示的是<code>断开连接</code>。</p>\n<p>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。</p>\n<p> 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>\n<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。</p>\n<p>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<p>概念补充-TCP三次握手：</p>\n<p>TCP(Transmission Control Protocol)传输控制协议</p>\n<p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：</p>\n<p><code>SYN</code>(synchronous建立联机) </p>\n<p><code>ACK</code>(acknowledgement 确认) </p>\n<p><code>PSH</code>(push传送) </p>\n<p><code>FIN</code>(finish结束) </p>\n<p><code>RST</code>(reset重置) </p>\n<p><code>URG</code>(urgent紧急)</p>\n<p><code>Sequence number</code>(顺序号码，用小写<code>seq</code>代替) </p>\n<p><code>Acknowledge number</code>(确认号码，用小写<code>ack</code>代替)</p>\n<h3 id=\"TCP连接的建立（三次握手）\"><a href=\"#TCP连接的建立（三次握手）\" class=\"headerlink\" title=\"TCP连接的建立（三次握手）\"></a>TCP连接的建立（三次握手）</h3><blockquote>\n<p>TCP三次握手如图：</p>\n</blockquote>\n<p><img src=\"/blog/dist/2019/01/02/tcp/img1.png\" alt=\"img text\"></p>\n<ol>\n<li>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；</li>\n<li>TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位<code>SYN=1</code>，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。<font color=\"red\">TCP规定，SYN报文段（<code>SYN=1</code>的报文段）不能携带数据，但需要消耗掉一个序号。</font></li>\n<li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 <code>ACK=1</code>，<code>SYN=1</code>，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。<font color=\"red\">这个报文也不能携带数据，但是同样要消耗一个序号。</font></li>\n<li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的<code>ACK=1</code>，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。<font color=\"red\">TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</font></li>\n<li>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。</li>\n</ol>\n<h3 id=\"为什么TCP客户端最后还要发送一次确认呢？\"><a href=\"#为什么TCP客户端最后还要发送一次确认呢？\" class=\"headerlink\" title=\"为什么TCP客户端最后还要发送一次确认呢？\"></a>为什么TCP客户端最后还要发送一次确认呢？</h3><p>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p>\n<p>如果使用的是两次握手建立连接，假设有这样一种场景，<font color=\"blue\">客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，</font>由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<font color=\"blue\">此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</font></p>\n<p>如果采用的是三次握手，就算是<font color=\"green\">那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。</font>由于服务器收不到确认，就知道客户端并没有请求连接。</p>\n<blockquote>\n<p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。tcp四次挥手如图：</p>\n</blockquote>\n<p><img src=\"/blog/dist/2019/01/02/tcp/img2.png\" alt=\"img text\"></p>\n<ol>\n<li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <font color=\"red\" face=\"黑体\">TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</font></li>\n<li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<font color=\"red\" face=\"黑体\">TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。</font><font color=\"blue\">这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</font></li>\n<li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<font color=\"red\">（在这之前还需要接受服务器发送的最后的数据）。</font></li>\n<li>01服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li>\n<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<font color=\"red\">注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</font></li>\n<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<font color=\"red\">可以看到，服务器结束TCP连接的时间要比客户端早一些。</font></li>\n</ol>\n<h3 id=\"为什么客户端最后还要等待2MSL？\"><a href=\"#为什么客户端最后还要等待2MSL？\" class=\"headerlink\" title=\"为什么客户端最后还要等待2MSL？\"></a>为什么客户端最后还要等待2MSL？</h3><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</p>\n<p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，<font color=\"blue\">站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，</font>而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p>\n<p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>\n<p>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p>\n<p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 </p>\n<p>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>\n<h3 id=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"><a href=\"#如果已经建立了连接，但是客户端突然出现故障了怎么办？\" class=\"headerlink\" title=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h3><p>TCP还设有一个<code>保活计时器</code>，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，<font color=\"blue\">时间通常是设置为2小时</font>，若两小时还没有收到客户端的任何数据，服务器就会发送一个<font color=\"blue\">探测报文段，以后每隔75秒发送一次</font>。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TCP三次握手四次挥手\"><a href=\"#TCP三次握手四次挥手\" class=\"headerlink\" title=\"TCP三次握手四次挥手\"></a>TCP三次握手四次挥手</h2><h3 id=\"TCP的状态-SYN-FIN-ACK-PSH-RST-URG\"><a href=\"#TCP的状态-SYN-FIN-ACK-PSH-RST-URG\" class=\"headerlink\" title=\"TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\"></a>TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)</h3><blockquote>\n<p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>\n<p>其中，对于我们日常的分析有用的就是前面的五个字段。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYN表示建立连接，</span><br><span class=\"line\"></span><br><span class=\"line\">FIN表示关闭连接，</span><br><span class=\"line\"></span><br><span class=\"line\">ACK表示响应，</span><br><span class=\"line\"></span><br><span class=\"line\">PSH表示有 DATA数据传输，</span><br><span class=\"line\"></span><br><span class=\"line\">RST表示连接重置。</span><br></pre></td></tr></table></figure>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，</p>\n<p>如果只是单个的一个SYN，它表示的只是建立连接。</p>\n<p>TCP的几次握手就是通过这样的ACK表现出来的。</p>\n<p>但<code>SYN</code>与<code>FIN</code>是不会同时为1的，因为前者表示的是<code>建立连接</code>，而后者表示的是<code>断开连接</code>。</p>\n<p>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。</p>\n<p> 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>\n<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。</p>\n<p>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<p>概念补充-TCP三次握手：</p>\n<p>TCP(Transmission Control Protocol)传输控制协议</p>\n<p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：</p>\n<p><code>SYN</code>(synchronous建立联机) </p>\n<p><code>ACK</code>(acknowledgement 确认) </p>\n<p><code>PSH</code>(push传送) </p>\n<p><code>FIN</code>(finish结束) </p>\n<p><code>RST</code>(reset重置) </p>\n<p><code>URG</code>(urgent紧急)</p>\n<p><code>Sequence number</code>(顺序号码，用小写<code>seq</code>代替) </p>\n<p><code>Acknowledge number</code>(确认号码，用小写<code>ack</code>代替)</p>\n<h3 id=\"TCP连接的建立（三次握手）\"><a href=\"#TCP连接的建立（三次握手）\" class=\"headerlink\" title=\"TCP连接的建立（三次握手）\"></a>TCP连接的建立（三次握手）</h3><blockquote>\n<p>TCP三次握手如图：</p>\n</blockquote>\n<p><img src=\"/blog/dist/2019/01/02/tcp/img1.png\" alt=\"img text\"></p>\n<ol>\n<li>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；</li>\n<li>TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位<code>SYN=1</code>，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。<font color=\"red\">TCP规定，SYN报文段（<code>SYN=1</code>的报文段）不能携带数据，但需要消耗掉一个序号。</font></li>\n<li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 <code>ACK=1</code>，<code>SYN=1</code>，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。<font color=\"red\">这个报文也不能携带数据，但是同样要消耗一个序号。</font></li>\n<li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的<code>ACK=1</code>，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。<font color=\"red\">TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</font></li>\n<li>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。</li>\n</ol>\n<h3 id=\"为什么TCP客户端最后还要发送一次确认呢？\"><a href=\"#为什么TCP客户端最后还要发送一次确认呢？\" class=\"headerlink\" title=\"为什么TCP客户端最后还要发送一次确认呢？\"></a>为什么TCP客户端最后还要发送一次确认呢？</h3><p>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p>\n<p>如果使用的是两次握手建立连接，假设有这样一种场景，<font color=\"blue\">客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，</font>由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<font color=\"blue\">此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</font></p>\n<p>如果采用的是三次握手，就算是<font color=\"green\">那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。</font>由于服务器收不到确认，就知道客户端并没有请求连接。</p>\n<blockquote>\n<p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。tcp四次挥手如图：</p>\n</blockquote>\n<p><img src=\"/blog/dist/2019/01/02/tcp/img2.png\" alt=\"img text\"></p>\n<ol>\n<li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <font color=\"red\" face=\"黑体\">TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</font></li>\n<li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<font color=\"red\" face=\"黑体\">TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。</font><font color=\"blue\">这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</font></li>\n<li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<font color=\"red\">（在这之前还需要接受服务器发送的最后的数据）。</font></li>\n<li>01服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li>\n<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<font color=\"red\">注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</font></li>\n<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<font color=\"red\">可以看到，服务器结束TCP连接的时间要比客户端早一些。</font></li>\n</ol>\n<h3 id=\"为什么客户端最后还要等待2MSL？\"><a href=\"#为什么客户端最后还要等待2MSL？\" class=\"headerlink\" title=\"为什么客户端最后还要等待2MSL？\"></a>为什么客户端最后还要等待2MSL？</h3><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</p>\n<p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，<font color=\"blue\">站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，</font>而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p>\n<p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>\n<p>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p>\n<p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 </p>\n<p>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>\n<h3 id=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"><a href=\"#如果已经建立了连接，但是客户端突然出现故障了怎么办？\" class=\"headerlink\" title=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h3><p>TCP还设有一个<code>保活计时器</code>，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，<font color=\"blue\">时间通常是设置为2小时</font>，若两小时还没有收到客户端的任何数据，服务器就会发送一个<font color=\"blue\">探测报文段，以后每隔75秒发送一次</font>。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>\n"},{"title":"webdriverio-cucumber","date":"2020-10-19T16:14:41.000Z","_content":"\n# webdriverIO-cucumber\n\n[博客地址](https://github.com/dangchaofeng/webdriverIO-cucumber) 【直接下载，`npm install` ， `npm run test` 即可快速开始进入demo code】\n> 本用例使用的是webdriverIo基本的cli架构，然后自定义使用cucumber来进行e2e的语法定义以及文档输出。\n\n- 开场提示： \n  - 对node有版本要求， 10.14.0+\n  - 如果chromDriver下载失败，可能就需要翻墙了\n  - 案例中的网址，是需要翻墙才能访问的\n\n- [webdriverio参考](https://webdriver.io/docs/gettingstarted.html)\n- [cucumber基本语法入门](https://www.jianshu.com/p/3857f2c3a8d4)\n- `Expect `强烈建议使用webdriverio内置的，不需要额外加载chai的断言库，因为这是e2e基于浏览器的实现，很多基于DOM操作的内容，使用内置的更加方便合理，使用chai反而增加了复杂度\n- 为何不使用selenium-standalone-service\n  - 其一：个人学习使用的话，本地基于chromedriver浏览器足以\n  - 其二：selenium-standalone-service 启动的时候，会比webdriver卡很多(也有可能是本人电脑配置过低导致，但总体来说，个人练习足够)\n- 什么时候使用selenium-standalone-service\n  - 当你真正项目中使用e2e的时候，selenium-standalone提供良好浏览器的支持。\n    - [ChromeDriver](https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver)\n    - [FirefoxDriver](https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver)\n    - [IEDriver](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)\n    - [Edge WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads)\n    - [Chromium Edge WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads)\n- 你也可以根据公司的实际需求使用其他的service,eg: `sauce` \n\n- 为什么使用cucumber\n\n  - 来看看最最简单的实用语法示例\n\n    ```feature\n    Feature: Login Feature\n    \n        Scenario: My Login application\n    \n            Given I open my loginpage\n            When I login into my account\n            Then Something is exit\n    ```\n\n  - 上面可以看出，语法的三大要素很明确\n\n    - Given 给定一个初始场景\n    - When 给定一个条件\n    - Then 开始进行结果断言\n\n  - 这就是理由！","source":"_posts/webdriverio-cucumber.md","raw":"---\ntitle: webdriverio-cucumber\ndate: 2020-10-20 00:14:41\ntags:\n- e2e\n- webdriverio\n- cucumber\ncategories:\n- e2e\n- webdriverio\n- cucumber\n---\n\n# webdriverIO-cucumber\n\n[博客地址](https://github.com/dangchaofeng/webdriverIO-cucumber) 【直接下载，`npm install` ， `npm run test` 即可快速开始进入demo code】\n> 本用例使用的是webdriverIo基本的cli架构，然后自定义使用cucumber来进行e2e的语法定义以及文档输出。\n\n- 开场提示： \n  - 对node有版本要求， 10.14.0+\n  - 如果chromDriver下载失败，可能就需要翻墙了\n  - 案例中的网址，是需要翻墙才能访问的\n\n- [webdriverio参考](https://webdriver.io/docs/gettingstarted.html)\n- [cucumber基本语法入门](https://www.jianshu.com/p/3857f2c3a8d4)\n- `Expect `强烈建议使用webdriverio内置的，不需要额外加载chai的断言库，因为这是e2e基于浏览器的实现，很多基于DOM操作的内容，使用内置的更加方便合理，使用chai反而增加了复杂度\n- 为何不使用selenium-standalone-service\n  - 其一：个人学习使用的话，本地基于chromedriver浏览器足以\n  - 其二：selenium-standalone-service 启动的时候，会比webdriver卡很多(也有可能是本人电脑配置过低导致，但总体来说，个人练习足够)\n- 什么时候使用selenium-standalone-service\n  - 当你真正项目中使用e2e的时候，selenium-standalone提供良好浏览器的支持。\n    - [ChromeDriver](https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver)\n    - [FirefoxDriver](https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver)\n    - [IEDriver](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)\n    - [Edge WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads)\n    - [Chromium Edge WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads)\n- 你也可以根据公司的实际需求使用其他的service,eg: `sauce` \n\n- 为什么使用cucumber\n\n  - 来看看最最简单的实用语法示例\n\n    ```feature\n    Feature: Login Feature\n    \n        Scenario: My Login application\n    \n            Given I open my loginpage\n            When I login into my account\n            Then Something is exit\n    ```\n\n  - 上面可以看出，语法的三大要素很明确\n\n    - Given 给定一个初始场景\n    - When 给定一个条件\n    - Then 开始进行结果断言\n\n  - 这就是理由！","slug":"webdriverio-cucumber","published":1,"updated":"2021-01-15T02:39:36.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmbs3qci0010h0nh8mlylgyc","content":"<h1 id=\"webdriverIO-cucumber\"><a href=\"#webdriverIO-cucumber\" class=\"headerlink\" title=\"webdriverIO-cucumber\"></a>webdriverIO-cucumber</h1><p><a href=\"https://github.com/dangchaofeng/webdriverIO-cucumber\" target=\"_blank\" rel=\"noopener\">博客地址</a> 【直接下载，<code>npm install</code> ， <code>npm run test</code> 即可快速开始进入demo code】</p>\n<blockquote>\n<p>本用例使用的是webdriverIo基本的cli架构，然后自定义使用cucumber来进行e2e的语法定义以及文档输出。</p>\n</blockquote>\n<ul>\n<li><p>开场提示： </p>\n<ul>\n<li>对node有版本要求， 10.14.0+</li>\n<li>如果chromDriver下载失败，可能就需要翻墙了</li>\n<li>案例中的网址，是需要翻墙才能访问的</li>\n</ul>\n</li>\n<li><p><a href=\"https://webdriver.io/docs/gettingstarted.html\" target=\"_blank\" rel=\"noopener\">webdriverio参考</a></p>\n</li>\n<li><a href=\"https://www.jianshu.com/p/3857f2c3a8d4\" target=\"_blank\" rel=\"noopener\">cucumber基本语法入门</a></li>\n<li><code>Expect</code>强烈建议使用webdriverio内置的，不需要额外加载chai的断言库，因为这是e2e基于浏览器的实现，很多基于DOM操作的内容，使用内置的更加方便合理，使用chai反而增加了复杂度</li>\n<li>为何不使用selenium-standalone-service<ul>\n<li>其一：个人学习使用的话，本地基于chromedriver浏览器足以</li>\n<li>其二：selenium-standalone-service 启动的时候，会比webdriver卡很多(也有可能是本人电脑配置过低导致，但总体来说，个人练习足够)</li>\n</ul>\n</li>\n<li>什么时候使用selenium-standalone-service<ul>\n<li>当你真正项目中使用e2e的时候，selenium-standalone提供良好浏览器的支持。<ul>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver\" target=\"_blank\" rel=\"noopener\">ChromeDriver</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver\" target=\"_blank\" rel=\"noopener\">FirefoxDriver</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver\" target=\"_blank\" rel=\"noopener\">IEDriver</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads\" target=\"_blank\" rel=\"noopener\">Edge WebDriver</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads\" target=\"_blank\" rel=\"noopener\">Chromium Edge WebDriver</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>你也可以根据公司的实际需求使用其他的service,eg: <code>sauce</code> </p>\n</li>\n<li><p>为什么使用cucumber</p>\n<ul>\n<li><p>来看看最最简单的实用语法示例</p>\n<figure class=\"highlight feature\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Feature</span>: Login <span class=\"keyword\">Feature</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Scenario</span>: My Login application</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">Given</span> I open my loginpage</span><br><span class=\"line\">        <span class=\"keyword\">When</span> I login into my account</span><br><span class=\"line\">        <span class=\"keyword\">Then</span> Something is exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上面可以看出，语法的三大要素很明确</p>\n<ul>\n<li>Given 给定一个初始场景</li>\n<li>When 给定一个条件</li>\n<li>Then 开始进行结果断言</li>\n</ul>\n</li>\n<li><p>这就是理由！</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webdriverIO-cucumber\"><a href=\"#webdriverIO-cucumber\" class=\"headerlink\" title=\"webdriverIO-cucumber\"></a>webdriverIO-cucumber</h1><p><a href=\"https://github.com/dangchaofeng/webdriverIO-cucumber\" target=\"_blank\" rel=\"noopener\">博客地址</a> 【直接下载，<code>npm install</code> ， <code>npm run test</code> 即可快速开始进入demo code】</p>\n<blockquote>\n<p>本用例使用的是webdriverIo基本的cli架构，然后自定义使用cucumber来进行e2e的语法定义以及文档输出。</p>\n</blockquote>\n<ul>\n<li><p>开场提示： </p>\n<ul>\n<li>对node有版本要求， 10.14.0+</li>\n<li>如果chromDriver下载失败，可能就需要翻墙了</li>\n<li>案例中的网址，是需要翻墙才能访问的</li>\n</ul>\n</li>\n<li><p><a href=\"https://webdriver.io/docs/gettingstarted.html\" target=\"_blank\" rel=\"noopener\">webdriverio参考</a></p>\n</li>\n<li><a href=\"https://www.jianshu.com/p/3857f2c3a8d4\" target=\"_blank\" rel=\"noopener\">cucumber基本语法入门</a></li>\n<li><code>Expect</code>强烈建议使用webdriverio内置的，不需要额外加载chai的断言库，因为这是e2e基于浏览器的实现，很多基于DOM操作的内容，使用内置的更加方便合理，使用chai反而增加了复杂度</li>\n<li>为何不使用selenium-standalone-service<ul>\n<li>其一：个人学习使用的话，本地基于chromedriver浏览器足以</li>\n<li>其二：selenium-standalone-service 启动的时候，会比webdriver卡很多(也有可能是本人电脑配置过低导致，但总体来说，个人练习足够)</li>\n</ul>\n</li>\n<li>什么时候使用selenium-standalone-service<ul>\n<li>当你真正项目中使用e2e的时候，selenium-standalone提供良好浏览器的支持。<ul>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver\" target=\"_blank\" rel=\"noopener\">ChromeDriver</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver\" target=\"_blank\" rel=\"noopener\">FirefoxDriver</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver\" target=\"_blank\" rel=\"noopener\">IEDriver</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads\" target=\"_blank\" rel=\"noopener\">Edge WebDriver</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads\" target=\"_blank\" rel=\"noopener\">Chromium Edge WebDriver</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>你也可以根据公司的实际需求使用其他的service,eg: <code>sauce</code> </p>\n</li>\n<li><p>为什么使用cucumber</p>\n<ul>\n<li><p>来看看最最简单的实用语法示例</p>\n<figure class=\"highlight feature\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Feature</span>: Login <span class=\"keyword\">Feature</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Scenario</span>: My Login application</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">Given</span> I open my loginpage</span><br><span class=\"line\">        <span class=\"keyword\">When</span> I login into my account</span><br><span class=\"line\">        <span class=\"keyword\">Then</span> Something is exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上面可以看出，语法的三大要素很明确</p>\n<ul>\n<li>Given 给定一个初始场景</li>\n<li>When 给定一个条件</li>\n<li>Then 开始进行结果断言</li>\n</ul>\n</li>\n<li><p>这就是理由！</p>\n</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/es6Class/laugh.mp4","slug":"laugh.mp4","post":"ckmbs3qam0008h0nhx9duv6ik","modified":1,"renderable":0},{"_id":"source/_posts/tcp/img1.png","post":"ckmbs3qcd000yh0nhakmi6k3u","slug":"img1.png","modified":1,"renderable":1},{"_id":"source/_posts/tcp/img2.png","post":"ckmbs3qcd000yh0nhakmi6k3u","slug":"img2.png","modified":1,"renderable":1},{"_id":"source/_posts/no-network-linux-install-nodeJs/img1.jpg","post":"ckmbs3qbm000mh0nhhlan7m5z","slug":"img1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/no-network-linux-install-nodeJs/img2.jpg","post":"ckmbs3qbm000mh0nhhlan7m5z","slug":"img2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/no-network-linux-install-nodeJs/img3.jpg","post":"ckmbs3qbm000mh0nhhlan7m5z","slug":"img3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/no-network-linux-install-nodeJs/img4.jpg","post":"ckmbs3qbm000mh0nhhlan7m5z","slug":"img4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/no-network-linux-install-nodeJs/img5.jpg","post":"ckmbs3qbm000mh0nhhlan7m5z","slug":"img5.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckmbs3q9x0002h0nhvk4b1a2g","category_id":"ckmbs3qap0009h0nhpaxl0mu3","_id":"ckmbs3qbi000jh0nhmkd2owkj"},{"post_id":"ckmbs3qaj0007h0nhuubv8ddi","category_id":"ckmbs3qbj000kh0nhcsxlei6g","_id":"ckmbs3qc5000th0nh5kc4tu3l"},{"post_id":"ckmbs3q9h0000h0nhqyq2131k","category_id":"ckmbs3qa70004h0nh7l0u3djf","_id":"ckmbs3qck0011h0nhcq8de5qu"},{"post_id":"ckmbs3q9h0000h0nhqyq2131k","category_id":"ckmbs3qbv000ph0nhjp9j05ix","_id":"ckmbs3qcn0014h0nhtkq8w0a9"},{"post_id":"ckmbs3qas000bh0nh21rog7wn","category_id":"ckmbs3qcl0012h0nh4t5z2se5","_id":"ckmbs3qcs0018h0nhxl4ezz7i"},{"post_id":"ckmbs3qay000ch0nhp3ypyp21","category_id":"ckmbs3qcp0016h0nhg39aeam1","_id":"ckmbs3qcx001dh0nhij0mihua"},{"post_id":"ckmbs3qae0006h0nh5w98yt4p","category_id":"ckmbs3qb2000dh0nhrw6iluwr","_id":"ckmbs3qd3001hh0nh18smotd5"},{"post_id":"ckmbs3qae0006h0nh5w98yt4p","category_id":"ckmbs3qct0019h0nhfjnwtbs5","_id":"ckmbs3qd6001kh0nh9c2pwkwd"},{"post_id":"ckmbs3qbe000hh0nhk1d4qt17","category_id":"ckmbs3qcy001eh0nhcmbsmerw","_id":"ckmbs3qd9001mh0nhm0z7k2vo"},{"post_id":"ckmbs3qbs000oh0nhaoxqy9pt","category_id":"ckmbs3qd9001nh0nhptd1hokj","_id":"ckmbs3qdi001uh0nhxcjgdkvg"},{"post_id":"ckmbs3qc7000uh0nhuzgqaglm","category_id":"ckmbs3qdm001yh0nhngdw5whi","_id":"ckmbs3qdv0024h0nhbsnm56v6"},{"post_id":"ckmbs3qcd000yh0nhakmi6k3u","category_id":"ckmbs3qdp0020h0nhimt2lcdt","_id":"ckmbs3qdy0027h0nhyvrhrdm9"},{"post_id":"ckmbs3qam0008h0nhx9duv6ik","category_id":"ckmbs3qc9000vh0nh7n3p3jfq","_id":"ckmbs3qe2002ah0nhaex8wfu0"},{"post_id":"ckmbs3qam0008h0nhx9duv6ik","category_id":"ckmbs3qdv0025h0nhxlhgktht","_id":"ckmbs3qe5002dh0nhhj63u757"},{"post_id":"ckmbs3qbm000mh0nhhlan7m5z","category_id":"ckmbs3qd4001ih0nhndijklj6","_id":"ckmbs3qec002kh0nhaq0k1e2y"},{"post_id":"ckmbs3qbm000mh0nhhlan7m5z","category_id":"ckmbs3qe3002bh0nhi89xqunh","_id":"ckmbs3qei002nh0nhivskth8u"},{"post_id":"ckmbs3qby000rh0nhkzdzkoch","category_id":"ckmbs3qdd001qh0nh3yfn3k3q","_id":"ckmbs3qel002ph0nhasa7c3wj"},{"post_id":"ckmbs3qby000rh0nhkzdzkoch","category_id":"ckmbs3qe8002gh0nh2efnjwp7","_id":"ckmbs3qep002sh0nh1cb3g34n"},{"post_id":"ckmbs3qc1000sh0nhrmnit2hy","category_id":"ckmbs3qdi001vh0nhrw1mvnmn","_id":"ckmbs3qew002yh0nhc193dk4p"},{"post_id":"ckmbs3qc1000sh0nhrmnit2hy","category_id":"ckmbs3qed002lh0nhswt7uffc","_id":"ckmbs3qez0030h0nhyni6w6x8"},{"post_id":"ckmbs3qc1000sh0nhrmnit2hy","category_id":"ckmbs3qes002uh0nhgics7u6p","_id":"ckmbs3qf00031h0nhksnunmjf"},{"post_id":"ckmbs3qci0010h0nh8mlylgyc","category_id":"ckmbs3qdz0028h0nhzhgec3cv","_id":"ckmbs3qf10032h0nh45f760zr"},{"post_id":"ckmbs3qci0010h0nh8mlylgyc","category_id":"ckmbs3qeo002rh0nhxmfn38zf","_id":"ckmbs3qf20033h0nhc6zar4za"},{"post_id":"ckmbs3qci0010h0nh8mlylgyc","category_id":"ckmbs3qet002vh0nh0x2prdmi","_id":"ckmbs3qf20034h0nho65oae0n"}],"PostTag":[{"post_id":"ckmbs3q9h0000h0nhqyq2131k","tag_id":"ckmbs3qac0005h0nhcjbpxdxx","_id":"ckmbs3qba000gh0nhbkr3c2i9"},{"post_id":"ckmbs3q9h0000h0nhqyq2131k","tag_id":"ckmbs3qaq000ah0nho4geisyu","_id":"ckmbs3qbh000ih0nh992xft7a"},{"post_id":"ckmbs3q9x0002h0nhvk4b1a2g","tag_id":"ckmbs3qb4000eh0nhh6fbjg6u","_id":"ckmbs3qbq000nh0nh43fv2sgx"},{"post_id":"ckmbs3qae0006h0nh5w98yt4p","tag_id":"ckmbs3qbk000lh0nh4r3diffo","_id":"ckmbs3qcc000xh0nhhneiy3x2"},{"post_id":"ckmbs3qae0006h0nh5w98yt4p","tag_id":"ckmbs3qbw000qh0nhwjiz0opf","_id":"ckmbs3qcg000zh0nha4n7iga4"},{"post_id":"ckmbs3qaj0007h0nhuubv8ddi","tag_id":"ckmbs3qcb000wh0nhhtd6v3m8","_id":"ckmbs3qco0015h0nhffow9hio"},{"post_id":"ckmbs3qam0008h0nhx9duv6ik","tag_id":"ckmbs3qcm0013h0nhjynwh141","_id":"ckmbs3qcv001bh0nhyz840iti"},{"post_id":"ckmbs3qam0008h0nhx9duv6ik","tag_id":"ckmbs3qcq0017h0nh61ggsndy","_id":"ckmbs3qcx001ch0nh06wylb39"},{"post_id":"ckmbs3qas000bh0nh21rog7wn","tag_id":"ckmbs3qcu001ah0nhyl3m3xfe","_id":"ckmbs3qd1001gh0nh9j6uzgm6"},{"post_id":"ckmbs3qay000ch0nhp3ypyp21","tag_id":"ckmbs3qd0001fh0nhx04csydu","_id":"ckmbs3qd7001lh0nh3ronbe30"},{"post_id":"ckmbs3qbe000hh0nhk1d4qt17","tag_id":"ckmbs3qd5001jh0nhszzdx4c8","_id":"ckmbs3qdc001ph0nhgsltarai"},{"post_id":"ckmbs3qbm000mh0nhhlan7m5z","tag_id":"ckmbs3qda001oh0nh6d0rsuf4","_id":"ckmbs3qdf001sh0nhahhtigxx"},{"post_id":"ckmbs3qbm000mh0nhhlan7m5z","tag_id":"ckmbs3qac0005h0nhcjbpxdxx","_id":"ckmbs3qdh001th0nho8o0gnbd"},{"post_id":"ckmbs3qbs000oh0nhaoxqy9pt","tag_id":"ckmbs3qde001rh0nhjaz2nqeb","_id":"ckmbs3qdl001xh0nhw2cweu55"},{"post_id":"ckmbs3qby000rh0nhkzdzkoch","tag_id":"ckmbs3qdj001wh0nhmfwwzzt1","_id":"ckmbs3qds0022h0nhpa50qrmv"},{"post_id":"ckmbs3qby000rh0nhkzdzkoch","tag_id":"ckmbs3qdn001zh0nhgm1zk216","_id":"ckmbs3qdt0023h0nh4o8jsgl3"},{"post_id":"ckmbs3qc1000sh0nhrmnit2hy","tag_id":"ckmbs3qdq0021h0nhe54hyb3e","_id":"ckmbs3qe6002eh0nheu3phpfo"},{"post_id":"ckmbs3qc1000sh0nhrmnit2hy","tag_id":"ckmbs3qdw0026h0nhoqb2b1az","_id":"ckmbs3qe7002fh0nhlitsqt5e"},{"post_id":"ckmbs3qc1000sh0nhrmnit2hy","tag_id":"ckmbs3qe00029h0nhmroqfq1u","_id":"ckmbs3qea002ih0nhkhxgkzw6"},{"post_id":"ckmbs3qc7000uh0nhuzgqaglm","tag_id":"ckmbs3qe3002ch0nhtgtfyvhf","_id":"ckmbs3qeb002jh0nh2t9w595j"},{"post_id":"ckmbs3qcd000yh0nhakmi6k3u","tag_id":"ckmbs3qe9002hh0nhvwf36uo6","_id":"ckmbs3qej002oh0nhzrg7jarf"},{"post_id":"ckmbs3qci0010h0nh8mlylgyc","tag_id":"ckmbs3qde001rh0nhjaz2nqeb","_id":"ckmbs3qeu002wh0nhqqe8srrj"},{"post_id":"ckmbs3qci0010h0nh8mlylgyc","tag_id":"ckmbs3qem002qh0nh3ljltopx","_id":"ckmbs3qew002xh0nhjajp38ei"},{"post_id":"ckmbs3qci0010h0nh8mlylgyc","tag_id":"ckmbs3qer002th0nh9zykcg5n","_id":"ckmbs3qey002zh0nhotgdcuu7"}],"Tag":[{"name":"node","_id":"ckmbs3qac0005h0nhcjbpxdxx"},{"name":"koa","_id":"ckmbs3qaq000ah0nho4geisyu"},{"name":"TDD","_id":"ckmbs3qb4000eh0nhh6fbjg6u"},{"name":"axios","_id":"ckmbs3qbk000lh0nh4r3diffo"},{"name":"catch","_id":"ckmbs3qbw000qh0nhwjiz0opf"},{"name":"desgin-patterns","_id":"ckmbs3qcb000wh0nhhtd6v3m8"},{"name":"class","_id":"ckmbs3qcm0013h0nhjynwh141"},{"name":"prototype","_id":"ckmbs3qcq0017h0nh61ggsndy"},{"name":"git","_id":"ckmbs3qcu001ah0nhyl3m3xfe"},{"name":"自动化构建","_id":"ckmbs3qd0001fh0nhx04csydu"},{"name":"mocha","_id":"ckmbs3qd5001jh0nhszzdx4c8"},{"name":"linux","_id":"ckmbs3qda001oh0nh6d0rsuf4"},{"name":"e2e","_id":"ckmbs3qde001rh0nhjaz2nqeb"},{"name":"promise","_id":"ckmbs3qdj001wh0nhmfwwzzt1"},{"name":"javascript","_id":"ckmbs3qdn001zh0nhgm1zk216"},{"name":"vue","_id":"ckmbs3qdq0021h0nhe54hyb3e"},{"name":"数据劫持","_id":"ckmbs3qdw0026h0nhoqb2b1az"},{"name":"发布订阅","_id":"ckmbs3qe00029h0nhmroqfq1u"},{"name":"npm","_id":"ckmbs3qe3002ch0nhtgtfyvhf"},{"name":"tcp连接、断开连接","_id":"ckmbs3qe9002hh0nhvwf36uo6"},{"name":"webdriverio","_id":"ckmbs3qem002qh0nh3ljltopx"},{"name":"cucumber","_id":"ckmbs3qer002th0nh9zykcg5n"}]}}