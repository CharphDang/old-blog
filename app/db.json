{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/leancloud.memo","path":"leancloud.memo","modified":0,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":0}],"Cache":[{"_id":"source/leancloud.memo","hash":"22f096c59ff1d534cdf9345527ecfcf2c6c51db1","modified":1610111222307},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1610111222309},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1610111222309},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1610111222309},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1610111222309},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1610111222314},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1610111222310},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1610111222314},{"_id":"themes/next/bower.json","hash":"1c22c2003163799cb919f8e9dc1e3d20bd79151d","modified":1610111222316},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1610111222315},{"_id":"themes/next/README.md","hash":"b4f780a96b0e5d3737eb93bc00da6de91f042c4b","modified":1610111222315},{"_id":"themes/next/_config.yml","hash":"b9296e7993d3a2963aef02d5abce30a634a74e34","modified":1610111222316},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1610111222317},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1610111222328},{"_id":"themes/next/package.json","hash":"f86ddeeddc0b5c6aff7de1e0101b1f64e7f29476","modified":1610111222369},{"_id":"source/_posts/English.md","hash":"b6dcc3c75aec69a1892d7d421221dfabe043a275","modified":1610111222264},{"_id":"source/_posts/Koa.md","hash":"46a6a254f9fc2f1bab8325657c361c89d9867fbd","modified":1610111222271},{"_id":"source/_posts/English2.md","hash":"bf6fee9aa510b812d05c24efb8e2d69657162adf","modified":1610111222265},{"_id":"source/_posts/English3.md","hash":"cf42f2e76761f1705054be023f9b1c00faf2a59c","modified":1610111222271},{"_id":"source/_posts/TDD.md","hash":"cdd941b0f46dc599f5e984fce1909ef8663a609e","modified":1610111222272},{"_id":"source/_posts/design-patterns.md","hash":"a4d9d8a1e4f8a1e793b7674b13f546c6edb893d1","modified":1610111222273},{"_id":"source/_posts/es6Class.md","hash":"9de45abd5627fb15598e09c49f34f357ec9b1c6a","modified":1610111222273},{"_id":"source/_posts/gitCommand.md","hash":"d21028acbb8444fbfb6118c9dbc088fda27d855d","modified":1610111222285},{"_id":"source/_posts/grunt.md","hash":"7196c3deb1de1768cc00d917a1e35082537875fe","modified":1610111222286},{"_id":"source/_posts/mocha.md","hash":"d4676cbbc15bce294515abe6f3ba476b688ac52f","modified":1610111222291},{"_id":"source/_posts/protractor.md","hash":"1f7eb6a3815eaa20e695f8eaa7cd76267e20fd6d","modified":1610111222302},{"_id":"source/_posts/no-network-linux-install-nodeJs.md","hash":"48d3f488570443f16eb3595d9da4d24a53bba00a","modified":1610111222292},{"_id":"source/_posts/vue.md","hash":"c6de233f1234db8ba5a99f31bcc09e580b43f6fa","modified":1610111222306},{"_id":"source/_posts/tcp.md","hash":"e1e7fc31f6bf946c3877bbd1f01fb3b415878388","modified":1610111222303},{"_id":"source/_posts/npm-command.md","hash":"6c97158742861ace5fa3a19294d979bad203e035","modified":1610111222301},{"_id":"source/_posts/promise.md","hash":"6d7927fb814e1ec6f419c7ad7a193432f85b228c","modified":1610111222302},{"_id":"source/_posts/webdriverio-cucumber.md","hash":"944268ec58da35b5cc3fa208ebdf650b5037010d","modified":1610111222307},{"_id":"source/categories/index.md","hash":"f3e3a36e96b173724c667c5bc01ebc029068ba31","modified":1610111222307},{"_id":"source/tags/index.md","hash":"177966acb1f88c9a05ce0ba6f7b5ba1985d8aa62","modified":1610111222308},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1610111222313},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1610111222311},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1610111222313},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1610111222311},{"_id":"themes/next/.github/stale.yml","hash":"b53006df932dcd8f1db0661bda70d176d5204f41","modified":1610111222314},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1610111222313},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1610111222318},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1610111222318},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1610111222319},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1610111222320},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1610111222319},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1610111222319},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1610111222319},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1610111222320},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1610111222320},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1610111222329},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1610111222329},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1610111222329},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1610111222330},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1610111222330},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1610111222331},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1610111222330},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1610111222331},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1610111222331},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1610111222332},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1610111222334},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1610111222332},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1610111222333},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1610111222335},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1610111222336},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1610111222336},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1610111222336},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1610111222337},{"_id":"themes/next/layout/_layout.swig","hash":"082762c79a6f1053096f8b73a921e020e02fd396","modified":1610111222339},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1610111222368},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1610111222368},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1610111222368},{"_id":"themes/next/layout/page.swig","hash":"78874eee616c4c0dd4bf0d96e4f76224a0244ac2","modified":1610111222368},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1610111222371},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1610111222369},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1610111222369},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1610111222369},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1610111222372},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1610111222428},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1610111222428},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1610111222429},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610111222408},{"_id":"source/_posts/no-network-linux-install-nodeJs/img1.jpg","hash":"0c374b2c9a42ec5c4285e7ba223b2cbede22fe55","modified":1610111222296},{"_id":"source/_posts/no-network-linux-install-nodeJs/img2.jpg","hash":"36c12ab7db7edb1c988f0a5286a95f540b2e408e","modified":1610111222297},{"_id":"source/_posts/no-network-linux-install-nodeJs/img4.jpg","hash":"eee7cab5c53a4a334156d838a8ea79c7432c4e4c","modified":1610111222299},{"_id":"source/_posts/no-network-linux-install-nodeJs/img3.jpg","hash":"511b9987351d6ed0bb1eb459f3fa80da8690bc73","modified":1610111222299},{"_id":"source/_posts/no-network-linux-install-nodeJs/img5.jpg","hash":"253cf7f9d2729a8f5924e95222c75869fcc12e41","modified":1610111222300},{"_id":"source/_posts/tcp/img2.png","hash":"ec605b22ae384a307802ae91a7bc00a89719c199","modified":1610111222306},{"_id":"source/_posts/tcp/img1.png","hash":"db73572f2a4824d0b994a70893f9ee67bdb8e7bb","modified":1610111222305},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1610111222325},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1610111222323},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1610111222324},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1610111222326},{"_id":"themes/next/docs/zh-CN/README.md","hash":"15e55eb77616500fa4c64982d6bad9ac17a46e2a","modified":1610111222328},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"8ac2f5d2a023211d8d8ea626cbf6b8dea67ac201","modified":1610111222327},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1610111222326},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1610111222326},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1610111222328},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1610111222321},{"_id":"themes/next/docs/ru/README.md","hash":"953deb732e0b3b22c423122a189d6847d908c4b8","modified":1610111222322},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1610111222321},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1610111222323},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1610111222338},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1610111222338},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1610111222338},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"cbfb2167404258a0ad61e48d15347525ebc34e13","modified":1610111222340},{"_id":"themes/next/layout/_macro/post.swig","hash":"e4d5e28bf96211818afe2bf2dd60aa4f555986fc","modified":1610111222340},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"4321a016939ba856a9ab7fac25b803acde55cddb","modified":1610111222340},{"_id":"themes/next/layout/_partials/comments.swig","hash":"dce2938bb54c3cef3319f09f2621b93bc41117a0","modified":1610111222341},{"_id":"themes/next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1610111222341},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"c0f6f02d7d7eb20eb216003c6cfb4ea52060f791","modified":1610111222342},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1610111222347},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1610111222346},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"d01881f8056203c4b6920328db8c2ae8fa662a08","modified":1610111222350},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"d66bc7ec3cc03f60fcc7d555368a5b9b010f7f11","modified":1610111222350},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0c3bb1526d71af862818e2e63ac5ba975c708ecb","modified":1610111222352},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"97704b586310b74a88aa397ab9000fc58f13a3be","modified":1610111222351},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"d359e638a86bd9664101c48e9344f21ec96e6a15","modified":1610111222361},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"bd5acdd7e243730af72851092cf242e8fece25a2","modified":1610111222357},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01056ad0e5ad73885e02244943544d7b740bc3bb","modified":1610111222361},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1610111222363},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"19f5cb569f046acf798c7640dab950fa76c46e17","modified":1610111222363},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"2a8503ef6fbc7257018121c04858b25074803013","modified":1610111222363},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1610111222364},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"98f3f2cd6c6d8e4239cd13d8cf378c8e1e9290a9","modified":1610111222364},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1610111222370},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"15582e823d228c0b2288543c1eb460c40afad29b","modified":1610111222371},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1b250c1b7945cb1029b9e855edb09854f7c8250a","modified":1610111222364},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1610111222372},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1610111222373},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1610111222373},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1610111222374},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1610111222372},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1610111222374},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1610111222374},{"_id":"themes/next/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1610111222373},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1610111222374},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1610111222409},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610111222409},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1610111222409},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1610111222408},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1610111222408},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1610111222410},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1610111222410},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1610111222410},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610111222411},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1610111222411},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1610111222411},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1610111222411},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610111222412},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1610111222412},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1610111222412},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1610111222413},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1610111222413},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1610111222413},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1610111222413},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610111222351},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610111222351},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610111222400},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610111222400},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610111222401},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610111222407},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610111222408},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"4049a29a6ea8498d6acd0060a26048b92480f3c3","modified":1610111222339},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1610111222339},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"9683906502c10b3d3abeb733ebf3749b1d63a84f","modified":1610111222343},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"58e2e153e8b67e643b24453a1e1cceaae3323647","modified":1610111222344},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1610111222343},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"c46725b73171e318c59453a0dc0921f74a507258","modified":1610111222343},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1610111222345},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"69722be16ce5eae5c027168f9b2fded4776e1b53","modified":1610111222346},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1610111222345},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1610111222345},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1610111222346},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1610111222347},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"64d65d9ad0cc94734ac6ded279e2b5dc870a1cab","modified":1610111222348},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"2f73cc9ffb63534f0b6d8f0e9ee853c1af1b1244","modified":1610111222347},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1610111222348},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1610111222348},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1610111222348},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1610111222349},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"84538342373ab866309d3da15b71de2258c254b0","modified":1610111222349},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1610111222349},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1610111222350},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1610111222350},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"c7f2855f19dfdf18aba8c58d55b7489e631ed035","modified":1610111222351},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"94e106755c5fb6f40431b621beeba0bd33877e57","modified":1610111222351},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"94e106755c5fb6f40431b621beeba0bd33877e57","modified":1610111222352},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1610111222352},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"88995dd7406963fdd413a24a57447b2f60c2a70e","modified":1610111222353},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1610111222353},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"07307f1f0e0e9858f2c7143cbdfcb2a9a92149ab","modified":1610111222353},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1610111222354},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1610111222354},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1610111222354},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1610111222354},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1610111222356},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5dbeb640707a9c91357e373b9063a48c8e78f439","modified":1610111222355},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1610111222355},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1610111222355},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1610111222356},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c4c50a646254a186413bb5e4e320af4071a8b072","modified":1610111222357},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"cbb2c3ae3908b3c2025bcdab9e8336cca8611554","modified":1610111222356},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"aea70f5ec17917b75812020d8bf2aeabd434e8bc","modified":1610111222357},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"c1b9f2d061baecafb60dae53f707595665176a93","modified":1610111222358},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"9809d63a4234c5f268ff0b489579149b849728fc","modified":1610111222360},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"682202416764f9ea6c9eeea6a08c6213f263c9f7","modified":1610111222360},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"f9c808bcbdfd17137a9fe6f16413770b7b9779d5","modified":1610111222361},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"607a60588ad3d226eb0fb50df601e2f2ff6d627c","modified":1610111222360},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1610111222362},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1610111222362},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"07b310f6d24e1e64961f4bbbac7c67c42e40e14f","modified":1610111222362},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1610111222367},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"479ed81833156a2dfdcfba6ea2669e705c007560","modified":1610111222367},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"9c9f61b7bfb3349b03b1e61355f20232044b5fd8","modified":1610111222370},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1610111222366},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1610111222367},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1610111222399},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1610111222400},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1610111222400},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1610111222400},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1610111222407},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1610111222407},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1610111222407},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f9b83d0385529e52ce7ba95ed5ed6b3d4e2419bb","modified":1610111222407},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1610111222415},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1610111222415},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1610111222414},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1610111222414},{"_id":"themes/next/source/js/src/motion.js","hash":"3acaae96da453dcd03e4cbd301d81748f86ae95a","modified":1610111222415},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1610111222416},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1610111222416},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1610111222415},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1610111222415},{"_id":"themes/next/source/js/src/utils.js","hash":"2829d742409c6167cf871fc40e4a2a2b8ac10569","modified":1610111222417},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1610111222417},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1610111222417},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1610111222418},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1610111222418},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1610111222417},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1610111222427},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1610111222427},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1610111222428},{"_id":"source/_posts/English2/img.jpg","hash":"2689744791032dac1bb8bfa3a12d6a3aef2057aa","modified":1610111222271},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1610111222423},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1610111222365},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1610111222366},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b4a2f1d031fe44452cf55ded8211cf018235073a","modified":1610111222375},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1610111222376},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1610111222376},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1610111222377},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1610111222377},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1610111222383},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1610111222390},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1610111222398},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"99d3ac36f327875ce969e3256fb817a38b73c9f0","modified":1610111222397},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1610111222396},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1610111222397},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1610111222399},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"02d138ed65060e98f20bc5b1dd59a791222b7156","modified":1610111222399},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1610111222398},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"8dfd4d744e664a97df7a96d045bcfde282ab2dff","modified":1610111222401},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1610111222401},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1610111222402},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1610111222402},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1610111222402},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1610111222402},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1610111222402},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1610111222403},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1610111222404},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1610111222404},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1610111222404},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1610111222405},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1610111222405},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"09b5054ae34ba83c0d614821e574da265af55a14","modified":1610111222405},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"215d8e943540d17bafabb14c2bf7707956b0ee92","modified":1610111222406},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1610111222406},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1610111222406},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e7afdb343f9502f433f49044e42fe347719ce330","modified":1610111222406},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1610111222406},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1610111222406},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"958f3a70ea684264f23054d37d5e744a32c2e68a","modified":1610111222416},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1610111222419},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1610111222419},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1610111222418},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1610111222424},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1610111222423},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610111222422},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610111222421},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1610111222377},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1610111222378},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1610111222378},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1610111222379},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1610111222380},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1610111222380},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1610111222379},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1610111222380},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1610111222381},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1610111222381},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1610111222382},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1610111222381},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1610111222382},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1610111222383},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1610111222382},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1610111222383},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f2911a048e5c20ca2a059bd1087d98ac1c51681c","modified":1610111222383},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"2dfa5fde3df69fba8282627e592fe637c2cbac6b","modified":1610111222380},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1610111222384},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1610111222384},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1610111222384},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1610111222384},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1610111222385},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"1cf64afd4b49143972f7617869539be3adb91a5e","modified":1610111222385},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1610111222385},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"c1262f3278e061f7665c8278f764802cffc3494f","modified":1610111222385},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1610111222386},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1610111222386},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1610111222386},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1610111222386},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1610111222387},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1610111222387},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1610111222388},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1610111222388},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1610111222388},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1610111222388},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1610111222389},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1610111222389},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1610111222389},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1610111222390},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1610111222390},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1610111222390},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1610111222391},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1610111222391},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1610111222391},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1610111222391},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1610111222392},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1610111222392},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1610111222392},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1610111222393},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1610111222393},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1610111222394},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1610111222394},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1610111222394},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"6157665b8fc26ce4635c926128ffbd831a2fdd46","modified":1610111222395},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1610111222395},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1610111222395},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1610111222396},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"d4fefad868498adff03321b9dc38e75c61e08def","modified":1610111222396},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1610111222403},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1610111222403},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1610111222405},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1610111222426},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610111222420},{"_id":"source/_posts/laugh.mp4","hash":"12631342d11ac95ebe5f3bdd58bda809d9dc3895","modified":1610111222290},{"_id":"source/_posts/es6Class/laugh.mp4","hash":"12631342d11ac95ebe5f3bdd58bda809d9dc3895","modified":1610111222284},{"_id":"public/search.xml","hash":"304266fe18f0c0f6dc7ba1075914e60a2c9305b2","modified":1610111783507},{"_id":"public/leancloud_counter_security_urls.json","hash":"d725a615bd6016e4acd2cc1dfd73f33ce19cc6b2","modified":1610111582806},{"_id":"public/categories/index.html","hash":"d8072c0aed1cc3a41d5f21939d821bf59716c167","modified":1610111783628},{"_id":"public/tags/index.html","hash":"6faf1f858bf2320ae60bf949535fb0b3a059267b","modified":1610111783628},{"_id":"public/2021/01/08/no-network-linux-install-nodeJs/index.html","hash":"947817f9efb1e25c32b1284eb2706be3f1268387","modified":1610111783628},{"_id":"public/2021/01/08/Koa/index.html","hash":"81ff8cd82ad1c519e9ce4e39af798168aad99d39","modified":1610111783628},{"_id":"public/2021/01/08/TDD/index.html","hash":"099c7548b4cb6e2673794435e0044f08f4f93661","modified":1610111783628},{"_id":"public/2021/01/07/gitCommand/index.html","hash":"2502422f9d54efae399d911bc32ad40e94cc8118","modified":1610111783628},{"_id":"public/2020/10/20/webdriverio-cucumber/index.html","hash":"c435bcc2aa962391c0d858cedff5ae61ac7bc6bf","modified":1610111783628},{"_id":"public/2020/09/21/design-patterns/index.html","hash":"9ecc1187da250e870416d6e212c9f33116ad56b3","modified":1610111783628},{"_id":"public/2020/04/04/protractor/index.html","hash":"a86ba777c5bbe40ddf9a3ada4c27cb6c8b27e9b0","modified":1610111783629},{"_id":"public/2019/08/27/grunt/index.html","hash":"20ecc5bd6afb3add776056adfa0a13bf2ad31767","modified":1610111783629},{"_id":"public/2019/03/04/es6Class/index.html","hash":"2d9404a2e04a7393506f38e3aaf7674045bb0a58","modified":1610111783629},{"_id":"public/2019/01/02/promise/index.html","hash":"d35168bbf8a410ced580a2c0cbcb4139cbb11f12","modified":1610111783630},{"_id":"public/2019/01/02/tcp/index.html","hash":"be1a8037fad51514b29a900f883c80687f4b5952","modified":1610111783630},{"_id":"public/2019/01/02/vue/index.html","hash":"a2a574a93171835924dfc126421ef2a92bcc5cee","modified":1610111783630},{"_id":"public/2018/12/29/mocha/index.html","hash":"806f17b2ebdf28fa41b11ae6c5aca09f5816113b","modified":1610111783630},{"_id":"public/2018/12/27/English3/index.html","hash":"e37b12137959ddee37b6413009c844c556465d2b","modified":1610111783630},{"_id":"public/2018/12/26/English/index.html","hash":"7ca315daa09b170f409d9aeaf33152ca55f6a5b6","modified":1610111783630},{"_id":"public/2018/12/26/English2/index.html","hash":"05b587a45a9469963a77c05cff1e81d06d66ef64","modified":1610111783630},{"_id":"public/2018/12/26/npm-command/index.html","hash":"938bba02d10abd834e3e3f00a73ef25678acebd6","modified":1610111783630},{"_id":"public/archives/index.html","hash":"e4dc0987447ba2c4e860810fa6be03237f00416a","modified":1610111783633},{"_id":"public/archives/page/2/index.html","hash":"19a6912a4eed166f751a9416b4900e585cfabcf6","modified":1610111783633},{"_id":"public/archives/2018/index.html","hash":"d141fa23d75f851d0344707f324e6501ec9a46cf","modified":1610111783633},{"_id":"public/archives/2018/12/index.html","hash":"690ca0c139ae1553394a502daf66fa86047f6632","modified":1610111783633},{"_id":"public/archives/2019/index.html","hash":"b8b0d371a92497d240a814d34ab902c394aa7a56","modified":1610111783633},{"_id":"public/archives/2019/01/index.html","hash":"dba8dcd58f016e0f840811ed4c22e28d8cb5b14e","modified":1610111783633},{"_id":"public/archives/2019/03/index.html","hash":"0b402d01f7b4220b6bab0d83691ac5d14586404f","modified":1610111783634},{"_id":"public/archives/2019/08/index.html","hash":"b971948365b5df2184e33e0b1a973f77f43388ea","modified":1610111783634},{"_id":"public/archives/2020/index.html","hash":"9ce254ad01bbecdfb1ce7e9d1dd5be2c27d2db02","modified":1610111783634},{"_id":"public/archives/2020/04/index.html","hash":"d43cf0c6b198f4b642dd7f504e1a94b0f0aa991b","modified":1610111783634},{"_id":"public/archives/2020/09/index.html","hash":"386550adc6e29769677ce2350e469410d9fea32d","modified":1610111783634},{"_id":"public/archives/2020/10/index.html","hash":"aec986e48e2e5ea2ed58fbc38b64a148a6ab1ccd","modified":1610111783635},{"_id":"public/archives/2021/index.html","hash":"366307313dd25581ae6fa73be30b9fa76e5686d3","modified":1610111783635},{"_id":"public/archives/2021/01/index.html","hash":"d7d668bc4ef1cd435c23bb444b08d33003aa26cf","modified":1610111783635},{"_id":"public/categories/English/index.html","hash":"6b15273f94a418358186202c7965228a01825c49","modified":1610111783631},{"_id":"public/categories/node/index.html","hash":"c0709ba5c178a0343fb01d2b8ec077ad7df518cc","modified":1610111783631},{"_id":"public/categories/TDD/index.html","hash":"dcdd3c32626039a8b856fc5f399e3f18575e0c10","modified":1610111783631},{"_id":"public/categories/desgin-patterns/index.html","hash":"56a135e6819ae3a4ce4b2697eca5bcb017044a3e","modified":1610111783631},{"_id":"public/categories/node/koa/index.html","hash":"66dc6fed5713e7da869f59f43b77f3383bc7ff96","modified":1610111783631},{"_id":"public/categories/class/index.html","hash":"022558008693f65553405d4bdb8e2d09cc3ccf5b","modified":1610111783631},{"_id":"public/categories/git/index.html","hash":"572102e236fc23d0b9e5ec22522fc942f0470b12","modified":1610111783631},{"_id":"public/categories/自动化构建/index.html","hash":"0b337ff2fa78dc4e5ed12519d07693a029983357","modified":1610111783631},{"_id":"public/categories/mocha/index.html","hash":"35c19a3f2cb6805450104539dd15c8069cc57390","modified":1610111783631},{"_id":"public/categories/class/prototype/index.html","hash":"6463dd124e7695a48d54e9f7951d83cdfeea4921","modified":1610111783631},{"_id":"public/categories/protractor/index.html","hash":"451420489788a0bb904583a2fdd5b30c9017b5e1","modified":1610111783631},{"_id":"public/categories/linux/index.html","hash":"0d69d680bb1c5cc3ad313d41709e869e7ff66973","modified":1610111783631},{"_id":"public/categories/vue/index.html","hash":"c27ead36765a991d12189bbf15ff44db98856a00","modified":1610111783631},{"_id":"public/categories/tcp连接、断开连接/index.html","hash":"a7f453430177d35304fbe71f9d860d08a8a2828d","modified":1610111783631},{"_id":"public/categories/npm/index.html","hash":"d4bee038f573eed45e93afdb1dd08d2937fc369b","modified":1610111783632},{"_id":"public/categories/promise/index.html","hash":"49a103adf93973bf2be8fe34efc538dbf48e6f9d","modified":1610111783632},{"_id":"public/categories/linux/node/index.html","hash":"899fef79de8c4fedefb977a8da16dc4bd0e7149b","modified":1610111783632},{"_id":"public/categories/e2e/index.html","hash":"3a29515fc5e5359a8451c0325aef75f5f117adfa","modified":1610111783632},{"_id":"public/categories/vue/数据劫持/index.html","hash":"6d0421960b64717bfe9b4d92a2725ab0bf261751","modified":1610111783632},{"_id":"public/categories/promise/javascript/index.html","hash":"39e7e4aeccd517837965186822b29fc654f98860","modified":1610111783632},{"_id":"public/categories/e2e/webdriverio/index.html","hash":"569e99138c70cccc33363f70d747903224fd9d9d","modified":1610111783632},{"_id":"public/categories/vue/数据劫持/发布订阅/index.html","hash":"c2684c0abb73487957cb9c0124a58ca0ee39c2ab","modified":1610111783633},{"_id":"public/categories/e2e/webdriverio/cucumber/index.html","hash":"9ee3ba4427dbf1b94f2782894e6da26b61bc06a1","modified":1610111783633},{"_id":"public/index.html","hash":"1a40e3c156b939bc6f8be6d84529746e9f714dce","modified":1610111783635},{"_id":"public/page/2/index.html","hash":"a24909174fed1cc4e7625dc24c390b5d36171446","modified":1610111783635},{"_id":"public/tags/English/index.html","hash":"fad79a3e8c727f01fb3e9ddc82dd139a10c09455","modified":1610111783635},{"_id":"public/tags/node/index.html","hash":"95956241b6eb3e8b2222ace5148ca6a96dcadaa7","modified":1610111783635},{"_id":"public/tags/koa/index.html","hash":"ff3a284677ffbd7c1aee45a2243dd9aede6e478a","modified":1610111783635},{"_id":"public/tags/TDD/index.html","hash":"4138b8e332a7c04b38ab1375c668d8b50480e0b8","modified":1610111783635},{"_id":"public/tags/desgin-patterns/index.html","hash":"7fc63f19ea34280fabfa81e62955976306b488f4","modified":1610111783635},{"_id":"public/tags/class/index.html","hash":"6162297e2ab58ea847689aaa05d0aaf65abb4b95","modified":1610111783635},{"_id":"public/tags/prototype/index.html","hash":"f5798f6574805d03f48ad8de03cb4abcc9038763","modified":1610111783636},{"_id":"public/tags/git/index.html","hash":"79df8dc80e20cbc3c4c2078d14678833b7e6f565","modified":1610111783636},{"_id":"public/tags/自动化构建/index.html","hash":"5f734fa25d2f5cca0aa68237427526c00e5ea364","modified":1610111783636},{"_id":"public/tags/mocha/index.html","hash":"96dc61fcafdc463257326097ea0b6df71262fb80","modified":1610111783636},{"_id":"public/tags/e2e/index.html","hash":"a607d56a65b62439f5eb9ee797a328aa68770f58","modified":1610111783636},{"_id":"public/tags/linux/index.html","hash":"4469dd6939995dd2d1195e439b701714e0dccada","modified":1610111783636},{"_id":"public/tags/vue/index.html","hash":"6560a4f379ef5209d3216d178cabd81f7ef821c8","modified":1610111783636},{"_id":"public/tags/数据劫持/index.html","hash":"0220e3094dd5a694fa177f607eb6668fca1d34cc","modified":1610111783636},{"_id":"public/tags/发布订阅/index.html","hash":"c4d16771e1a7e282556829408ae32b67748f365f","modified":1610111783636},{"_id":"public/tags/tcp连接、断开连接/index.html","hash":"ea0855c333f551974499c538f8291bbb66916b1b","modified":1610111783636},{"_id":"public/tags/npm/index.html","hash":"e4dedf114810eca0f23146b123d9c467ea7b3825","modified":1610111783636},{"_id":"public/tags/promise/index.html","hash":"85b0e92407176050e82283198a868c9f82390da0","modified":1610111783636},{"_id":"public/tags/javascript/index.html","hash":"68499263cc41d2d416b664aedf5bda35dc3d00b6","modified":1610111783636},{"_id":"public/tags/webdriverio/index.html","hash":"0c0db67c71adcffdd3cf5508d62c1b91b14b7d4d","modified":1610111783636},{"_id":"public/tags/cucumber/index.html","hash":"d879c00b3e688d8c9c439ff5223f33beb8d68b44","modified":1610111783636},{"_id":"public/leancloud.memo","hash":"22f096c59ff1d534cdf9345527ecfcf2c6c51db1","modified":1610111582945},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1610111582945},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610111582945},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1610111582945},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1610111582945},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1610111582945},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1610111582946},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1610111582946},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610111582946},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1610111582946},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1610111582946},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1610111582946},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610111582946},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1610111582946},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1610111582946},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1610111582946},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1610111582946},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1610111582947},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1610111582947},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1610111582947},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1610111582947},{"_id":"public/2019/01/02/tcp/img1.png","hash":"db73572f2a4824d0b994a70893f9ee67bdb8e7bb","modified":1610111582947},{"_id":"public/2019/01/02/tcp/img2.png","hash":"ec605b22ae384a307802ae91a7bc00a89719c199","modified":1610111582947},{"_id":"public/2021/01/08/no-network-linux-install-nodeJs/img3.jpg","hash":"511b9987351d6ed0bb1eb459f3fa80da8690bc73","modified":1610111582948},{"_id":"public/2021/01/08/no-network-linux-install-nodeJs/img4.jpg","hash":"eee7cab5c53a4a334156d838a8ea79c7432c4e4c","modified":1610111582948},{"_id":"public/2021/01/08/no-network-linux-install-nodeJs/img5.jpg","hash":"253cf7f9d2729a8f5924e95222c75869fcc12e41","modified":1610111582948},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610111584706},{"_id":"public/2021/01/08/no-network-linux-install-nodeJs/img2.jpg","hash":"36c12ab7db7edb1c988f0a5286a95f540b2e408e","modified":1610111584708},{"_id":"public/2021/01/08/no-network-linux-install-nodeJs/img1.jpg","hash":"0c374b2c9a42ec5c4285e7ba223b2cbede22fe55","modified":1610111584709},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1610111584737},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1610111584737},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1610111584738},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1610111584738},{"_id":"public/js/src/motion.js","hash":"3acaae96da453dcd03e4cbd301d81748f86ae95a","modified":1610111584739},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1610111584739},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1610111584740},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1610111584740},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1610111584741},{"_id":"public/js/src/utils.js","hash":"2829d742409c6167cf871fc40e4a2a2b8ac10569","modified":1610111584742},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1610111584742},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1610111584742},{"_id":"public/js/src/schemes/pisces.js","hash":"958f3a70ea684264f23054d37d5e744a32c2e68a","modified":1610111584743},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1610111584743},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1610111584743},{"_id":"public/css/main.css","hash":"2375f88207edffffd9d90b7082f1588961d63384","modified":1610111584744},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1610111584744},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1610111584744},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1610111584744},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1610111584744},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1610111584744},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1610111584744},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610111584744},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610111584806},{"_id":"public/2018/12/26/English2/img.jpg","hash":"2689744791032dac1bb8bfa3a12d6a3aef2057aa","modified":1610111584806},{"_id":"public/2019/03/04/es6Class/laugh.mp4","hash":"12631342d11ac95ebe5f3bdd58bda809d9dc3895","modified":1610111585046},{"_id":"themes/next/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1610110616547},{"_id":"source/.DS_Store","hash":"b4f134ac1e5e02618fb9533849ba416d516d83aa","modified":1602590981823},{"_id":"themes/next/source/.DS_Store","hash":"b388d4bfd2d525ab3fb2a35cd77ad7dc4c9ed226","modified":1545703054541},{"_id":"source/_posts/.DS_Store","hash":"d6a59f825538f8961ac4bdbac45d73c62979e173","modified":1545891115672},{"_id":"source/lib/canvas-nest/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1610103802607},{"_id":"source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1546494693003},{"_id":"source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1546495475210},{"_id":"source/lib/canvas-nest/README.md","hash":"70a34de41d0736f3727c98b6f17c0a24c9cc3537","modified":1546494693004},{"_id":"source/lib/canvas-nest/canvas-nest.min.js","hash":"5f9685c8e4518f8089091ad811cc7db555337589","modified":1546495828815},{"_id":"source/_posts/English/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1545891115671},{"_id":"source/_posts/no-network-linux-install-nodeJs/.DS_Store","hash":"4b656646247a3e716e24281175742e5a4fd63cf1","modified":1545726960458},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"765a2636699ef68d5590353df75450a447cf4a1f","modified":1610111783627},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"5f9685c8e4518f8089091ad811cc7db555337589","modified":1610111783627},{"_id":"public/lib/canvas-nest/README.html","hash":"1e8f47f02a617b7f518b44d3aa89c18a15f3af8d","modified":1610111783645},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1610111783647}],"Category":[{"name":"English","_id":"ckjoaux5v0002de2xlk6u8d0v"},{"name":"node","_id":"ckjoaux6f0007de2xot8iwza5"},{"name":"TDD","_id":"ckjoaux7i000jde2xxdwumver"},{"name":"desgin-patterns","_id":"ckjoaux7v000pde2xomj8iubb"},{"name":"koa","parent":"ckjoaux6f0007de2xot8iwza5","_id":"ckjoaux7w000tde2xr0pc5qo0"},{"name":"class","_id":"ckjoaux82000xde2xxxpjtkc3"},{"name":"git","_id":"ckjoaux840011de2xs5zzjocu"},{"name":"自动化构建","_id":"ckjoaux840014de2xwf4p8enb"},{"name":"mocha","_id":"ckjoaux850019de2xpyy1yjx3"},{"name":"prototype","parent":"ckjoaux82000xde2xxxpjtkc3","_id":"ckjoaux86001dde2xnraowoqm"},{"name":"protractor","_id":"ckjoauxh8001ode2xpbtzr212"},{"name":"linux","_id":"ckjoauxhl001tde2xt3sluca9"},{"name":"vue","_id":"ckjoauxhs001zde2x6705r1jy"},{"name":"tcp连接、断开连接","_id":"ckjoauxhv0023de2xhee049u0"},{"name":"npm","_id":"ckjoauxi00025de2x0r0jg2s5"},{"name":"promise","_id":"ckjoauxi20028de2xbersl4qa"},{"name":"node","parent":"ckjoauxhl001tde2xt3sluca9","_id":"ckjoauxi3002dde2x0uoh3924"},{"name":"e2e","_id":"ckjoauxi5002hde2x97qy0djs"},{"name":"数据劫持","parent":"ckjoauxhs001zde2x6705r1jy","_id":"ckjoauxi7002lde2xbaopawb2"},{"name":"javascript","parent":"ckjoauxi20028de2xbersl4qa","_id":"ckjoauxic002ode2xpjlfc8hd"},{"name":"webdriverio","parent":"ckjoauxi5002hde2x97qy0djs","_id":"ckjoauxie002sde2xnk86fn9j"},{"name":"发布订阅","parent":"ckjoauxi7002lde2xbaopawb2","_id":"ckjoauxif002vde2xu76jz5a0"},{"name":"cucumber","parent":"ckjoauxie002sde2xnk86fn9j","_id":"ckjoauxih002zde2xcwbrf9aq"}],"Data":[],"Page":[{"title":"categories","date":"2018-12-25T01:39:34.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-12-25 09:39:34\ntype: 'categories'\ncomments: false\n---\n","updated":"2021-01-08T13:07:02.307Z","path":"categories/index.html","layout":"page","_id":"ckjoauxh1001lde2x377ruyb8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-12-24T03:16:52.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-24 11:16:52\ntype: 'tags'\ncomments: false\n---\n","updated":"2021-01-08T13:07:02.308Z","path":"tags/index.html","layout":"page","_id":"ckjoauxh5001nde2x2hl6acxy","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"!function(){\n\tvar userAgentInfo = navigator.userAgent;\n    var Agents = [\"iPad\", \"iPhone\", \"Android\", \n          \"SymbianOS\", \"Windows Phone\",\n           \"iPod\", \"webOS\", \"BlackBerry\", \"IEMobile\"];\n    for (var v = 0; v < Agents.length; v++) {\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\n        return;\n      }\n    }\n\tfunction o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();","source":"lib/canvas-nest/canvas-nest-nomobile.min.js","raw":"!function(){\n\tvar userAgentInfo = navigator.userAgent;\n    var Agents = [\"iPad\", \"iPhone\", \"Android\", \n          \"SymbianOS\", \"Windows Phone\",\n           \"iPod\", \"webOS\", \"BlackBerry\", \"IEMobile\"];\n    for (var v = 0; v < Agents.length; v++) {\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\n        return;\n      }\n    }\n\tfunction o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();","date":"2021-01-07T14:01:48.268Z","updated":"2019-01-03T06:04:35.210Z","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","layout":"false","title":"","comments":1,"_id":"ckjoazbdw00000y2xp827g9fl","content":"!function(){\n\tvar userAgentInfo = navigator.userAgent;\n    var Agents = [\"iPad\", \"iPhone\", \"Android\", \n          \"SymbianOS\", \"Windows Phone\",\n           \"iPod\", \"webOS\", \"BlackBerry\", \"IEMobile\"];\n    for (var v = 0; v < Agents.length; v++) {\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\n        return;\n      }\n    }\n\tfunction o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillrect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){b=i.x-x.x,z=i.y-x.y,y=b*b+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();</0?-1:1,e.fillrect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){b=i.x-x.x,z=i.y-x.y,y=b*b+z*z;y<x.max&&(x===f&&y></0?-1:1,i.ya*=i.y>","site":{"data":{}},"excerpt":"","more":"!function(){\n\tvar userAgentInfo = navigator.userAgent;\n    var Agents = [\"iPad\", \"iPhone\", \"Android\", \n          \"SymbianOS\", \"Windows Phone\",\n           \"iPod\", \"webOS\", \"BlackBerry\", \"IEMobile\"];\n    for (var v = 0; v < Agents.length; v++) {\n      if (userAgentInfo.indexOf(Agents[v]) > 0) {\n        return;\n      }\n    }\n\tfunction o(w,v,i){return w.getAttribute(v)||i}function j(i){return document.getElementsByTagName(i)}function l(){var i=j(\"script\"),w=i.length,v=i[w-1];return{l:w,z:o(v,\"zIndex\",-1),o:o(v,\"opacity\",0.5),c:o(v,\"color\",\"0,0,0\"),n:o(v,\"count\",99)}}function k(){r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function b(){e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i){i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>r||i.x<0?-1:1,i.ya*=i.y>n||i.y<0?-1:1,e.fillrect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){b=i.x-x.x,z=i.y-x.y,y=b*b+z*z;y<x.max&&(x===f&&y>=x.max/2&&(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=\"rgba(\"+s.c+\",\"+(A+0.2)+\")\",e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())}}w.splice(w.indexOf(i),1)}),m(b)}var u=document.createElement(\"canvas\"),s=l(),c=\"c_n\"+s.l,e=u.getContext(\"2d\"),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i){window.setTimeout(i,1000/45)},a=Math.random,f={x:null,y:null,max:20000};u.id=c;u.style.cssText=\"position:fixed;top:0;left:0;z-index:\"+s.z+\";opacity:\"+s.o;j(\"body\")[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i){i=i||window.event,f.x=i.clientX,f.y=i.clientY},window.onmouseout=function(){f.x=null,f.y=null};for(var t=[],p=0;s.n>p;p++){var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push({x:h,y:g,xa:q,ya:d,max:6000})}setTimeout(function(){b()},100)}();</0?-1:1,e.fillrect(i.x-0.5,i.y-0.5,1,1);for(v=0;v<w.length;v++){x=w[v];if(i!==x&&null!==x.x&&null!==x.y){b=i.x-x.x,z=i.y-x.y,y=b*b+z*z;y<x.max&&(x===f&&y></0?-1:1,i.ya*=i.y>"},{"_content":"<h1 align=\"center\"><a href=\"https://github.com/hustcc/canvas-nest.js\">canvas-nest.js</a> for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\nChange dir to **NexT** directory. There must be `layout`, `source`, `languages` and other directories:\n\n```sh\n$ cd themes/next\n$ ls\nbower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  source  test\n```\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\nInstall module to `source/lib` directory:\n\n```sh\n$ git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest\n```\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\nEnable module in **NexT** `_config.yml` file:\n\n```yml\ncanvas_nest:\n  enable: true\n  onmobile: true # display on mobile or not\n  color: '0,0,255' # RGB values, use ',' to separate\n  opacity: 0.5 # the opacity of line: 0~1\n  zIndex: -1 # z-index property of the background\n  count: 99 # the number of lines\n```\n\n**And, if you wants to use the CDN, then need to set:**\n\n```yml\nvendors:\n  ...\n  canvas_nest: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js\n  canvas_nest_nomobile: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js\n```\n\n<h1 align=\"center\">Update</h1>\n\n```sh\n$ cd themes/next/source/lib/canvas-nest\n$ git pull\n```\n","source":"lib/canvas-nest/README.md","raw":"<h1 align=\"center\"><a href=\"https://github.com/hustcc/canvas-nest.js\">canvas-nest.js</a> for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\nChange dir to **NexT** directory. There must be `layout`, `source`, `languages` and other directories:\n\n```sh\n$ cd themes/next\n$ ls\nbower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  source  test\n```\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\nInstall module to `source/lib` directory:\n\n```sh\n$ git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest\n```\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\nEnable module in **NexT** `_config.yml` file:\n\n```yml\ncanvas_nest:\n  enable: true\n  onmobile: true # display on mobile or not\n  color: '0,0,255' # RGB values, use ',' to separate\n  opacity: 0.5 # the opacity of line: 0~1\n  zIndex: -1 # z-index property of the background\n  count: 99 # the number of lines\n```\n\n**And, if you wants to use the CDN, then need to set:**\n\n```yml\nvendors:\n  ...\n  canvas_nest: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js\n  canvas_nest_nomobile: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js\n```\n\n<h1 align=\"center\">Update</h1>\n\n```sh\n$ cd themes/next/source/lib/canvas-nest\n$ git pull\n```\n","date":"2021-01-07T14:01:48.147Z","updated":"2019-01-03T05:51:33.004Z","path":"lib/canvas-nest/README.html","title":"","comments":1,"layout":"page","_id":"ckjoazbea00010y2xgj1sqigc","content":"<h1 align=\"center\"><a href=\"https://github.com/hustcc/canvas-nest.js\" target=\"_blank\" rel=\"noopener\">canvas-nest.js</a> for <a href=\"https://github.com/theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\n<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">bower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class=\"built_in\">source</span>  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\n<p>Install module to <code>source/lib</code> directory:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class=\"built_in\">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure>\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\n<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">canvas_nest:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  onmobile:</span> <span class=\"literal\">true</span> <span class=\"comment\"># display on mobile or not</span></span><br><span class=\"line\"><span class=\"attr\">  color:</span> <span class=\"string\">'0,0,255'</span> <span class=\"comment\"># RGB values, use ',' to separate</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">0.5</span> <span class=\"comment\"># the opacity of line: 0~1</span></span><br><span class=\"line\"><span class=\"attr\">  zIndex:</span> <span class=\"bullet\">-1</span> <span class=\"comment\"># z-index property of the background</span></span><br><span class=\"line\"><span class=\"attr\">  count:</span> <span class=\"number\">99</span> <span class=\"comment\"># the number of lines</span></span><br></pre></td></tr></table></figure>\n<p><strong>And, if you wants to use the CDN, then need to set:</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vendors:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">  canvas_nest:</span> <span class=\"string\">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js</span></span><br><span class=\"line\"><span class=\"attr\">  canvas_nest_nomobile:</span> <span class=\"string\">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js</span></span><br></pre></td></tr></table></figure>\n<h1 align=\"center\">Update</h1>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next/<span class=\"built_in\">source</span>/lib/canvas-nest</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 align=\"center\"><a href=\"https://github.com/hustcc/canvas-nest.js\" target=\"_blank\" rel=\"noopener\">canvas-nest.js</a> for <a href=\"https://github.com/theme-next\" target=\"_blank\" rel=\"noopener\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\n<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">bower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class=\"built_in\">source</span>  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\n<p>Install module to <code>source/lib</code> directory:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class=\"built_in\">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure>\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\n<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">canvas_nest:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  onmobile:</span> <span class=\"literal\">true</span> <span class=\"comment\"># display on mobile or not</span></span><br><span class=\"line\"><span class=\"attr\">  color:</span> <span class=\"string\">'0,0,255'</span> <span class=\"comment\"># RGB values, use ',' to separate</span></span><br><span class=\"line\"><span class=\"attr\">  opacity:</span> <span class=\"number\">0.5</span> <span class=\"comment\"># the opacity of line: 0~1</span></span><br><span class=\"line\"><span class=\"attr\">  zIndex:</span> <span class=\"bullet\">-1</span> <span class=\"comment\"># z-index property of the background</span></span><br><span class=\"line\"><span class=\"attr\">  count:</span> <span class=\"number\">99</span> <span class=\"comment\"># the number of lines</span></span><br></pre></td></tr></table></figure>\n<p><strong>And, if you wants to use the CDN, then need to set:</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vendors:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">  canvas_nest:</span> <span class=\"string\">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest.min.js</span></span><br><span class=\"line\"><span class=\"attr\">  canvas_nest_nomobile:</span> <span class=\"string\">//cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1.0.0/canvas-nest-nomobile.min.js</span></span><br></pre></td></tr></table></figure>\n<h1 align=\"center\">Update</h1>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next/<span class=\"built_in\">source</span>/lib/canvas-nest</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n"},{"_content":"! function() {\n    function n(n, e, t) { return n.getAttribute(e) || t }\n\n    function e(n) { return document.getElementsByTagName(n) }\n\n    function t() {\n        var t = e(\"script\"),\n            o = t.length,\n            i = t[o - 1];\n        return {\n            l: o,\n            z: n(i, \"zIndex\", -1),\n            o: n(i, \"opacity\", .5),\n            c: n(i, \"color\", \"0,0,0\"),\n            n: n(i, \"count\", 99)\n        }\n    }\n\n    function o() {\n        a = m.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidt\n        h, c = m.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n    }\n\n    function i() {\n        r.clearRect(0, 0, a, c);\n        var n, e, t, o, m, l;\n        s.forEach(function(i, x) {\n            for (i.x += i.xa, i.y += i.ya, i.xa *= i.x > a || i.x < 0 ? -1 : 1, i.ya *= i.y > c || i.y < 0 ? -1 : 1, r.fillRect(i.x - .5, i.y - .5, 1, 1), e = x + 1; e < u.length; e++) n = u[e], null !== n.x && null !== n.y && (o = i.x - n.x, m = i.y - n.y, l = o * o + m * m, l < n.max && (n ===\n                y && l >= n.max / 2 && (i.x -= .03 * o, i.y -= .03 * m), t = (n.max - l) / n.max, r.beginPath(), r.lineWidth = t / 2, r.strokeStyle = \"rgba(\" + d.c + \",\" + (t + .2) + \")\", r.moveTo(i.x, i.y), r.lineTo(n.x, n.y), r.stroke()))\n        }), x(i)\n    }\n    var a, c, u, m = document.createElement(\"canvas\"),\n        d = t(),\n        l = \"c_n\" + d.l,\n        r = m.getContext(\"2d\"),\n        x = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.\n    oRequestAnimationFrame || window.msRequestAnimationFrame || function(n) { window.setTimeout(n, 1e3 / 45) }, w = Math.random, y = {\n        x: null,\n        y: null,\n        l,\n        max: 2e4\n    };\n    m.id = l, m.style.cssText = \"position:fixed;top:0;left:0;z-index:\" + d.z + \";opacity:\" + d.o, e(\"body\")[0].appendChild(m), o(),\n        window.onresize = o, window.onmousemove = function(n) { n = n || window.event, y.x = n.clientX, y.y = n.clientY }, window.onmouseout = function() {\n            y\n                .x = null, y.y = null\n        };\n    for (var s = [], f = 0; d.n > f; f++) { var h = w() * a,\n            g = w() * c,\n            v = 2 * w() - 1,\n            p = 2 * w() - 1;\n        s.push({ x: h, y: g, xa: v, ya: p, max: 6e3 }) } u =\n        s.concat([y]), setTimeout(function() { i() }, 100)\n}();","source":"lib/canvas-nest/canvas-nest.min.js","raw":"! function() {\n    function n(n, e, t) { return n.getAttribute(e) || t }\n\n    function e(n) { return document.getElementsByTagName(n) }\n\n    function t() {\n        var t = e(\"script\"),\n            o = t.length,\n            i = t[o - 1];\n        return {\n            l: o,\n            z: n(i, \"zIndex\", -1),\n            o: n(i, \"opacity\", .5),\n            c: n(i, \"color\", \"0,0,0\"),\n            n: n(i, \"count\", 99)\n        }\n    }\n\n    function o() {\n        a = m.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidt\n        h, c = m.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n    }\n\n    function i() {\n        r.clearRect(0, 0, a, c);\n        var n, e, t, o, m, l;\n        s.forEach(function(i, x) {\n            for (i.x += i.xa, i.y += i.ya, i.xa *= i.x > a || i.x < 0 ? -1 : 1, i.ya *= i.y > c || i.y < 0 ? -1 : 1, r.fillRect(i.x - .5, i.y - .5, 1, 1), e = x + 1; e < u.length; e++) n = u[e], null !== n.x && null !== n.y && (o = i.x - n.x, m = i.y - n.y, l = o * o + m * m, l < n.max && (n ===\n                y && l >= n.max / 2 && (i.x -= .03 * o, i.y -= .03 * m), t = (n.max - l) / n.max, r.beginPath(), r.lineWidth = t / 2, r.strokeStyle = \"rgba(\" + d.c + \",\" + (t + .2) + \")\", r.moveTo(i.x, i.y), r.lineTo(n.x, n.y), r.stroke()))\n        }), x(i)\n    }\n    var a, c, u, m = document.createElement(\"canvas\"),\n        d = t(),\n        l = \"c_n\" + d.l,\n        r = m.getContext(\"2d\"),\n        x = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.\n    oRequestAnimationFrame || window.msRequestAnimationFrame || function(n) { window.setTimeout(n, 1e3 / 45) }, w = Math.random, y = {\n        x: null,\n        y: null,\n        l,\n        max: 2e4\n    };\n    m.id = l, m.style.cssText = \"position:fixed;top:0;left:0;z-index:\" + d.z + \";opacity:\" + d.o, e(\"body\")[0].appendChild(m), o(),\n        window.onresize = o, window.onmousemove = function(n) { n = n || window.event, y.x = n.clientX, y.y = n.clientY }, window.onmouseout = function() {\n            y\n                .x = null, y.y = null\n        };\n    for (var s = [], f = 0; d.n > f; f++) { var h = w() * a,\n            g = w() * c,\n            v = 2 * w() - 1,\n            p = 2 * w() - 1;\n        s.push({ x: h, y: g, xa: v, ya: p, max: 6e3 }) } u =\n        s.concat([y]), setTimeout(function() { i() }, 100)\n}();","date":"2021-01-07T14:01:48.267Z","updated":"2019-01-03T06:10:28.815Z","path":"lib/canvas-nest/canvas-nest.min.js","layout":"false","title":"","comments":1,"_id":"ckjoazbef00020y2xzb1l8sfm","content":"! function() {\n    function n(n, e, t) { return n.getAttribute(e) || t }\n\n    function e(n) { return document.getElementsByTagName(n) }\n\n    function t() {\n        var t = e(\"script\"),\n            o = t.length,\n            i = t[o - 1];\n        return {\n            l: o,\n            z: n(i, \"zIndex\", -1),\n            o: n(i, \"opacity\", .5),\n            c: n(i, \"color\", \"0,0,0\"),\n            n: n(i, \"count\", 99)\n        }\n    }\n\n    function o() {\n        a = m.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidt\n        h, c = m.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n    }\n\n    function i() {\n        r.clearRect(0, 0, a, c);\n        var n, e, t, o, m, l;\n        s.forEach(function(i, x) {\n            for (i.x += i.xa, i.y += i.ya, i.xa *= i.x > a || i.x < 0 ? -1 : 1, i.ya *= i.y > c || i.y < 0 ? -1 : 1, r.fillRect(i.x - .5, i.y - .5, 1, 1), e = x + 1; e < u.length; e++) n = u[e], null !== n.x && null !== n.y && (o = i.x - n.x, m = i.y - n.y, l = o * o + m * m, l < n.max && (n ===\n                y && l >= n.max / 2 && (i.x -= .03 * o, i.y -= .03 * m), t = (n.max - l) / n.max, r.beginPath(), r.lineWidth = t / 2, r.strokeStyle = \"rgba(\" + d.c + \",\" + (t + .2) + \")\", r.moveTo(i.x, i.y), r.lineTo(n.x, n.y), r.stroke()))\n        }), x(i)\n    }\n    var a, c, u, m = document.createElement(\"canvas\"),\n        d = t(),\n        l = \"c_n\" + d.l,\n        r = m.getContext(\"2d\"),\n        x = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.\n    oRequestAnimationFrame || window.msRequestAnimationFrame || function(n) { window.setTimeout(n, 1e3 / 45) }, w = Math.random, y = {\n        x: null,\n        y: null,\n        l,\n        max: 2e4\n    };\n    m.id = l, m.style.cssText = \"position:fixed;top:0;left:0;z-index:\" + d.z + \";opacity:\" + d.o, e(\"body\")[0].appendChild(m), o(),\n        window.onresize = o, window.onmousemove = function(n) { n = n || window.event, y.x = n.clientX, y.y = n.clientY }, window.onmouseout = function() {\n            y\n                .x = null, y.y = null\n        };\n    for (var s = [], f = 0; d.n > f; f++) { var h = w() * a,\n            g = w() * c,\n            v = 2 * w() - 1,\n            p = 2 * w() - 1;\n        s.push({ x: h, y: g, xa: v, ya: p, max: 6e3 }) } u =\n        s.concat([y]), setTimeout(function() { i() }, 100)\n}();","site":{"data":{}},"excerpt":"","more":"! function() {\n    function n(n, e, t) { return n.getAttribute(e) || t }\n\n    function e(n) { return document.getElementsByTagName(n) }\n\n    function t() {\n        var t = e(\"script\"),\n            o = t.length,\n            i = t[o - 1];\n        return {\n            l: o,\n            z: n(i, \"zIndex\", -1),\n            o: n(i, \"opacity\", .5),\n            c: n(i, \"color\", \"0,0,0\"),\n            n: n(i, \"count\", 99)\n        }\n    }\n\n    function o() {\n        a = m.width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidt\n        h, c = m.height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n    }\n\n    function i() {\n        r.clearRect(0, 0, a, c);\n        var n, e, t, o, m, l;\n        s.forEach(function(i, x) {\n            for (i.x += i.xa, i.y += i.ya, i.xa *= i.x > a || i.x < 0 ? -1 : 1, i.ya *= i.y > c || i.y < 0 ? -1 : 1, r.fillRect(i.x - .5, i.y - .5, 1, 1), e = x + 1; e < u.length; e++) n = u[e], null !== n.x && null !== n.y && (o = i.x - n.x, m = i.y - n.y, l = o * o + m * m, l < n.max && (n ===\n                y && l >= n.max / 2 && (i.x -= .03 * o, i.y -= .03 * m), t = (n.max - l) / n.max, r.beginPath(), r.lineWidth = t / 2, r.strokeStyle = \"rgba(\" + d.c + \",\" + (t + .2) + \")\", r.moveTo(i.x, i.y), r.lineTo(n.x, n.y), r.stroke()))\n        }), x(i)\n    }\n    var a, c, u, m = document.createElement(\"canvas\"),\n        d = t(),\n        l = \"c_n\" + d.l,\n        r = m.getContext(\"2d\"),\n        x = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.\n    oRequestAnimationFrame || window.msRequestAnimationFrame || function(n) { window.setTimeout(n, 1e3 / 45) }, w = Math.random, y = {\n        x: null,\n        y: null,\n        l,\n        max: 2e4\n    };\n    m.id = l, m.style.cssText = \"position:fixed;top:0;left:0;z-index:\" + d.z + \";opacity:\" + d.o, e(\"body\")[0].appendChild(m), o(),\n        window.onresize = o, window.onmousemove = function(n) { n = n || window.event, y.x = n.clientX, y.y = n.clientY }, window.onmouseout = function() {\n            y\n                .x = null, y.y = null\n        };\n    for (var s = [], f = 0; d.n > f; f++) { var h = w() * a,\n            g = w() * c,\n            v = 2 * w() - 1,\n            p = 2 * w() - 1;\n        s.push({ x: h, y: g, xa: v, ya: p, max: 6e3 }) } u =\n        s.concat([y]), setTimeout(function() { i() }, 100)\n}();"}],"Post":[{"title":"词悬浮-词汇速记法1","date":"2018-12-26T11:50:03.000Z","comments":0,"_content":"\n# 第一堂课笔记\n\n## 【词根】： -elect-(采集)  -press-(压力)\n\n## 【前缀】：（常见30个）\n\n```js\ne- 向外\nun- 否定\nself- 自己\ncol- 在一起，强调\nse- 分\nneg- 否定\n\nover- 在上，超过\nde- 向下，分\nim- 向内，否定，强调\nex- 向外\nun- 否定\nanti- 反\ncom- 在一起\nre- 往回，再次\ni??- 否定\n```\n\n## 【后缀】：（常见40个）\n\n```js\n-or === -er 名词或形容词后缀\n-ed 形容词或过去式或过去分词\n-al 形容词或名词后缀\n-ant 名词或形容词后缀\n-ation 复合名词后缀\n\n-ic 形容词或名词后缀\n-ive 形容词或名词后缀\n-ist 名词或形容词后缀\n-ing 形容词或动名词或现在分词\n-ion 名词后缀\n-ism 名词后缀，表...主义\n-ist 名词后缀，表...主义者\n-ity 名词后缀，表抽象事物\n-ize 动词后缀，表使动\n-ible 形容词后缀，表能...的\n\n-ful 形容词后缀\n-ure 名词或动词后缀\n-ly 副词后缀\n-less 形容词后缀，表否定\n-ness 名词后缀\n```\n\n## 【课后练习】：\n\n|      单词       | 前缀 2 | 前缀1 | 词根1 | 后缀1 | 后缀2 | 含义 | 含义备选项（数字填写到'含义栏'） |\n| :-------------: | :----: | :---: | :---: | :---: | :---: | :--: | :------------------------------- |\n|   pressurized   |        |       |       |       |       |      | 1、adj.抗抑郁的                  |\n|  impressionism  |        |       |       |       |       |      | 2、n.选举                        |\n| expressiveness  |        |       |       |       |       |      | 3、vt.使减压                     |\n|   unselected    |        |       |       |       |       |      | 4、n.压缩性                      |\n| antidepressant  |        |       |       |       |       |      | 5、n.表情丰富                    |\n|  collectivism   |        |       |       |       |       |      | 6、adj.未选择的                  |\n|   neglectful    |        |       |       |       |       |      | 7、adj.加压的                    |\n|    election     |        |       |       |       |       |      | 8、n.印象主义                    |\n|  depressurize   |        |       |       |       |       |      | 9、adj.疏忽的                    |\n| compressibility |        |       |       |       |       |      | 10、n.集体主义                   |\n","source":"_posts/English.md","raw":"---\ntitle: 词悬浮-词汇速记法1\ndate: 2018-12-26 19:50:03\ntags:\n- English\ncategories:\n- English\ncomments: false\n---\n\n# 第一堂课笔记\n\n## 【词根】： -elect-(采集)  -press-(压力)\n\n## 【前缀】：（常见30个）\n\n```js\ne- 向外\nun- 否定\nself- 自己\ncol- 在一起，强调\nse- 分\nneg- 否定\n\nover- 在上，超过\nde- 向下，分\nim- 向内，否定，强调\nex- 向外\nun- 否定\nanti- 反\ncom- 在一起\nre- 往回，再次\ni??- 否定\n```\n\n## 【后缀】：（常见40个）\n\n```js\n-or === -er 名词或形容词后缀\n-ed 形容词或过去式或过去分词\n-al 形容词或名词后缀\n-ant 名词或形容词后缀\n-ation 复合名词后缀\n\n-ic 形容词或名词后缀\n-ive 形容词或名词后缀\n-ist 名词或形容词后缀\n-ing 形容词或动名词或现在分词\n-ion 名词后缀\n-ism 名词后缀，表...主义\n-ist 名词后缀，表...主义者\n-ity 名词后缀，表抽象事物\n-ize 动词后缀，表使动\n-ible 形容词后缀，表能...的\n\n-ful 形容词后缀\n-ure 名词或动词后缀\n-ly 副词后缀\n-less 形容词后缀，表否定\n-ness 名词后缀\n```\n\n## 【课后练习】：\n\n|      单词       | 前缀 2 | 前缀1 | 词根1 | 后缀1 | 后缀2 | 含义 | 含义备选项（数字填写到'含义栏'） |\n| :-------------: | :----: | :---: | :---: | :---: | :---: | :--: | :------------------------------- |\n|   pressurized   |        |       |       |       |       |      | 1、adj.抗抑郁的                  |\n|  impressionism  |        |       |       |       |       |      | 2、n.选举                        |\n| expressiveness  |        |       |       |       |       |      | 3、vt.使减压                     |\n|   unselected    |        |       |       |       |       |      | 4、n.压缩性                      |\n| antidepressant  |        |       |       |       |       |      | 5、n.表情丰富                    |\n|  collectivism   |        |       |       |       |       |      | 6、adj.未选择的                  |\n|   neglectful    |        |       |       |       |       |      | 7、adj.加压的                    |\n|    election     |        |       |       |       |       |      | 8、n.印象主义                    |\n|  depressurize   |        |       |       |       |       |      | 9、adj.疏忽的                    |\n| compressibility |        |       |       |       |       |      | 10、n.集体主义                   |\n","slug":"English","published":1,"updated":"2021-01-08T13:07:02.264Z","layout":"post","photos":[],"link":"","_id":"ckjoaux520000de2xdloy61me","content":"<h1 id=\"第一堂课笔记\"><a href=\"#第一堂课笔记\" class=\"headerlink\" title=\"第一堂课笔记\"></a>第一堂课笔记</h1><h2 id=\"【词根】：-elect-采集-press-压力\"><a href=\"#【词根】：-elect-采集-press-压力\" class=\"headerlink\" title=\"【词根】： -elect-(采集)  -press-(压力)\"></a>【词根】： -elect-(采集)  -press-(压力)</h2><h2 id=\"【前缀】：（常见30个）\"><a href=\"#【前缀】：（常见30个）\" class=\"headerlink\" title=\"【前缀】：（常见30个）\"></a>【前缀】：（常见30个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e- 向外</span><br><span class=\"line\">un- 否定</span><br><span class=\"line\">self- 自己</span><br><span class=\"line\">col- 在一起，强调</span><br><span class=\"line\">se- 分</span><br><span class=\"line\">neg- 否定</span><br><span class=\"line\"></span><br><span class=\"line\">over- 在上，超过</span><br><span class=\"line\">de- 向下，分</span><br><span class=\"line\">im- 向内，否定，强调</span><br><span class=\"line\">ex- 向外</span><br><span class=\"line\">un- 否定</span><br><span class=\"line\">anti- 反</span><br><span class=\"line\">com- 在一起</span><br><span class=\"line\">re- 往回，再次</span><br><span class=\"line\">i??- 否定</span><br></pre></td></tr></table></figure>\n<h2 id=\"【后缀】：（常见40个）\"><a href=\"#【后缀】：（常见40个）\" class=\"headerlink\" title=\"【后缀】：（常见40个）\"></a>【后缀】：（常见40个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-or === -er 名词或形容词后缀</span><br><span class=\"line\">-ed 形容词或过去式或过去分词</span><br><span class=\"line\">-al 形容词或名词后缀</span><br><span class=\"line\">-ant 名词或形容词后缀</span><br><span class=\"line\">-ation 复合名词后缀</span><br><span class=\"line\"></span><br><span class=\"line\">-ic 形容词或名词后缀</span><br><span class=\"line\">-ive 形容词或名词后缀</span><br><span class=\"line\">-ist 名词或形容词后缀</span><br><span class=\"line\">-ing 形容词或动名词或现在分词</span><br><span class=\"line\">-ion 名词后缀</span><br><span class=\"line\">-ism 名词后缀，表...主义</span><br><span class=\"line\">-ist 名词后缀，表...主义者</span><br><span class=\"line\">-ity 名词后缀，表抽象事物</span><br><span class=\"line\">-ize 动词后缀，表使动</span><br><span class=\"line\">-ible 形容词后缀，表能...的</span><br><span class=\"line\"></span><br><span class=\"line\">-ful 形容词后缀</span><br><span class=\"line\">-ure 名词或动词后缀</span><br><span class=\"line\">-ly 副词后缀</span><br><span class=\"line\">-less 形容词后缀，表否定</span><br><span class=\"line\">-ness 名词后缀</span><br></pre></td></tr></table></figure>\n<h2 id=\"【课后练习】：\"><a href=\"#【课后练习】：\" class=\"headerlink\" title=\"【课后练习】：\"></a>【课后练习】：</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">单词</th>\n<th style=\"text-align:center\">前缀 2</th>\n<th style=\"text-align:center\">前缀1</th>\n<th style=\"text-align:center\">词根1</th>\n<th style=\"text-align:center\">后缀1</th>\n<th style=\"text-align:center\">后缀2</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:left\">含义备选项（数字填写到’含义栏’）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pressurized</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">1、adj.抗抑郁的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">impressionism</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">2、n.选举</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">expressiveness</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">3、vt.使减压</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unselected</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">4、n.压缩性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">antidepressant</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">5、n.表情丰富</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">collectivism</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">6、adj.未选择的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">neglectful</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">7、adj.加压的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">election</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">8、n.印象主义</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">depressurize</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">9、adj.疏忽的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">compressibility</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">10、n.集体主义</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第一堂课笔记\"><a href=\"#第一堂课笔记\" class=\"headerlink\" title=\"第一堂课笔记\"></a>第一堂课笔记</h1><h2 id=\"【词根】：-elect-采集-press-压力\"><a href=\"#【词根】：-elect-采集-press-压力\" class=\"headerlink\" title=\"【词根】： -elect-(采集)  -press-(压力)\"></a>【词根】： -elect-(采集)  -press-(压力)</h2><h2 id=\"【前缀】：（常见30个）\"><a href=\"#【前缀】：（常见30个）\" class=\"headerlink\" title=\"【前缀】：（常见30个）\"></a>【前缀】：（常见30个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e- 向外</span><br><span class=\"line\">un- 否定</span><br><span class=\"line\">self- 自己</span><br><span class=\"line\">col- 在一起，强调</span><br><span class=\"line\">se- 分</span><br><span class=\"line\">neg- 否定</span><br><span class=\"line\"></span><br><span class=\"line\">over- 在上，超过</span><br><span class=\"line\">de- 向下，分</span><br><span class=\"line\">im- 向内，否定，强调</span><br><span class=\"line\">ex- 向外</span><br><span class=\"line\">un- 否定</span><br><span class=\"line\">anti- 反</span><br><span class=\"line\">com- 在一起</span><br><span class=\"line\">re- 往回，再次</span><br><span class=\"line\">i??- 否定</span><br></pre></td></tr></table></figure>\n<h2 id=\"【后缀】：（常见40个）\"><a href=\"#【后缀】：（常见40个）\" class=\"headerlink\" title=\"【后缀】：（常见40个）\"></a>【后缀】：（常见40个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-or === -er 名词或形容词后缀</span><br><span class=\"line\">-ed 形容词或过去式或过去分词</span><br><span class=\"line\">-al 形容词或名词后缀</span><br><span class=\"line\">-ant 名词或形容词后缀</span><br><span class=\"line\">-ation 复合名词后缀</span><br><span class=\"line\"></span><br><span class=\"line\">-ic 形容词或名词后缀</span><br><span class=\"line\">-ive 形容词或名词后缀</span><br><span class=\"line\">-ist 名词或形容词后缀</span><br><span class=\"line\">-ing 形容词或动名词或现在分词</span><br><span class=\"line\">-ion 名词后缀</span><br><span class=\"line\">-ism 名词后缀，表...主义</span><br><span class=\"line\">-ist 名词后缀，表...主义者</span><br><span class=\"line\">-ity 名词后缀，表抽象事物</span><br><span class=\"line\">-ize 动词后缀，表使动</span><br><span class=\"line\">-ible 形容词后缀，表能...的</span><br><span class=\"line\"></span><br><span class=\"line\">-ful 形容词后缀</span><br><span class=\"line\">-ure 名词或动词后缀</span><br><span class=\"line\">-ly 副词后缀</span><br><span class=\"line\">-less 形容词后缀，表否定</span><br><span class=\"line\">-ness 名词后缀</span><br></pre></td></tr></table></figure>\n<h2 id=\"【课后练习】：\"><a href=\"#【课后练习】：\" class=\"headerlink\" title=\"【课后练习】：\"></a>【课后练习】：</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">单词</th>\n<th style=\"text-align:center\">前缀 2</th>\n<th style=\"text-align:center\">前缀1</th>\n<th style=\"text-align:center\">词根1</th>\n<th style=\"text-align:center\">后缀1</th>\n<th style=\"text-align:center\">后缀2</th>\n<th style=\"text-align:center\">含义</th>\n<th style=\"text-align:left\">含义备选项（数字填写到’含义栏’）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pressurized</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">1、adj.抗抑郁的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">impressionism</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">2、n.选举</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">expressiveness</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">3、vt.使减压</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">unselected</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">4、n.压缩性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">antidepressant</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">5、n.表情丰富</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">collectivism</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">6、adj.未选择的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">neglectful</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">7、adj.加压的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">election</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">8、n.印象主义</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">depressurize</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">9、adj.疏忽的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">compressibility</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\">10、n.集体主义</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Koa","date":"2021-01-08T06:51:16.000Z","_content":"\n## Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。\n\n> 此文默认当前已有node环境，如果你没有node环境，请自行安装\n\n```js\n$ node -v\nv14.15.0\n```\n\n> 本地新建一个空目录，进行依赖的安装\n\n```js\nnpm init -y\nnpm i koa2 koa-router koa-static -S\n```\n\n1. 搭建http服务\n\n   ```js\n   // base.js\n   const Koa = require('koa2');\n   const app = new Koa();\n   \n   app.listen(3000);\n   ```\n\n   运行这个脚本，`node base.js`\n\n   然后在浏览器中输入`localhost:3000`， 你就会看到页面提示\"Not Found\"， 这就已经启动起来了。\n\n2. 建立静态页面，并使用koa-static来加载\n\n   ```js\n   // index.html\n   <html>\n       <head>\n           <meta charset=\"UTF-8\" />\n           <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=0\" />\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js\"></script>\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.20.0-0/axios.js\"></script>\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/qs/6.9.4/qs.js\"></script>\n           <style>\n               /* .cube-btn {\n               margin: 10px 0;\n           } */\n           </style>\n       </head>\n   \n       <body>\n           <div id=\"app\">\n               <div>{{name}} : {{age}}</div>\n               <button @click=\"getTokens\">getTokens</button>\n               <button @click=\"setTokens\">setTokens</button>\n               <button @click=\"noAPI\">noAPI</button>\n               <button @click=\"redirect\">redirect</button>\n           </div>\n           <script>\n               var app = new Vue({\n                   el: '#app',\n                   data() {\n                       return {\n                           name: 'dangchaofeng',\n                           age: '28'\n                       };\n                   },\n                   methods: {\n                       async getTokens() {\n                           const res = await axios.get(`/getTokens`);\n                           console.log('res', res);\n                       },\n                       async setTokens() {\n                           const res = await axios.post(`/setTokens`);\n                           console.log('res', res);\n                       },\n                       async redirect() {\n                           const res = await axios.get(`/redirect`);\n                           console.log('res', res);\n                       },\n                       async noAPI() {\n                           const res = await axios.delete(`/noAPI`, {\n                               params: {\n                                   id: ' 1'\n                               }\n                           });\n                           console.log('res', res);\n                       }\n                   },\n                   mounted: function () {}\n               });\n           </script>\n       </body>\n   </html>\n   \n   // base-static.js\n   \n   const Koa = require('koa2');\n   const app = new Koa();\n   const static = require('koa-static');\n   const path = require('path');\n   \n   const main = static(path.join(__dirname));\n   \n   app.use(main);\n   app.listen(3000);\n   ```\n\n   运行这个脚本，`node base-static.js`\n\n   然后在浏览器中输入`localhost:3000`， 你就会看到自己的页面。\n\n3. 加载koa-router路由功能\n\n   ```js\n   // base-router.js\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.body = {\n           token: '123'\n       };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   router.post('/noAPI', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   // * 自动识别405等返回。\n   // * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405\n   app.use(router.allowedMethods());\n   \n   app.listen(3000);\n   \n   ```\n\n   >\n   >\n   >此处强调说明三点：\n   >\n   >router是用的restful api\n   >\n   >app.use(router.routes());  此句的作用就是启用路由，将路由这个中间件加载给koa\n   >\n   >app.use(router.allowedMethods()); 此句的作用，是让路由自动识别方法，例如你的接口只实现了get方法，没有对应的post,put,delete方法，那么当你从页面上访问并没有定义的方法时，正常情况会识别到404返回，如果加载这个中间件，那么它会识别为405，表示你不允许这个方法操作\n\n4. 重定向 `// ctx.redirect('getTokens'); ` 会产生302 的状态码\n\n   ```js\n   // base-redirect.js\n   \n   /*\n    * @Author: Adam Dang\n    * @Description: 重定向路由\n    * @Date: 2021-01-08 14:25:38\n    * @LastEditors: Adam Dang\n    * @LastEditTime: 2021-01-08 14:25:38\n    */\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.body = {\n           token: '123'\n       };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   // 重定向到其他url上\n   router.get('/redirect', ctx => {\n       ctx.redirect('/getTokens');\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   // * 自动识别405等返回。\n   // * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405\n   app.use(router.allowedMethods());\n   \n   app.listen(3000);\n   \n   ```\n\n5.  通过监听error 事件处理错误 `ctx.throw(500);`   `app.on('error',(err, ctx)=>{ // handle })`\n\n   ```js\n   // base-handleError.js\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.throw(500);\n       // ctx.body = {\n       //     token: '123'\n       // };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   app.use(router.allowedMethods());\n   \n   // 错误处理\n   app.on('error', (err, ctx) => {\n       console.error('server error', err);\n   });\n   \n   app.listen(3000);\n   \n   ```\n\n   \n\n","source":"_posts/Koa.md","raw":"---\ntitle: Koa\ndate: 2021-01-08 14:51:16\ntags:\n- node\n- koa\ncategories:\n- node\n- koa\n---\n\n## Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。\n\n> 此文默认当前已有node环境，如果你没有node环境，请自行安装\n\n```js\n$ node -v\nv14.15.0\n```\n\n> 本地新建一个空目录，进行依赖的安装\n\n```js\nnpm init -y\nnpm i koa2 koa-router koa-static -S\n```\n\n1. 搭建http服务\n\n   ```js\n   // base.js\n   const Koa = require('koa2');\n   const app = new Koa();\n   \n   app.listen(3000);\n   ```\n\n   运行这个脚本，`node base.js`\n\n   然后在浏览器中输入`localhost:3000`， 你就会看到页面提示\"Not Found\"， 这就已经启动起来了。\n\n2. 建立静态页面，并使用koa-static来加载\n\n   ```js\n   // index.html\n   <html>\n       <head>\n           <meta charset=\"UTF-8\" />\n           <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=0\" />\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js\"></script>\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.20.0-0/axios.js\"></script>\n           <script src=\"https://cdn.bootcdn.net/ajax/libs/qs/6.9.4/qs.js\"></script>\n           <style>\n               /* .cube-btn {\n               margin: 10px 0;\n           } */\n           </style>\n       </head>\n   \n       <body>\n           <div id=\"app\">\n               <div>{{name}} : {{age}}</div>\n               <button @click=\"getTokens\">getTokens</button>\n               <button @click=\"setTokens\">setTokens</button>\n               <button @click=\"noAPI\">noAPI</button>\n               <button @click=\"redirect\">redirect</button>\n           </div>\n           <script>\n               var app = new Vue({\n                   el: '#app',\n                   data() {\n                       return {\n                           name: 'dangchaofeng',\n                           age: '28'\n                       };\n                   },\n                   methods: {\n                       async getTokens() {\n                           const res = await axios.get(`/getTokens`);\n                           console.log('res', res);\n                       },\n                       async setTokens() {\n                           const res = await axios.post(`/setTokens`);\n                           console.log('res', res);\n                       },\n                       async redirect() {\n                           const res = await axios.get(`/redirect`);\n                           console.log('res', res);\n                       },\n                       async noAPI() {\n                           const res = await axios.delete(`/noAPI`, {\n                               params: {\n                                   id: ' 1'\n                               }\n                           });\n                           console.log('res', res);\n                       }\n                   },\n                   mounted: function () {}\n               });\n           </script>\n       </body>\n   </html>\n   \n   // base-static.js\n   \n   const Koa = require('koa2');\n   const app = new Koa();\n   const static = require('koa-static');\n   const path = require('path');\n   \n   const main = static(path.join(__dirname));\n   \n   app.use(main);\n   app.listen(3000);\n   ```\n\n   运行这个脚本，`node base-static.js`\n\n   然后在浏览器中输入`localhost:3000`， 你就会看到自己的页面。\n\n3. 加载koa-router路由功能\n\n   ```js\n   // base-router.js\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.body = {\n           token: '123'\n       };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   router.post('/noAPI', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   // * 自动识别405等返回。\n   // * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405\n   app.use(router.allowedMethods());\n   \n   app.listen(3000);\n   \n   ```\n\n   >\n   >\n   >此处强调说明三点：\n   >\n   >router是用的restful api\n   >\n   >app.use(router.routes());  此句的作用就是启用路由，将路由这个中间件加载给koa\n   >\n   >app.use(router.allowedMethods()); 此句的作用，是让路由自动识别方法，例如你的接口只实现了get方法，没有对应的post,put,delete方法，那么当你从页面上访问并没有定义的方法时，正常情况会识别到404返回，如果加载这个中间件，那么它会识别为405，表示你不允许这个方法操作\n\n4. 重定向 `// ctx.redirect('getTokens'); ` 会产生302 的状态码\n\n   ```js\n   // base-redirect.js\n   \n   /*\n    * @Author: Adam Dang\n    * @Description: 重定向路由\n    * @Date: 2021-01-08 14:25:38\n    * @LastEditors: Adam Dang\n    * @LastEditTime: 2021-01-08 14:25:38\n    */\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.body = {\n           token: '123'\n       };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   // 重定向到其他url上\n   router.get('/redirect', ctx => {\n       ctx.redirect('/getTokens');\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   // * 自动识别405等返回。\n   // * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405\n   app.use(router.allowedMethods());\n   \n   app.listen(3000);\n   \n   ```\n\n5.  通过监听error 事件处理错误 `ctx.throw(500);`   `app.on('error',(err, ctx)=>{ // handle })`\n\n   ```js\n   // base-handleError.js\n   \n   const Koa = require('koa2');\n   const Router = require('koa-router');\n   const static = require('koa-static');\n   const path = require('path');\n   const app = new Koa();\n   const router = new Router();\n   \n   router.get('/getTokens', ctx => {\n       ctx.throw(500);\n       // ctx.body = {\n       //     token: '123'\n       // };\n   });\n   \n   router.post('/setTokens', ctx => {\n       ctx.body = {\n           success: true\n       };\n   });\n   \n   app.use(static(path.join(__dirname)));\n   \n   // 启用路由\n   app.use(router.routes());\n   app.use(router.allowedMethods());\n   \n   // 错误处理\n   app.on('error', (err, ctx) => {\n       console.error('server error', err);\n   });\n   \n   app.listen(3000);\n   \n   ```\n\n   \n\n","slug":"Koa","published":1,"updated":"2021-01-08T13:07:02.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjoaux5i0001de2xk7i9rr1y","content":"<h2 id=\"Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。\"><a href=\"#Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。\" class=\"headerlink\" title=\"Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。\"></a>Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。</h2><blockquote>\n<p>此文默认当前已有node环境，如果你没有node环境，请自行安装</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\">v14<span class=\"number\">.15</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>本地新建一个空目录，进行依赖的安装</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm i koa2 koa-router koa-<span class=\"keyword\">static</span> -S</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>搭建http服务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>运行这个脚本，<code>node base.js</code></p>\n<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到页面提示”Not Found”， 这就已经启动起来了。</p>\n</li>\n<li><p>建立静态页面，并使用koa-static来加载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">        &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=0\"</span> /&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;script src=\"https:/</span><span class=\"regexp\">/cdn.bootcdn.net/</span>ajax/libs/axios/<span class=\"number\">0.20</span><span class=\"number\">.0</span><span class=\"number\">-0</span>/axios.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script src=\"</span>https:<span class=\"comment\">//cdn.bootcdn.net/ajax/libs/qs/6.9.4/qs.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            <span class=\"comment\">/* .cube-btn &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            margin: 10px 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125; */</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">            &lt;div&gt;&#123;&#123;name&#125;&#125; : &#123;&#123;age&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;button @click=\"getTokens\"&gt;getTokens&lt;/</span>button&gt;</span><br><span class=\"line\">            &lt;button @click=<span class=\"string\">\"setTokens\"</span>&gt;setTokens&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;button @click=\"noAPI\"&gt;noAPI&lt;/</span>button&gt;</span><br><span class=\"line\">            &lt;button @click=<span class=\"string\">\"redirect\"</span>&gt;redirect&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">                el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">                data() &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">'dangchaofeng'</span>,</span><br><span class=\"line\">                        age: <span class=\"string\">'28'</span></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                methods: &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> getTokens() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/getTokens`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> setTokens() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.post(<span class=\"string\">`/setTokens`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> redirect() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/redirect`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> noAPI() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.delete(<span class=\"string\">`/noAPI`</span>, &#123;</span><br><span class=\"line\">                            params: &#123;</span><br><span class=\"line\">                                id: <span class=\"string\">' 1'</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ base-static.js</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Koa = require('koa2');</span></span><br><span class=\"line\"><span class=\"regexp\">const app = new Koa();</span></span><br><span class=\"line\"><span class=\"regexp\">const static = require('koa-static');</span></span><br><span class=\"line\"><span class=\"regexp\">const path = require('path');</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const main = static(path.join(__dirname));</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">app.use(main);</span></span><br><span class=\"line\"><span class=\"regexp\">app.listen(3000);</span></span><br></pre></td></tr></table></figure>\n<p>运行这个脚本，<code>node base-static.js</code></p>\n<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到自己的页面。</p>\n</li>\n<li><p>加载koa-router路由功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-router.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        token: <span class=\"string\">'123'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/noAPI'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"><span class=\"comment\">// * 自动识别405等返回。</span></span><br><span class=\"line\"><span class=\"comment\">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处强调说明三点：</p>\n<p>router是用的restful api</p>\n<p>app.use(router.routes());  此句的作用就是启用路由，将路由这个中间件加载给koa</p>\n<p>app.use(router.allowedMethods()); 此句的作用，是让路由自动识别方法，例如你的接口只实现了get方法，没有对应的post,put,delete方法，那么当你从页面上访问并没有定义的方法时，正常情况会识别到404返回，如果加载这个中间件，那么它会识别为405，表示你不允许这个方法操作</p>\n</blockquote>\n</li>\n<li><p>重定向 <code>// ctx.redirect(&#39;getTokens&#39;);</code> 会产生302 的状态码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-redirect.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: Adam Dang</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: 重定向路由</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2021-01-08 14:25:38</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: Adam Dang</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2021-01-08 14:25:38</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        token: <span class=\"string\">'123'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重定向到其他url上</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/redirect'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/getTokens'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"><span class=\"comment\">// * 自动识别405等返回。</span></span><br><span class=\"line\"><span class=\"comment\">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过监听error 事件处理错误 <code>ctx.throw(500);</code>   <code>app.on(&#39;error&#39;,(err, ctx)=&gt;{ // handle })</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-handleError.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.throw(<span class=\"number\">500</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ctx.body = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     token: '123'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">app.on(<span class=\"string\">'error'</span>, (err, ctx) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'server error'</span>, err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。\"><a href=\"#Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。\" class=\"headerlink\" title=\"Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。\"></a>Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。</h2><blockquote>\n<p>此文默认当前已有node环境，如果你没有node环境，请自行安装</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v</span><br><span class=\"line\">v14<span class=\"number\">.15</span><span class=\"number\">.0</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>本地新建一个空目录，进行依赖的安装</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm i koa2 koa-router koa-<span class=\"keyword\">static</span> -S</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>搭建http服务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>运行这个脚本，<code>node base.js</code></p>\n<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到页面提示”Not Found”， 这就已经启动起来了。</p>\n</li>\n<li><p>建立静态页面，并使用koa-static来加载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.html</span></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">        &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"width=device-width,initial-scale=1,user-scalable=0\"</span> /&gt;</span><br><span class=\"line\">        &lt;script src=<span class=\"string\">\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js\"</span>&gt;&lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;script src=\"https:/</span><span class=\"regexp\">/cdn.bootcdn.net/</span>ajax/libs/axios/<span class=\"number\">0.20</span><span class=\"number\">.0</span><span class=\"number\">-0</span>/axios.js<span class=\"string\">\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;script src=\"</span>https:<span class=\"comment\">//cdn.bootcdn.net/ajax/libs/qs/6.9.4/qs.js\"&gt;&lt;/script&gt;</span></span><br><span class=\"line\">        &lt;style&gt;</span><br><span class=\"line\">            <span class=\"comment\">/* .cube-btn &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            margin: 10px 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125; */</span></span><br><span class=\"line\">        &lt;<span class=\"regexp\">/style&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"app\"</span>&gt;</span><br><span class=\"line\">            &lt;div&gt;&#123;&#123;name&#125;&#125; : &#123;&#123;age&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;button @click=\"getTokens\"&gt;getTokens&lt;/</span>button&gt;</span><br><span class=\"line\">            &lt;button @click=<span class=\"string\">\"setTokens\"</span>&gt;setTokens&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;button @click=\"noAPI\"&gt;noAPI&lt;/</span>button&gt;</span><br><span class=\"line\">            &lt;button @click=<span class=\"string\">\"redirect\"</span>&gt;redirect&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>div&gt;</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">                el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">                data() &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                        name: <span class=\"string\">'dangchaofeng'</span>,</span><br><span class=\"line\">                        age: <span class=\"string\">'28'</span></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                methods: &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> getTokens() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/getTokens`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> setTokens() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.post(<span class=\"string\">`/setTokens`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> redirect() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">`/redirect`</span>);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"keyword\">async</span> noAPI() &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">const</span> res = <span class=\"keyword\">await</span> axios.delete(<span class=\"string\">`/noAPI`</span>, &#123;</span><br><span class=\"line\">                            params: &#123;</span><br><span class=\"line\">                                id: <span class=\"string\">' 1'</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(<span class=\"string\">'res'</span>, res);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                mounted: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>body&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/html&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ base-static.js</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const Koa = require('koa2');</span></span><br><span class=\"line\"><span class=\"regexp\">const app = new Koa();</span></span><br><span class=\"line\"><span class=\"regexp\">const static = require('koa-static');</span></span><br><span class=\"line\"><span class=\"regexp\">const path = require('path');</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const main = static(path.join(__dirname));</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">app.use(main);</span></span><br><span class=\"line\"><span class=\"regexp\">app.listen(3000);</span></span><br></pre></td></tr></table></figure>\n<p>运行这个脚本，<code>node base-static.js</code></p>\n<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到自己的页面。</p>\n</li>\n<li><p>加载koa-router路由功能</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-router.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        token: <span class=\"string\">'123'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/noAPI'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"><span class=\"comment\">// * 自动识别405等返回。</span></span><br><span class=\"line\"><span class=\"comment\">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>此处强调说明三点：</p>\n<p>router是用的restful api</p>\n<p>app.use(router.routes());  此句的作用就是启用路由，将路由这个中间件加载给koa</p>\n<p>app.use(router.allowedMethods()); 此句的作用，是让路由自动识别方法，例如你的接口只实现了get方法，没有对应的post,put,delete方法，那么当你从页面上访问并没有定义的方法时，正常情况会识别到404返回，如果加载这个中间件，那么它会识别为405，表示你不允许这个方法操作</p>\n</blockquote>\n</li>\n<li><p>重定向 <code>// ctx.redirect(&#39;getTokens&#39;);</code> 会产生302 的状态码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-redirect.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: Adam Dang</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: 重定向路由</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2021-01-08 14:25:38</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: Adam Dang</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2021-01-08 14:25:38</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        token: <span class=\"string\">'123'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重定向到其他url上</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/redirect'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.redirect(<span class=\"string\">'/getTokens'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\"><span class=\"comment\">// * 自动识别405等返回。</span></span><br><span class=\"line\"><span class=\"comment\">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过监听error 事件处理错误 <code>ctx.throw(500);</code>   <code>app.on(&#39;error&#39;,(err, ctx)=&gt;{ // handle })</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// base-handleError.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa2'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-static'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> Router();</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(<span class=\"string\">'/getTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.throw(<span class=\"number\">500</span>);</span><br><span class=\"line\">    <span class=\"comment\">// ctx.body = &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     token: '123'</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">'/setTokens'</span>, ctx =&gt; &#123;</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        success: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"keyword\">static</span>(path.join(__dirname)));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 启用路由</span></span><br><span class=\"line\">app.use(router.routes());</span><br><span class=\"line\">app.use(router.allowedMethods());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误处理</span></span><br><span class=\"line\">app.on(<span class=\"string\">'error'</span>, (err, ctx) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(<span class=\"string\">'server error'</span>, err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"词悬浮-词汇速记法2","date":"2018-12-26T11:50:03.000Z","comments":0,"_content":"\n# 第二堂课笔记\n\n>【金字塔排序的意义】：以战养战\n\n## 【词根】： -nat-(生)  -form-(形成)\n\n## 【前缀】：（常见30个）\n\n```js\nde- 向下，分\ninter- 在...之间，互相\ntrans- 通过，改变\nun- 否定\n\nin- 否定，内向，强调，使动\nnon- 否定\nsemi- 半\nper- 完全\ntrans- 通过，改变\nde- 分，向下\n```\n\n## 【后缀】：（常见40个）\n\n```js\n-er === or 形容词或名词后缀\n-ed 形容词、过去式、过去分词\n-less 形容词后缀，表否定\n-ness 名词后缀\n-al 形容词或名词后缀\n-ly 副词后缀\n-ity 名词后缀，表抽象含义\n\n-ics 学术名词后缀\n-ate 动词或形容词后缀\n-ion 名词后缀\n-ist 形容词或名词后缀\n-ic 形容词或名词后缀\n-s 名词后缀，复数名词后缀\n-ize 动词后缀，表使动\n-ism 名词后缀，表...主义\n-ist 名词后缀，表...主义者\n-ant 名词或形容词后缀\n-ive 名词或形容词后缀\n-ance 名词后缀\n-ing 形容词、动名词、现在分词\n-able 形容词后缀，表能...的\n-ation 复合名词后缀\n-ure 名词或动词后缀\n```\n\n## 【课后练习】：\n\n|         单词         | 前缀1 | 词根1 | 后缀1 | 后缀2 | 后缀3 | 后缀4 | 后缀5 | 含义 | 含义备选项（数字填写到'含义栏'） |\n| :------------------: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :--: | -------------------------------- |\n|      formality       |       |       |       |       |       |       |       |      | 1、adj.自然主义的                |\n|  denationalization   |       |       |       |       |       |       |       |      | 2、n.表演性                      |\n|      naturally       |       |       |       |       |       |       |       |      | 3、n.国有化                      |\n|      formation       |       |       |       |       |       |       |       |      | 4、n.变形金刚                    |\n|     naturalistic     |       |       |       |       |       |       |       |      | 5、n.跨国化                      |\n|   transfromational   |       |       |       |       |       |       |       |      | 6、n.编队                        |\n|   nationalization    |       |       |       |       |       |       |       |      | 7、adj.转换的                    |\n| transnationalization |       |       |       |       |       |       |       |      | 8、n.礼节                        |\n|     transformer      |       |       |       |       |       |       |       |      | 9、n.非国有化                    |\n|    performativity    |       |       |       |       |       |       |       |      | 10、adv.自然地                   |\n\n___\n\n## 【听力练习推荐看片】：\n\n![image text](English2/img.jpg)","source":"_posts/English2.md","raw":"---\ntitle: 词悬浮-词汇速记法2\ndate: 2018-12-26 19:50:03\ntags:\n- English\ncategories:\n- English\ncomments: false\n---\n\n# 第二堂课笔记\n\n>【金字塔排序的意义】：以战养战\n\n## 【词根】： -nat-(生)  -form-(形成)\n\n## 【前缀】：（常见30个）\n\n```js\nde- 向下，分\ninter- 在...之间，互相\ntrans- 通过，改变\nun- 否定\n\nin- 否定，内向，强调，使动\nnon- 否定\nsemi- 半\nper- 完全\ntrans- 通过，改变\nde- 分，向下\n```\n\n## 【后缀】：（常见40个）\n\n```js\n-er === or 形容词或名词后缀\n-ed 形容词、过去式、过去分词\n-less 形容词后缀，表否定\n-ness 名词后缀\n-al 形容词或名词后缀\n-ly 副词后缀\n-ity 名词后缀，表抽象含义\n\n-ics 学术名词后缀\n-ate 动词或形容词后缀\n-ion 名词后缀\n-ist 形容词或名词后缀\n-ic 形容词或名词后缀\n-s 名词后缀，复数名词后缀\n-ize 动词后缀，表使动\n-ism 名词后缀，表...主义\n-ist 名词后缀，表...主义者\n-ant 名词或形容词后缀\n-ive 名词或形容词后缀\n-ance 名词后缀\n-ing 形容词、动名词、现在分词\n-able 形容词后缀，表能...的\n-ation 复合名词后缀\n-ure 名词或动词后缀\n```\n\n## 【课后练习】：\n\n|         单词         | 前缀1 | 词根1 | 后缀1 | 后缀2 | 后缀3 | 后缀4 | 后缀5 | 含义 | 含义备选项（数字填写到'含义栏'） |\n| :------------------: | :---: | :---: | :---: | :---: | :---: | :---: | :---: | :--: | -------------------------------- |\n|      formality       |       |       |       |       |       |       |       |      | 1、adj.自然主义的                |\n|  denationalization   |       |       |       |       |       |       |       |      | 2、n.表演性                      |\n|      naturally       |       |       |       |       |       |       |       |      | 3、n.国有化                      |\n|      formation       |       |       |       |       |       |       |       |      | 4、n.变形金刚                    |\n|     naturalistic     |       |       |       |       |       |       |       |      | 5、n.跨国化                      |\n|   transfromational   |       |       |       |       |       |       |       |      | 6、n.编队                        |\n|   nationalization    |       |       |       |       |       |       |       |      | 7、adj.转换的                    |\n| transnationalization |       |       |       |       |       |       |       |      | 8、n.礼节                        |\n|     transformer      |       |       |       |       |       |       |       |      | 9、n.非国有化                    |\n|    performativity    |       |       |       |       |       |       |       |      | 10、adv.自然地                   |\n\n___\n\n## 【听力练习推荐看片】：\n\n![image text](English2/img.jpg)","slug":"English2","published":1,"updated":"2021-01-08T13:07:02.265Z","layout":"post","photos":[],"link":"","_id":"ckjoaux5y0004de2xuwizaufx","content":"<h1 id=\"第二堂课笔记\"><a href=\"#第二堂课笔记\" class=\"headerlink\" title=\"第二堂课笔记\"></a>第二堂课笔记</h1><blockquote>\n<p>【金字塔排序的意义】：以战养战</p>\n</blockquote>\n<h2 id=\"【词根】：-nat-生-form-形成\"><a href=\"#【词根】：-nat-生-form-形成\" class=\"headerlink\" title=\"【词根】： -nat-(生)  -form-(形成)\"></a>【词根】： -nat-(生)  -form-(形成)</h2><h2 id=\"【前缀】：（常见30个）\"><a href=\"#【前缀】：（常见30个）\" class=\"headerlink\" title=\"【前缀】：（常见30个）\"></a>【前缀】：（常见30个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">de- 向下，分</span><br><span class=\"line\">inter- 在...之间，互相</span><br><span class=\"line\">trans- 通过，改变</span><br><span class=\"line\">un- 否定</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span>- 否定，内向，强调，使动</span><br><span class=\"line\">non- 否定</span><br><span class=\"line\">semi- 半</span><br><span class=\"line\">per- 完全</span><br><span class=\"line\">trans- 通过，改变</span><br><span class=\"line\">de- 分，向下</span><br></pre></td></tr></table></figure>\n<h2 id=\"【后缀】：（常见40个）\"><a href=\"#【后缀】：（常见40个）\" class=\"headerlink\" title=\"【后缀】：（常见40个）\"></a>【后缀】：（常见40个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-er === or 形容词或名词后缀</span><br><span class=\"line\">-ed 形容词、过去式、过去分词</span><br><span class=\"line\">-less 形容词后缀，表否定</span><br><span class=\"line\">-ness 名词后缀</span><br><span class=\"line\">-al 形容词或名词后缀</span><br><span class=\"line\">-ly 副词后缀</span><br><span class=\"line\">-ity 名词后缀，表抽象含义</span><br><span class=\"line\"></span><br><span class=\"line\">-ics 学术名词后缀</span><br><span class=\"line\">-ate 动词或形容词后缀</span><br><span class=\"line\">-ion 名词后缀</span><br><span class=\"line\">-ist 形容词或名词后缀</span><br><span class=\"line\">-ic 形容词或名词后缀</span><br><span class=\"line\">-s 名词后缀，复数名词后缀</span><br><span class=\"line\">-ize 动词后缀，表使动</span><br><span class=\"line\">-ism 名词后缀，表...主义</span><br><span class=\"line\">-ist 名词后缀，表...主义者</span><br><span class=\"line\">-ant 名词或形容词后缀</span><br><span class=\"line\">-ive 名词或形容词后缀</span><br><span class=\"line\">-ance 名词后缀</span><br><span class=\"line\">-ing 形容词、动名词、现在分词</span><br><span class=\"line\">-able 形容词后缀，表能...的</span><br><span class=\"line\">-ation 复合名词后缀</span><br><span class=\"line\">-ure 名词或动词后缀</span><br></pre></td></tr></table></figure>\n<h2 id=\"【课后练习】：\"><a href=\"#【课后练习】：\" class=\"headerlink\" title=\"【课后练习】：\"></a>【课后练习】：</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">单词</th>\n<th style=\"text-align:center\">前缀1</th>\n<th style=\"text-align:center\">词根1</th>\n<th style=\"text-align:center\">后缀1</th>\n<th style=\"text-align:center\">后缀2</th>\n<th style=\"text-align:center\">后缀3</th>\n<th style=\"text-align:center\">后缀4</th>\n<th style=\"text-align:center\">后缀5</th>\n<th style=\"text-align:center\">含义</th>\n<th>含义备选项（数字填写到’含义栏’）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">formality</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>1、adj.自然主义的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">denationalization</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>2、n.表演性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">naturally</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>3、n.国有化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">formation</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>4、n.变形金刚</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">naturalistic</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>5、n.跨国化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">transfromational</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>6、n.编队</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nationalization</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>7、adj.转换的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">transnationalization</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>8、n.礼节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">transformer</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>9、n.非国有化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">performativity</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>10、adv.自然地</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"【听力练习推荐看片】：\"><a href=\"#【听力练习推荐看片】：\" class=\"headerlink\" title=\"【听力练习推荐看片】：\"></a>【听力练习推荐看片】：</h2><p><img src=\"/blog/dist/2018/12/26/English2/img.jpg\" alt=\"image text\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第二堂课笔记\"><a href=\"#第二堂课笔记\" class=\"headerlink\" title=\"第二堂课笔记\"></a>第二堂课笔记</h1><blockquote>\n<p>【金字塔排序的意义】：以战养战</p>\n</blockquote>\n<h2 id=\"【词根】：-nat-生-form-形成\"><a href=\"#【词根】：-nat-生-form-形成\" class=\"headerlink\" title=\"【词根】： -nat-(生)  -form-(形成)\"></a>【词根】： -nat-(生)  -form-(形成)</h2><h2 id=\"【前缀】：（常见30个）\"><a href=\"#【前缀】：（常见30个）\" class=\"headerlink\" title=\"【前缀】：（常见30个）\"></a>【前缀】：（常见30个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">de- 向下，分</span><br><span class=\"line\">inter- 在...之间，互相</span><br><span class=\"line\">trans- 通过，改变</span><br><span class=\"line\">un- 否定</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">in</span>- 否定，内向，强调，使动</span><br><span class=\"line\">non- 否定</span><br><span class=\"line\">semi- 半</span><br><span class=\"line\">per- 完全</span><br><span class=\"line\">trans- 通过，改变</span><br><span class=\"line\">de- 分，向下</span><br></pre></td></tr></table></figure>\n<h2 id=\"【后缀】：（常见40个）\"><a href=\"#【后缀】：（常见40个）\" class=\"headerlink\" title=\"【后缀】：（常见40个）\"></a>【后缀】：（常见40个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-er === or 形容词或名词后缀</span><br><span class=\"line\">-ed 形容词、过去式、过去分词</span><br><span class=\"line\">-less 形容词后缀，表否定</span><br><span class=\"line\">-ness 名词后缀</span><br><span class=\"line\">-al 形容词或名词后缀</span><br><span class=\"line\">-ly 副词后缀</span><br><span class=\"line\">-ity 名词后缀，表抽象含义</span><br><span class=\"line\"></span><br><span class=\"line\">-ics 学术名词后缀</span><br><span class=\"line\">-ate 动词或形容词后缀</span><br><span class=\"line\">-ion 名词后缀</span><br><span class=\"line\">-ist 形容词或名词后缀</span><br><span class=\"line\">-ic 形容词或名词后缀</span><br><span class=\"line\">-s 名词后缀，复数名词后缀</span><br><span class=\"line\">-ize 动词后缀，表使动</span><br><span class=\"line\">-ism 名词后缀，表...主义</span><br><span class=\"line\">-ist 名词后缀，表...主义者</span><br><span class=\"line\">-ant 名词或形容词后缀</span><br><span class=\"line\">-ive 名词或形容词后缀</span><br><span class=\"line\">-ance 名词后缀</span><br><span class=\"line\">-ing 形容词、动名词、现在分词</span><br><span class=\"line\">-able 形容词后缀，表能...的</span><br><span class=\"line\">-ation 复合名词后缀</span><br><span class=\"line\">-ure 名词或动词后缀</span><br></pre></td></tr></table></figure>\n<h2 id=\"【课后练习】：\"><a href=\"#【课后练习】：\" class=\"headerlink\" title=\"【课后练习】：\"></a>【课后练习】：</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">单词</th>\n<th style=\"text-align:center\">前缀1</th>\n<th style=\"text-align:center\">词根1</th>\n<th style=\"text-align:center\">后缀1</th>\n<th style=\"text-align:center\">后缀2</th>\n<th style=\"text-align:center\">后缀3</th>\n<th style=\"text-align:center\">后缀4</th>\n<th style=\"text-align:center\">后缀5</th>\n<th style=\"text-align:center\">含义</th>\n<th>含义备选项（数字填写到’含义栏’）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">formality</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>1、adj.自然主义的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">denationalization</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>2、n.表演性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">naturally</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>3、n.国有化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">formation</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>4、n.变形金刚</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">naturalistic</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>5、n.跨国化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">transfromational</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>6、n.编队</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nationalization</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>7、adj.转换的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">transnationalization</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>8、n.礼节</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">transformer</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>9、n.非国有化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">performativity</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td>10、adv.自然地</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"【听力练习推荐看片】：\"><a href=\"#【听力练习推荐看片】：\" class=\"headerlink\" title=\"【听力练习推荐看片】：\"></a>【听力练习推荐看片】：</h2><p><img src=\"/blog/dist/2018/12/26/English2/img.jpg\" alt=\"image text\"></p>\n"},{"title":"词悬浮-词汇速记法3","date":"2018-12-27T11:59:58.000Z","comments":0,"_content":"\n# 第三堂课笔记\n\n* ##### 速记的心法： 半母语式学习\n\n* ##### 论拉丁语在英语词汇学习中的重要性\n\n* ##### 掌握拉丁语词根即可\n\n## 【词根】： -vis- =  -vid- (看) 、-it-(走)、-tele-(远)、-gram- = -graph- (写，画，图)、-phot-(光)、-o-(连字符)、-geo-(大地)、-electr-(电)、-phon-(声音)、-cardi-(心)、-astro-(星系)、-stud-(学习，工作)、-aud-(听)、-rad-(辐射)、-cast-(投掷)、-cass-(拿)、\n\n> 建议：学会画思维导图，供复习使用。\n\n## 【前缀】：（常见30个）\n\n```js\nre- 往回，重复，再次\nsuper- 在上，超过\npro- 向前\ne- 向外\n\nad- 强调\nin- = im- 向内，强调，否定 \nself-自己\n```\n\n\n\n## 【后缀】：（常见40个）\n\n```js\n-or 名词或形容词后缀\n-able = -ible 形容词后缀，表能...的\n-ory = -ary 形容词或名词后缀\n-ice 名词后缀\n-ion 名词后缀\n-ism 名词后缀，表...主义\n-ist 名词或形容词后缀\n-ly 副词后缀\n-ize = -ise 动词后缀，表使动\n\n-ed 形容词或过去式或过去分词后缀\n-ing 形容词或动名词或现在分词后缀\n-e 名词或动词后缀\n-al 形容词或名词后缀\n-ent 名词或形容词后缀\n-o 名词后缀\n-ate 形容词或名词后缀\n-ette 名词后缀，表小\n-ence 名词后缀\n\n```\n\n## 【课后练习】：\n\n| 单词          | 前缀1 | 词根1 | 后缀1 | 后缀2 | 含义 | 含义备选项            |\n| ------------- | ----- | ----- | ----- | ----- | ---- | --------------------- |\n| respected     |       |       |       |       |      | 1、adv.期望地         |\n| inspector     |       |       |       |       |      | 2、n.定义             |\n| retrospect    |       |       |       |       |      | 3、n.内省             |\n| finish        |       |       |       |       |      | 4、adj.无限的         |\n| expectantly   |       |       |       |       |      | 5、n.（美）公寓       |\n| department    |       |       |       |       |      | 6、vi.回顾            |\n| introspection |       |       |       |       |      | 7、adj.受尊敬的       |\n| aprtment      |       |       |       |       |      | 8、vt.完成            |\n| definition    |       |       |       |       |      | 9、n.（大学的）科、系 |\n| Infinite      |       |       |       |       |      | 10、n.检查员          |\n\n","source":"_posts/English3.md","raw":"---\ntitle: 词悬浮-词汇速记法3\ndate: 2018-12-27 19:59:58\ntags: \n- English\ncategories:\n- English\ncomments: false\n---\n\n# 第三堂课笔记\n\n* ##### 速记的心法： 半母语式学习\n\n* ##### 论拉丁语在英语词汇学习中的重要性\n\n* ##### 掌握拉丁语词根即可\n\n## 【词根】： -vis- =  -vid- (看) 、-it-(走)、-tele-(远)、-gram- = -graph- (写，画，图)、-phot-(光)、-o-(连字符)、-geo-(大地)、-electr-(电)、-phon-(声音)、-cardi-(心)、-astro-(星系)、-stud-(学习，工作)、-aud-(听)、-rad-(辐射)、-cast-(投掷)、-cass-(拿)、\n\n> 建议：学会画思维导图，供复习使用。\n\n## 【前缀】：（常见30个）\n\n```js\nre- 往回，重复，再次\nsuper- 在上，超过\npro- 向前\ne- 向外\n\nad- 强调\nin- = im- 向内，强调，否定 \nself-自己\n```\n\n\n\n## 【后缀】：（常见40个）\n\n```js\n-or 名词或形容词后缀\n-able = -ible 形容词后缀，表能...的\n-ory = -ary 形容词或名词后缀\n-ice 名词后缀\n-ion 名词后缀\n-ism 名词后缀，表...主义\n-ist 名词或形容词后缀\n-ly 副词后缀\n-ize = -ise 动词后缀，表使动\n\n-ed 形容词或过去式或过去分词后缀\n-ing 形容词或动名词或现在分词后缀\n-e 名词或动词后缀\n-al 形容词或名词后缀\n-ent 名词或形容词后缀\n-o 名词后缀\n-ate 形容词或名词后缀\n-ette 名词后缀，表小\n-ence 名词后缀\n\n```\n\n## 【课后练习】：\n\n| 单词          | 前缀1 | 词根1 | 后缀1 | 后缀2 | 含义 | 含义备选项            |\n| ------------- | ----- | ----- | ----- | ----- | ---- | --------------------- |\n| respected     |       |       |       |       |      | 1、adv.期望地         |\n| inspector     |       |       |       |       |      | 2、n.定义             |\n| retrospect    |       |       |       |       |      | 3、n.内省             |\n| finish        |       |       |       |       |      | 4、adj.无限的         |\n| expectantly   |       |       |       |       |      | 5、n.（美）公寓       |\n| department    |       |       |       |       |      | 6、vi.回顾            |\n| introspection |       |       |       |       |      | 7、adj.受尊敬的       |\n| aprtment      |       |       |       |       |      | 8、vt.完成            |\n| definition    |       |       |       |       |      | 9、n.（大学的）科、系 |\n| Infinite      |       |       |       |       |      | 10、n.检查员          |\n\n","slug":"English3","published":1,"updated":"2021-01-08T13:07:02.271Z","layout":"post","photos":[],"link":"","_id":"ckjoaux670005de2x05929b12","content":"<h1 id=\"第三堂课笔记\"><a href=\"#第三堂课笔记\" class=\"headerlink\" title=\"第三堂课笔记\"></a>第三堂课笔记</h1><ul>\n<li><h5 id=\"速记的心法：-半母语式学习\"><a href=\"#速记的心法：-半母语式学习\" class=\"headerlink\" title=\"速记的心法： 半母语式学习\"></a>速记的心法： 半母语式学习</h5></li>\n<li><h5 id=\"论拉丁语在英语词汇学习中的重要性\"><a href=\"#论拉丁语在英语词汇学习中的重要性\" class=\"headerlink\" title=\"论拉丁语在英语词汇学习中的重要性\"></a>论拉丁语在英语词汇学习中的重要性</h5></li>\n<li><h5 id=\"掌握拉丁语词根即可\"><a href=\"#掌握拉丁语词根即可\" class=\"headerlink\" title=\"掌握拉丁语词根即可\"></a>掌握拉丁语词根即可</h5></li>\n</ul>\n<h2 id=\"【词根】：-vis-vid-看-、-it-走-、-tele-远-、-gram-graph-写，画，图-、-phot-光-、-o-连字符-、-geo-大地-、-electr-电-、-phon-声音-、-cardi-心-、-astro-星系-、-stud-学习，工作-、-aud-听-、-rad-辐射-、-cast-投掷-、-cass-拿-、\"><a href=\"#【词根】：-vis-vid-看-、-it-走-、-tele-远-、-gram-graph-写，画，图-、-phot-光-、-o-连字符-、-geo-大地-、-electr-电-、-phon-声音-、-cardi-心-、-astro-星系-、-stud-学习，工作-、-aud-听-、-rad-辐射-、-cast-投掷-、-cass-拿-、\" class=\"headerlink\" title=\"【词根】： -vis- =  -vid- (看) 、-it-(走)、-tele-(远)、-gram- = -graph- (写，画，图)、-phot-(光)、-o-(连字符)、-geo-(大地)、-electr-(电)、-phon-(声音)、-cardi-(心)、-astro-(星系)、-stud-(学习，工作)、-aud-(听)、-rad-(辐射)、-cast-(投掷)、-cass-(拿)、\"></a>【词根】： -vis- =  -vid- (看) 、-it-(走)、-tele-(远)、-gram- = -graph- (写，画，图)、-phot-(光)、-o-(连字符)、-geo-(大地)、-electr-(电)、-phon-(声音)、-cardi-(心)、-astro-(星系)、-stud-(学习，工作)、-aud-(听)、-rad-(辐射)、-cast-(投掷)、-cass-(拿)、</h2><blockquote>\n<p>建议：学会画思维导图，供复习使用。</p>\n</blockquote>\n<h2 id=\"【前缀】：（常见30个）\"><a href=\"#【前缀】：（常见30个）\" class=\"headerlink\" title=\"【前缀】：（常见30个）\"></a>【前缀】：（常见30个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re- 往回，重复，再次</span><br><span class=\"line\"><span class=\"keyword\">super</span>- 在上，超过</span><br><span class=\"line\">pro- 向前</span><br><span class=\"line\">e- 向外</span><br><span class=\"line\"></span><br><span class=\"line\">ad- 强调</span><br><span class=\"line\"><span class=\"keyword\">in</span>- = im- 向内，强调，否定 </span><br><span class=\"line\">self-自己</span><br></pre></td></tr></table></figure>\n<h2 id=\"【后缀】：（常见40个）\"><a href=\"#【后缀】：（常见40个）\" class=\"headerlink\" title=\"【后缀】：（常见40个）\"></a>【后缀】：（常见40个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-or 名词或形容词后缀</span><br><span class=\"line\">-able = -ible 形容词后缀，表能...的</span><br><span class=\"line\">-ory = -ary 形容词或名词后缀</span><br><span class=\"line\">-ice 名词后缀</span><br><span class=\"line\">-ion 名词后缀</span><br><span class=\"line\">-ism 名词后缀，表...主义</span><br><span class=\"line\">-ist 名词或形容词后缀</span><br><span class=\"line\">-ly 副词后缀</span><br><span class=\"line\">-ize = -ise 动词后缀，表使动</span><br><span class=\"line\"></span><br><span class=\"line\">-ed 形容词或过去式或过去分词后缀</span><br><span class=\"line\">-ing 形容词或动名词或现在分词后缀</span><br><span class=\"line\">-e 名词或动词后缀</span><br><span class=\"line\">-al 形容词或名词后缀</span><br><span class=\"line\">-ent 名词或形容词后缀</span><br><span class=\"line\">-o 名词后缀</span><br><span class=\"line\">-ate 形容词或名词后缀</span><br><span class=\"line\">-ette 名词后缀，表小</span><br><span class=\"line\">-ence 名词后缀</span><br></pre></td></tr></table></figure>\n<h2 id=\"【课后练习】：\"><a href=\"#【课后练习】：\" class=\"headerlink\" title=\"【课后练习】：\"></a>【课后练习】：</h2><table>\n<thead>\n<tr>\n<th>单词</th>\n<th>前缀1</th>\n<th>词根1</th>\n<th>后缀1</th>\n<th>后缀2</th>\n<th>含义</th>\n<th>含义备选项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>respected</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>1、adv.期望地</td>\n</tr>\n<tr>\n<td>inspector</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>2、n.定义</td>\n</tr>\n<tr>\n<td>retrospect</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>3、n.内省</td>\n</tr>\n<tr>\n<td>finish</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>4、adj.无限的</td>\n</tr>\n<tr>\n<td>expectantly</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>5、n.（美）公寓</td>\n</tr>\n<tr>\n<td>department</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>6、vi.回顾</td>\n</tr>\n<tr>\n<td>introspection</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>7、adj.受尊敬的</td>\n</tr>\n<tr>\n<td>aprtment</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>8、vt.完成</td>\n</tr>\n<tr>\n<td>definition</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>9、n.（大学的）科、系</td>\n</tr>\n<tr>\n<td>Infinite</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>10、n.检查员</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"第三堂课笔记\"><a href=\"#第三堂课笔记\" class=\"headerlink\" title=\"第三堂课笔记\"></a>第三堂课笔记</h1><ul>\n<li><h5 id=\"速记的心法：-半母语式学习\"><a href=\"#速记的心法：-半母语式学习\" class=\"headerlink\" title=\"速记的心法： 半母语式学习\"></a>速记的心法： 半母语式学习</h5></li>\n<li><h5 id=\"论拉丁语在英语词汇学习中的重要性\"><a href=\"#论拉丁语在英语词汇学习中的重要性\" class=\"headerlink\" title=\"论拉丁语在英语词汇学习中的重要性\"></a>论拉丁语在英语词汇学习中的重要性</h5></li>\n<li><h5 id=\"掌握拉丁语词根即可\"><a href=\"#掌握拉丁语词根即可\" class=\"headerlink\" title=\"掌握拉丁语词根即可\"></a>掌握拉丁语词根即可</h5></li>\n</ul>\n<h2 id=\"【词根】：-vis-vid-看-、-it-走-、-tele-远-、-gram-graph-写，画，图-、-phot-光-、-o-连字符-、-geo-大地-、-electr-电-、-phon-声音-、-cardi-心-、-astro-星系-、-stud-学习，工作-、-aud-听-、-rad-辐射-、-cast-投掷-、-cass-拿-、\"><a href=\"#【词根】：-vis-vid-看-、-it-走-、-tele-远-、-gram-graph-写，画，图-、-phot-光-、-o-连字符-、-geo-大地-、-electr-电-、-phon-声音-、-cardi-心-、-astro-星系-、-stud-学习，工作-、-aud-听-、-rad-辐射-、-cast-投掷-、-cass-拿-、\" class=\"headerlink\" title=\"【词根】： -vis- =  -vid- (看) 、-it-(走)、-tele-(远)、-gram- = -graph- (写，画，图)、-phot-(光)、-o-(连字符)、-geo-(大地)、-electr-(电)、-phon-(声音)、-cardi-(心)、-astro-(星系)、-stud-(学习，工作)、-aud-(听)、-rad-(辐射)、-cast-(投掷)、-cass-(拿)、\"></a>【词根】： -vis- =  -vid- (看) 、-it-(走)、-tele-(远)、-gram- = -graph- (写，画，图)、-phot-(光)、-o-(连字符)、-geo-(大地)、-electr-(电)、-phon-(声音)、-cardi-(心)、-astro-(星系)、-stud-(学习，工作)、-aud-(听)、-rad-(辐射)、-cast-(投掷)、-cass-(拿)、</h2><blockquote>\n<p>建议：学会画思维导图，供复习使用。</p>\n</blockquote>\n<h2 id=\"【前缀】：（常见30个）\"><a href=\"#【前缀】：（常见30个）\" class=\"headerlink\" title=\"【前缀】：（常见30个）\"></a>【前缀】：（常见30个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">re- 往回，重复，再次</span><br><span class=\"line\"><span class=\"keyword\">super</span>- 在上，超过</span><br><span class=\"line\">pro- 向前</span><br><span class=\"line\">e- 向外</span><br><span class=\"line\"></span><br><span class=\"line\">ad- 强调</span><br><span class=\"line\"><span class=\"keyword\">in</span>- = im- 向内，强调，否定 </span><br><span class=\"line\">self-自己</span><br></pre></td></tr></table></figure>\n<h2 id=\"【后缀】：（常见40个）\"><a href=\"#【后缀】：（常见40个）\" class=\"headerlink\" title=\"【后缀】：（常见40个）\"></a>【后缀】：（常见40个）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-or 名词或形容词后缀</span><br><span class=\"line\">-able = -ible 形容词后缀，表能...的</span><br><span class=\"line\">-ory = -ary 形容词或名词后缀</span><br><span class=\"line\">-ice 名词后缀</span><br><span class=\"line\">-ion 名词后缀</span><br><span class=\"line\">-ism 名词后缀，表...主义</span><br><span class=\"line\">-ist 名词或形容词后缀</span><br><span class=\"line\">-ly 副词后缀</span><br><span class=\"line\">-ize = -ise 动词后缀，表使动</span><br><span class=\"line\"></span><br><span class=\"line\">-ed 形容词或过去式或过去分词后缀</span><br><span class=\"line\">-ing 形容词或动名词或现在分词后缀</span><br><span class=\"line\">-e 名词或动词后缀</span><br><span class=\"line\">-al 形容词或名词后缀</span><br><span class=\"line\">-ent 名词或形容词后缀</span><br><span class=\"line\">-o 名词后缀</span><br><span class=\"line\">-ate 形容词或名词后缀</span><br><span class=\"line\">-ette 名词后缀，表小</span><br><span class=\"line\">-ence 名词后缀</span><br></pre></td></tr></table></figure>\n<h2 id=\"【课后练习】：\"><a href=\"#【课后练习】：\" class=\"headerlink\" title=\"【课后练习】：\"></a>【课后练习】：</h2><table>\n<thead>\n<tr>\n<th>单词</th>\n<th>前缀1</th>\n<th>词根1</th>\n<th>后缀1</th>\n<th>后缀2</th>\n<th>含义</th>\n<th>含义备选项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>respected</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>1、adv.期望地</td>\n</tr>\n<tr>\n<td>inspector</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>2、n.定义</td>\n</tr>\n<tr>\n<td>retrospect</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>3、n.内省</td>\n</tr>\n<tr>\n<td>finish</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>4、adj.无限的</td>\n</tr>\n<tr>\n<td>expectantly</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>5、n.（美）公寓</td>\n</tr>\n<tr>\n<td>department</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>6、vi.回顾</td>\n</tr>\n<tr>\n<td>introspection</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>7、adj.受尊敬的</td>\n</tr>\n<tr>\n<td>aprtment</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>8、vt.完成</td>\n</tr>\n<tr>\n<td>definition</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>9、n.（大学的）科、系</td>\n</tr>\n<tr>\n<td>Infinite</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td>10、n.检查员</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"TDD","date":"2021-01-08T06:41:10.000Z","_content":"\n- 传统开发 primitive\n\n  - 流程不清晰\n  - 反复确认\n  - 人力沟通成本大\n  - 代码难以维护\n\n  \n\n- 测试驱动开发 test-driven development(TDD)\n\n  - 先确定需求\n  - 再确定验收标准\n  - 编写test \n  - 编写业务代码\n  - run test\n  - submit code\n\n> 这里需要说明一下， 在当下2021年，TDD模式被coder们更偏向为开发完之后再开发 e2e,  unit test来测试自己的代码运行。","source":"_posts/TDD.md","raw":"---\ntitle: TDD\ndate: 2021-01-08 14:41:10\ntags:\n- TDD\ncategories:\n- TDD\n---\n\n- 传统开发 primitive\n\n  - 流程不清晰\n  - 反复确认\n  - 人力沟通成本大\n  - 代码难以维护\n\n  \n\n- 测试驱动开发 test-driven development(TDD)\n\n  - 先确定需求\n  - 再确定验收标准\n  - 编写test \n  - 编写业务代码\n  - run test\n  - submit code\n\n> 这里需要说明一下， 在当下2021年，TDD模式被coder们更偏向为开发完之后再开发 e2e,  unit test来测试自己的代码运行。","slug":"TDD","published":1,"updated":"2021-01-08T13:07:02.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjoaux6b0006de2xsbeebmxn","content":"<ul>\n<li><p>传统开发 primitive</p>\n<ul>\n<li>流程不清晰</li>\n<li>反复确认</li>\n<li>人力沟通成本大</li>\n<li>代码难以维护</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>测试驱动开发 test-driven development(TDD)</p>\n<ul>\n<li>先确定需求</li>\n<li>再确定验收标准</li>\n<li>编写test </li>\n<li>编写业务代码</li>\n<li>run test</li>\n<li>submit code</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这里需要说明一下， 在当下2021年，TDD模式被coder们更偏向为开发完之后再开发 e2e,  unit test来测试自己的代码运行。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>传统开发 primitive</p>\n<ul>\n<li>流程不清晰</li>\n<li>反复确认</li>\n<li>人力沟通成本大</li>\n<li>代码难以维护</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>测试驱动开发 test-driven development(TDD)</p>\n<ul>\n<li>先确定需求</li>\n<li>再确定验收标准</li>\n<li>编写test </li>\n<li>编写业务代码</li>\n<li>run test</li>\n<li>submit code</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这里需要说明一下， 在当下2021年，TDD模式被coder们更偏向为开发完之后再开发 e2e,  unit test来测试自己的代码运行。</p>\n</blockquote>\n"},{"title":"design-patterns","date":"2020-09-21T15:02:59.000Z","_content":"\n# 设计模式\n\n> 细节分类\n\n- 【发布订阅模式】vue 中的实现$on,$emit,$off\n- 【单例模式】errorDialog 可以使用进行优化\n- 【策略模式】vue 中的 form rule，配置化使用，map 结构提供策略可配置，环境类的去调用 map 中的实际方案（value）去执行，Monitor 校验配置使用的\n  - { key: ()=>{} }\n- 【代理模式】防抖节流， Proxy, defineProperty， 主要是替代访问本体的功能\n- 【中介者模式】目的，减少耦合，eg: 购物车需求,redux, vuex 都是中介者模式，通过 store 这个中介来操作对象\n- 【装饰器模式】eg: react 高阶组件, 主要是添加行为。\n- 【外观模式】外面只调用一个函数， 内部判断不同的分支，实现具体的逻辑\n- 【工厂模式】提供一个专门创建对象的接口\n- 【建造者模式】和工厂模式相比，参与了更多创建的过程 或者更为复杂\n- 【迭代器模式】\n- 【享元模式】重复利用一个模特，穿不同的衣服\n- 【责任链模式】中间件机制，每个中间件串行的对你的东西进行加工判断处理\n- 【适配器模式】理解为外观模式？\n\n> 大分类\n\n- 创建型设计模式\n  - 构造器模式\n  - 原型模式\n  - 工厂模式\n    - 提供一个接口实现创建，接口内部才是调用new Class()\n  - abstract factory 抽象工厂\n    - 内部的class可以通过接口进行注册\n  - 单例模式\n  - prototype模式\n    - object.create(obj, {}) 实际原理是函数委托给别人\n  - module模式\n    - 闭包自执行函数，暴露一个变量给外部使用，通过变量来操作内部私有属性\n  - 抽象模式\n  - 生成器模式（可以理解为一个生成器中包含了多个类的实例化，复杂化后的工厂模式）\n- 结构型设计模式（专注类和对象的组合）\n  - 代理模式\n    - 提供一个代理者去帮助你操作实际的内容，代理者会考虑容错场景，提供备选方案(loading 图片的展示，等实际加载完图片，再切换新的src)\n  - 外观模式\n    - 外部调用统一，内部实现进行判断兼容性\n  - Command（命令）模式\n    - 通过不同的命令（传参）做不同的事情，常含有（关联）接收者\n    - execute('requestInfo', 'Ford Mondeo', '321')\n    - execute('buyVehicle', 'Ford Escort', '789')\n  - Facade（外观）模式\n  - Mixin模式\n    - 类似于extend, merge等函数，将两个对象的key合并成一个，重复的以优先级进行覆盖\n  - Decorator（装饰器）模式\n  - Flyweight（享元）模式\n- 行为设计模式\n  - 观察者（发布订阅者模式） 关注对象之间的通信\n  - 策略模式\n    - 不同的算法做同一件事情\n\n> 设计原则 `人月神话` `代码大全` `unix编程艺术`\n\n- 开放封闭，开放扩展，封闭修改\n- 依赖倒转\n- 单一职责\n- 里式替换\n- 合成复用\n  - 组合优于继承\n\n> 学习设计模式的目的： 写着舒服，维护更舒服\n\n> 什么时候用\n\n- 带来开发收益\n- 带来可维护性收益\n- 把设计模式和组件挂钩（elementUI, antDesign）\n- 没有这些，if else 就是最简单的代码\n- 不要滥用\n- 懒，才是程序员成长的动力\n\n> 项目内部设计原则\n\n- 布鲁克斯法则： 软件开发的后期，添加人力，会让项目更慢\n- KISS 原则：保持简单,simple and stupid 模块设计需要遵循\n- 备份\n- 软件开发没有银弹\n- 过早优化效应\n  - 过早的优化是万恶之源\n\n> 学习感言\n\n```js\n代码处处是模式，其实设计模式的大白话就是套路，大家都实践过很多遍之后得出的真理。学习中间，就会发现，其实自己\n的代码当中很多地方已经用到了设计模式，只是你自己不知道那叫什么名字\n```","source":"_posts/design-patterns.md","raw":"---\ntitle: design-patterns\ndate: 2020-09-21 23:02:59\ntags:\n- desgin-patterns\ncategories:\n- desgin-patterns\n---\n\n# 设计模式\n\n> 细节分类\n\n- 【发布订阅模式】vue 中的实现$on,$emit,$off\n- 【单例模式】errorDialog 可以使用进行优化\n- 【策略模式】vue 中的 form rule，配置化使用，map 结构提供策略可配置，环境类的去调用 map 中的实际方案（value）去执行，Monitor 校验配置使用的\n  - { key: ()=>{} }\n- 【代理模式】防抖节流， Proxy, defineProperty， 主要是替代访问本体的功能\n- 【中介者模式】目的，减少耦合，eg: 购物车需求,redux, vuex 都是中介者模式，通过 store 这个中介来操作对象\n- 【装饰器模式】eg: react 高阶组件, 主要是添加行为。\n- 【外观模式】外面只调用一个函数， 内部判断不同的分支，实现具体的逻辑\n- 【工厂模式】提供一个专门创建对象的接口\n- 【建造者模式】和工厂模式相比，参与了更多创建的过程 或者更为复杂\n- 【迭代器模式】\n- 【享元模式】重复利用一个模特，穿不同的衣服\n- 【责任链模式】中间件机制，每个中间件串行的对你的东西进行加工判断处理\n- 【适配器模式】理解为外观模式？\n\n> 大分类\n\n- 创建型设计模式\n  - 构造器模式\n  - 原型模式\n  - 工厂模式\n    - 提供一个接口实现创建，接口内部才是调用new Class()\n  - abstract factory 抽象工厂\n    - 内部的class可以通过接口进行注册\n  - 单例模式\n  - prototype模式\n    - object.create(obj, {}) 实际原理是函数委托给别人\n  - module模式\n    - 闭包自执行函数，暴露一个变量给外部使用，通过变量来操作内部私有属性\n  - 抽象模式\n  - 生成器模式（可以理解为一个生成器中包含了多个类的实例化，复杂化后的工厂模式）\n- 结构型设计模式（专注类和对象的组合）\n  - 代理模式\n    - 提供一个代理者去帮助你操作实际的内容，代理者会考虑容错场景，提供备选方案(loading 图片的展示，等实际加载完图片，再切换新的src)\n  - 外观模式\n    - 外部调用统一，内部实现进行判断兼容性\n  - Command（命令）模式\n    - 通过不同的命令（传参）做不同的事情，常含有（关联）接收者\n    - execute('requestInfo', 'Ford Mondeo', '321')\n    - execute('buyVehicle', 'Ford Escort', '789')\n  - Facade（外观）模式\n  - Mixin模式\n    - 类似于extend, merge等函数，将两个对象的key合并成一个，重复的以优先级进行覆盖\n  - Decorator（装饰器）模式\n  - Flyweight（享元）模式\n- 行为设计模式\n  - 观察者（发布订阅者模式） 关注对象之间的通信\n  - 策略模式\n    - 不同的算法做同一件事情\n\n> 设计原则 `人月神话` `代码大全` `unix编程艺术`\n\n- 开放封闭，开放扩展，封闭修改\n- 依赖倒转\n- 单一职责\n- 里式替换\n- 合成复用\n  - 组合优于继承\n\n> 学习设计模式的目的： 写着舒服，维护更舒服\n\n> 什么时候用\n\n- 带来开发收益\n- 带来可维护性收益\n- 把设计模式和组件挂钩（elementUI, antDesign）\n- 没有这些，if else 就是最简单的代码\n- 不要滥用\n- 懒，才是程序员成长的动力\n\n> 项目内部设计原则\n\n- 布鲁克斯法则： 软件开发的后期，添加人力，会让项目更慢\n- KISS 原则：保持简单,simple and stupid 模块设计需要遵循\n- 备份\n- 软件开发没有银弹\n- 过早优化效应\n  - 过早的优化是万恶之源\n\n> 学习感言\n\n```js\n代码处处是模式，其实设计模式的大白话就是套路，大家都实践过很多遍之后得出的真理。学习中间，就会发现，其实自己\n的代码当中很多地方已经用到了设计模式，只是你自己不知道那叫什么名字\n```","slug":"design-patterns","published":1,"updated":"2021-01-08T13:07:02.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjoaux6i000ade2xh9rjl87r","content":"<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><blockquote>\n<p>细节分类</p>\n</blockquote>\n<ul>\n<li>【发布订阅模式】vue 中的实现$on,$emit,$off</li>\n<li>【单例模式】errorDialog 可以使用进行优化</li>\n<li>【策略模式】vue 中的 form rule，配置化使用，map 结构提供策略可配置，环境类的去调用 map 中的实际方案（value）去执行，Monitor 校验配置使用的<ul>\n<li>{ key: ()=&gt;{} }</li>\n</ul>\n</li>\n<li>【代理模式】防抖节流， Proxy, defineProperty， 主要是替代访问本体的功能</li>\n<li>【中介者模式】目的，减少耦合，eg: 购物车需求,redux, vuex 都是中介者模式，通过 store 这个中介来操作对象</li>\n<li>【装饰器模式】eg: react 高阶组件, 主要是添加行为。</li>\n<li>【外观模式】外面只调用一个函数， 内部判断不同的分支，实现具体的逻辑</li>\n<li>【工厂模式】提供一个专门创建对象的接口</li>\n<li>【建造者模式】和工厂模式相比，参与了更多创建的过程 或者更为复杂</li>\n<li>【迭代器模式】</li>\n<li>【享元模式】重复利用一个模特，穿不同的衣服</li>\n<li>【责任链模式】中间件机制，每个中间件串行的对你的东西进行加工判断处理</li>\n<li>【适配器模式】理解为外观模式？</li>\n</ul>\n<blockquote>\n<p>大分类</p>\n</blockquote>\n<ul>\n<li>创建型设计模式<ul>\n<li>构造器模式</li>\n<li>原型模式</li>\n<li>工厂模式<ul>\n<li>提供一个接口实现创建，接口内部才是调用new Class()</li>\n</ul>\n</li>\n<li>abstract factory 抽象工厂<ul>\n<li>内部的class可以通过接口进行注册</li>\n</ul>\n</li>\n<li>单例模式</li>\n<li>prototype模式<ul>\n<li>object.create(obj, {}) 实际原理是函数委托给别人</li>\n</ul>\n</li>\n<li>module模式<ul>\n<li>闭包自执行函数，暴露一个变量给外部使用，通过变量来操作内部私有属性</li>\n</ul>\n</li>\n<li>抽象模式</li>\n<li>生成器模式（可以理解为一个生成器中包含了多个类的实例化，复杂化后的工厂模式）</li>\n</ul>\n</li>\n<li>结构型设计模式（专注类和对象的组合）<ul>\n<li>代理模式<ul>\n<li>提供一个代理者去帮助你操作实际的内容，代理者会考虑容错场景，提供备选方案(loading 图片的展示，等实际加载完图片，再切换新的src)</li>\n</ul>\n</li>\n<li>外观模式<ul>\n<li>外部调用统一，内部实现进行判断兼容性</li>\n</ul>\n</li>\n<li>Command（命令）模式<ul>\n<li>通过不同的命令（传参）做不同的事情，常含有（关联）接收者</li>\n<li>execute(‘requestInfo’, ‘Ford Mondeo’, ‘321’)</li>\n<li>execute(‘buyVehicle’, ‘Ford Escort’, ‘789’)</li>\n</ul>\n</li>\n<li>Facade（外观）模式</li>\n<li>Mixin模式<ul>\n<li>类似于extend, merge等函数，将两个对象的key合并成一个，重复的以优先级进行覆盖</li>\n</ul>\n</li>\n<li>Decorator（装饰器）模式</li>\n<li>Flyweight（享元）模式</li>\n</ul>\n</li>\n<li>行为设计模式<ul>\n<li>观察者（发布订阅者模式） 关注对象之间的通信</li>\n<li>策略模式<ul>\n<li>不同的算法做同一件事情</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>设计原则 <code>人月神话</code> <code>代码大全</code> <code>unix编程艺术</code></p>\n</blockquote>\n<ul>\n<li>开放封闭，开放扩展，封闭修改</li>\n<li>依赖倒转</li>\n<li>单一职责</li>\n<li>里式替换</li>\n<li>合成复用<ul>\n<li>组合优于继承</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>学习设计模式的目的： 写着舒服，维护更舒服</p>\n</blockquote>\n<blockquote>\n<p>什么时候用</p>\n</blockquote>\n<ul>\n<li>带来开发收益</li>\n<li>带来可维护性收益</li>\n<li>把设计模式和组件挂钩（elementUI, antDesign）</li>\n<li>没有这些，if else 就是最简单的代码</li>\n<li>不要滥用</li>\n<li>懒，才是程序员成长的动力</li>\n</ul>\n<blockquote>\n<p>项目内部设计原则</p>\n</blockquote>\n<ul>\n<li>布鲁克斯法则： 软件开发的后期，添加人力，会让项目更慢</li>\n<li>KISS 原则：保持简单,simple and stupid 模块设计需要遵循</li>\n<li>备份</li>\n<li>软件开发没有银弹</li>\n<li>过早优化效应<ul>\n<li>过早的优化是万恶之源</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>学习感言</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码处处是模式，其实设计模式的大白话就是套路，大家都实践过很多遍之后得出的真理。学习中间，就会发现，其实自己</span><br><span class=\"line\">的代码当中很多地方已经用到了设计模式，只是你自己不知道那叫什么名字</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><blockquote>\n<p>细节分类</p>\n</blockquote>\n<ul>\n<li>【发布订阅模式】vue 中的实现$on,$emit,$off</li>\n<li>【单例模式】errorDialog 可以使用进行优化</li>\n<li>【策略模式】vue 中的 form rule，配置化使用，map 结构提供策略可配置，环境类的去调用 map 中的实际方案（value）去执行，Monitor 校验配置使用的<ul>\n<li>{ key: ()=&gt;{} }</li>\n</ul>\n</li>\n<li>【代理模式】防抖节流， Proxy, defineProperty， 主要是替代访问本体的功能</li>\n<li>【中介者模式】目的，减少耦合，eg: 购物车需求,redux, vuex 都是中介者模式，通过 store 这个中介来操作对象</li>\n<li>【装饰器模式】eg: react 高阶组件, 主要是添加行为。</li>\n<li>【外观模式】外面只调用一个函数， 内部判断不同的分支，实现具体的逻辑</li>\n<li>【工厂模式】提供一个专门创建对象的接口</li>\n<li>【建造者模式】和工厂模式相比，参与了更多创建的过程 或者更为复杂</li>\n<li>【迭代器模式】</li>\n<li>【享元模式】重复利用一个模特，穿不同的衣服</li>\n<li>【责任链模式】中间件机制，每个中间件串行的对你的东西进行加工判断处理</li>\n<li>【适配器模式】理解为外观模式？</li>\n</ul>\n<blockquote>\n<p>大分类</p>\n</blockquote>\n<ul>\n<li>创建型设计模式<ul>\n<li>构造器模式</li>\n<li>原型模式</li>\n<li>工厂模式<ul>\n<li>提供一个接口实现创建，接口内部才是调用new Class()</li>\n</ul>\n</li>\n<li>abstract factory 抽象工厂<ul>\n<li>内部的class可以通过接口进行注册</li>\n</ul>\n</li>\n<li>单例模式</li>\n<li>prototype模式<ul>\n<li>object.create(obj, {}) 实际原理是函数委托给别人</li>\n</ul>\n</li>\n<li>module模式<ul>\n<li>闭包自执行函数，暴露一个变量给外部使用，通过变量来操作内部私有属性</li>\n</ul>\n</li>\n<li>抽象模式</li>\n<li>生成器模式（可以理解为一个生成器中包含了多个类的实例化，复杂化后的工厂模式）</li>\n</ul>\n</li>\n<li>结构型设计模式（专注类和对象的组合）<ul>\n<li>代理模式<ul>\n<li>提供一个代理者去帮助你操作实际的内容，代理者会考虑容错场景，提供备选方案(loading 图片的展示，等实际加载完图片，再切换新的src)</li>\n</ul>\n</li>\n<li>外观模式<ul>\n<li>外部调用统一，内部实现进行判断兼容性</li>\n</ul>\n</li>\n<li>Command（命令）模式<ul>\n<li>通过不同的命令（传参）做不同的事情，常含有（关联）接收者</li>\n<li>execute(‘requestInfo’, ‘Ford Mondeo’, ‘321’)</li>\n<li>execute(‘buyVehicle’, ‘Ford Escort’, ‘789’)</li>\n</ul>\n</li>\n<li>Facade（外观）模式</li>\n<li>Mixin模式<ul>\n<li>类似于extend, merge等函数，将两个对象的key合并成一个，重复的以优先级进行覆盖</li>\n</ul>\n</li>\n<li>Decorator（装饰器）模式</li>\n<li>Flyweight（享元）模式</li>\n</ul>\n</li>\n<li>行为设计模式<ul>\n<li>观察者（发布订阅者模式） 关注对象之间的通信</li>\n<li>策略模式<ul>\n<li>不同的算法做同一件事情</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>设计原则 <code>人月神话</code> <code>代码大全</code> <code>unix编程艺术</code></p>\n</blockquote>\n<ul>\n<li>开放封闭，开放扩展，封闭修改</li>\n<li>依赖倒转</li>\n<li>单一职责</li>\n<li>里式替换</li>\n<li>合成复用<ul>\n<li>组合优于继承</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>学习设计模式的目的： 写着舒服，维护更舒服</p>\n</blockquote>\n<blockquote>\n<p>什么时候用</p>\n</blockquote>\n<ul>\n<li>带来开发收益</li>\n<li>带来可维护性收益</li>\n<li>把设计模式和组件挂钩（elementUI, antDesign）</li>\n<li>没有这些，if else 就是最简单的代码</li>\n<li>不要滥用</li>\n<li>懒，才是程序员成长的动力</li>\n</ul>\n<blockquote>\n<p>项目内部设计原则</p>\n</blockquote>\n<ul>\n<li>布鲁克斯法则： 软件开发的后期，添加人力，会让项目更慢</li>\n<li>KISS 原则：保持简单,simple and stupid 模块设计需要遵循</li>\n<li>备份</li>\n<li>软件开发没有银弹</li>\n<li>过早优化效应<ul>\n<li>过早的优化是万恶之源</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>学习感言</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码处处是模式，其实设计模式的大白话就是套路，大家都实践过很多遍之后得出的真理。学习中间，就会发现，其实自己</span><br><span class=\"line\">的代码当中很多地方已经用到了设计模式，只是你自己不知道那叫什么名字</span><br></pre></td></tr></table></figure>"},{"title":"es6Class","date":"2019-03-04T02:06:36.000Z","comments":0,"_content":"\n# es6中class的基本使用\n\n- 有几个关键字的使用：\n\n  - class： 用来定义'类'； \n  - constructor： 用来初始化'类'；\n  - extends： 用来子类继承父类；\n  - super： 调用父类方法\n    - 区分一： constructor 中，直接调用super()并传参，相当于调用父级的constructor；\n    - 区分二：普通方法中（原型方法），super指向父类的原型对象，调用super.xx()， xx指代父级的某个方法；\n\n- 示例代码：\n\n  ```\tjs\n  // 基类-动物\n  class Animal {\n      constructor(name) {\n          this.name = name;\n      }\n      sayName() {\n          console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n      }\n  }\n  \n  let animal = new Animal('小动物');\n  animal.sayName();\n  \n  // 子类，狗--继承于动物类\n  class Dog extends Animal {\n      constructor(name, age) {\n          super(name);\n          this.age = age;\n      }\n      sayName() {\n          // 调用父类方法\n          super.sayName();\n          // 写子类自己的方法\n          console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n      }\n  }\n  \n  let dog = new Dog('大黄', '7');\n  dog.sayName();\n  \n  ```\n  简不简单，惊不惊喜，意不意外，开不开心？\n\n  > class使用就是这么简单，但是要知道这只是语法糖，es5中继承是如何实现呢？\n\n# es5中继承的基本实现\n\n- 几个关键字的使用：\n\n  - function：类就是使用函数创建出来的；\n  - prototype：原型属性；\n  - Object.create(`__proto__`, `obj`)：用来创建对象\n    - 参数一`__proto__`：必需，被创建对象的原型对象。\n    - 参数二`obj`：可选，包含一个或多个属性描述符的 JavaScript 对象，用来规定要被添加到对象的属性，可以分为两类，数据属性和访问器属性\n\n- 简单使用示例代码(从基本示例中引发思考，如何调用父级方法)：\n\n  ```js\n  // 基类-动物\n  function Animal(name) {\n      this.name = name;\n  }\n  \n  Animal.prototype.sayName = function() {\n      console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n  }\n  \n  // 子类，狗--继承于动物类\n  function Dog(name, age) {\n      this.name = name;\n      this.age = age;\n  }\n  \n  // 将Dog的原型指向Animal的一个实例\n  Dog.prototype = new Animal();\n  // 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。\n  Dog.prototype.sayName = function(argument) {\n      console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n  }\n  var dog = new Dog('大黄', '7');\n  dog.sayName();\n  ```\n\n# es6class创建和es5中function创建，异同点在哪里？\n\n- 相同点：\n\n  - 都分为声明式和表达式\n  - 对待name,length表现一致\n  - 对待创建变量结果一致***\n  - fn对待相同，都可以用call,apply.bind来改变this指向\n\n- 不同点：\n\n  - 声明式，es5中的fn是存在变量提升的，es6中的class没有\n  - Dog类， fn创建可以使用call调用，class创建的不能\n  - 在全局中创建Dog类，fn可以在window中访问Dog,class生成的不能\n  - 武昌补充。。。我没琢磨粗来\n\n\n> 那在es6还没出来的时候，当初的开发人员是如何写类的继承呢？别天真了，人没有那么傻，别个早已经封装实现了此类方法。\n  <video id=\"video\" controls=\"\" preload=\"none\" poster=\"laugh.mp4\">\n    sorry,您的浏览器不支持该视频类型!\n    <source id=\"mp4\" src=\"laugh.mp4\" type=\"video/mp4\">\n  </video>  \n> 看看es5的时候，别个是如何使用继承的\n\n```js\n// 基类-动物\nvar Animal = Class.extend({\n    // init是构造函数，起到contructor的作用\n    init: function(name) {\n        this.name = name;\n    },\n    sayName: function() {\n        console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n    }\n});\n\nvar animal = new Animal('小动物');\nanimal.sayName();\n\n// 子类，狗--继承于动物类\nvar Dog = Animal.extend({\n    // init是构造函数\n    init: function(name, age) {\n        //  在构造函数中调用父类的构造函数\n        this._super(name);\n        this.age = age;\n    },\n    sayName: function() {\n        // 调用父类方法\n        this._super();\n        // 写子类自己的方法\n        console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n    }\n});\n\nvar dog = new Dog('大黄', '7');\ndog.sayName();\n```\n\n\n\n# 看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\n\n- 示例看基本的继承\n\n  ```js\n  // 基类-动物\n  function Animal(name) {\n      this.name = name;\n  }\n  \n  Animal.prototype.sayName = function() {\n      console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n  }\n  // 子类，狗--继承于动物类\n  function Dog(name, age) {\n      this.name = name;\n      this.age = age;\n  }\n  \n  // 将Dog的原型指向Animal的一个实例\n  Dog.prototype = new Animal();\n  // 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。\n  Dog.prototype.sayName = function() {\n      console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n  }\n  var dog = new Dog('大黄', '7');\n  dog.sayName();\n  ```\n\n- 上述示例的缺陷：\n\n  1. 在创建Dog构造函数和原型时，就对Animal进行了实例化，这是不合适的。\n  2. Dog的构造函数没法调用父类Animal的构造函数，导致在Dog构造函数中对name属性的重复赋值。\n  3. Dog中的函数会覆盖Animal中的同名函数，没有重载的机制（和上一条是一个类型的问题）。\n  4. 实现中有constructor属性的指向错误。\n  5. 单一职责，不够通用。 \n\n- 我们将其一个一个缺陷进行解决，最后便可以得到我们想要的封装结构,下面是完整代码\n\n  ```js\n  var Class = (function() {\n    // 标识类的初始化是否完成，如果完成，便可以调用init进行初始化构造函数\n    var initCompleteStatus = false;\n    // 定义正则，边界为_super完整的字符串则是真\n    var reg = /\\b_super\\b/;\n  \n    function parentClass() {} // 父级，初始化基类是空对象\n  \n    parentClass.extend = function(props) {\n      function childClass() {\n        if (initCompleteStatus) {\n          this.init.apply(this, arguments);\n        }\n      }\n      \n      var _super = this.prototype; // 父级类的原型\n      // 保存父级的所有属性为子类的原型，并重置constructor\n        \n      initCompleteStatus = false;\n      // 此时的实例化不会调用init\n      childClass.prototype = new this();\n      initCompleteStatus = true;\n        \n      Object.defineProperty(childClass.prototype, \"constructor\", {\n        value: childClass\n      });\n      \n      // 自身属性的赋值\n      for (var name in props) {\n        if (typeof props[name] === \"function\" && reg.test(props[name])) {\n          childClass.prototype[name] = (function(name, fn) {\n            return function() {\n              console.dir(Object.toString.call(fn));\n              var temp = this._super;\n              this._super = _super[name];\n              // 拿到函数返回值\n              var result = fn.apply(this, arguments);\n              this._super = temp;\n              // 将返回值返回\n              return result;\n            };\n          })(name, props[name]);\n        } else {\n          childClass.prototype[name] = props[name];\n        }\n      }\n      childClass.extend = arguments.callee;\n      return childClass;\n    };\n    return parentClass;\n  })();\n  ```\n","source":"_posts/es6Class.md","raw":"---\ntitle: es6Class\ndate: 2019-03-04 10:06:36\ntags: \n- class\n- prototype\ncategories:\n- class\n- prototype\ncomments: false\n---\n\n# es6中class的基本使用\n\n- 有几个关键字的使用：\n\n  - class： 用来定义'类'； \n  - constructor： 用来初始化'类'；\n  - extends： 用来子类继承父类；\n  - super： 调用父类方法\n    - 区分一： constructor 中，直接调用super()并传参，相当于调用父级的constructor；\n    - 区分二：普通方法中（原型方法），super指向父类的原型对象，调用super.xx()， xx指代父级的某个方法；\n\n- 示例代码：\n\n  ```\tjs\n  // 基类-动物\n  class Animal {\n      constructor(name) {\n          this.name = name;\n      }\n      sayName() {\n          console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n      }\n  }\n  \n  let animal = new Animal('小动物');\n  animal.sayName();\n  \n  // 子类，狗--继承于动物类\n  class Dog extends Animal {\n      constructor(name, age) {\n          super(name);\n          this.age = age;\n      }\n      sayName() {\n          // 调用父类方法\n          super.sayName();\n          // 写子类自己的方法\n          console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n      }\n  }\n  \n  let dog = new Dog('大黄', '7');\n  dog.sayName();\n  \n  ```\n  简不简单，惊不惊喜，意不意外，开不开心？\n\n  > class使用就是这么简单，但是要知道这只是语法糖，es5中继承是如何实现呢？\n\n# es5中继承的基本实现\n\n- 几个关键字的使用：\n\n  - function：类就是使用函数创建出来的；\n  - prototype：原型属性；\n  - Object.create(`__proto__`, `obj`)：用来创建对象\n    - 参数一`__proto__`：必需，被创建对象的原型对象。\n    - 参数二`obj`：可选，包含一个或多个属性描述符的 JavaScript 对象，用来规定要被添加到对象的属性，可以分为两类，数据属性和访问器属性\n\n- 简单使用示例代码(从基本示例中引发思考，如何调用父级方法)：\n\n  ```js\n  // 基类-动物\n  function Animal(name) {\n      this.name = name;\n  }\n  \n  Animal.prototype.sayName = function() {\n      console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n  }\n  \n  // 子类，狗--继承于动物类\n  function Dog(name, age) {\n      this.name = name;\n      this.age = age;\n  }\n  \n  // 将Dog的原型指向Animal的一个实例\n  Dog.prototype = new Animal();\n  // 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。\n  Dog.prototype.sayName = function(argument) {\n      console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n  }\n  var dog = new Dog('大黄', '7');\n  dog.sayName();\n  ```\n\n# es6class创建和es5中function创建，异同点在哪里？\n\n- 相同点：\n\n  - 都分为声明式和表达式\n  - 对待name,length表现一致\n  - 对待创建变量结果一致***\n  - fn对待相同，都可以用call,apply.bind来改变this指向\n\n- 不同点：\n\n  - 声明式，es5中的fn是存在变量提升的，es6中的class没有\n  - Dog类， fn创建可以使用call调用，class创建的不能\n  - 在全局中创建Dog类，fn可以在window中访问Dog,class生成的不能\n  - 武昌补充。。。我没琢磨粗来\n\n\n> 那在es6还没出来的时候，当初的开发人员是如何写类的继承呢？别天真了，人没有那么傻，别个早已经封装实现了此类方法。\n  <video id=\"video\" controls=\"\" preload=\"none\" poster=\"laugh.mp4\">\n    sorry,您的浏览器不支持该视频类型!\n    <source id=\"mp4\" src=\"laugh.mp4\" type=\"video/mp4\">\n  </video>  \n> 看看es5的时候，别个是如何使用继承的\n\n```js\n// 基类-动物\nvar Animal = Class.extend({\n    // init是构造函数，起到contructor的作用\n    init: function(name) {\n        this.name = name;\n    },\n    sayName: function() {\n        console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n    }\n});\n\nvar animal = new Animal('小动物');\nanimal.sayName();\n\n// 子类，狗--继承于动物类\nvar Dog = Animal.extend({\n    // init是构造函数\n    init: function(name, age) {\n        //  在构造函数中调用父类的构造函数\n        this._super(name);\n        this.age = age;\n    },\n    sayName: function() {\n        // 调用父类方法\n        this._super();\n        // 写子类自己的方法\n        console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n    }\n});\n\nvar dog = new Dog('大黄', '7');\ndog.sayName();\n```\n\n\n\n# 看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\n\n- 示例看基本的继承\n\n  ```js\n  // 基类-动物\n  function Animal(name) {\n      this.name = name;\n  }\n  \n  Animal.prototype.sayName = function() {\n      console.log(this.name, '--------基类>>>>>>>>Animal中的方法');\n  }\n  // 子类，狗--继承于动物类\n  function Dog(name, age) {\n      this.name = name;\n      this.age = age;\n  }\n  \n  // 将Dog的原型指向Animal的一个实例\n  Dog.prototype = new Animal();\n  // 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。\n  Dog.prototype.sayName = function() {\n      console.log(`${this.name}(${this.age})----------子类>>>>>>>>>>>Dog类中的方法`);\n  }\n  var dog = new Dog('大黄', '7');\n  dog.sayName();\n  ```\n\n- 上述示例的缺陷：\n\n  1. 在创建Dog构造函数和原型时，就对Animal进行了实例化，这是不合适的。\n  2. Dog的构造函数没法调用父类Animal的构造函数，导致在Dog构造函数中对name属性的重复赋值。\n  3. Dog中的函数会覆盖Animal中的同名函数，没有重载的机制（和上一条是一个类型的问题）。\n  4. 实现中有constructor属性的指向错误。\n  5. 单一职责，不够通用。 \n\n- 我们将其一个一个缺陷进行解决，最后便可以得到我们想要的封装结构,下面是完整代码\n\n  ```js\n  var Class = (function() {\n    // 标识类的初始化是否完成，如果完成，便可以调用init进行初始化构造函数\n    var initCompleteStatus = false;\n    // 定义正则，边界为_super完整的字符串则是真\n    var reg = /\\b_super\\b/;\n  \n    function parentClass() {} // 父级，初始化基类是空对象\n  \n    parentClass.extend = function(props) {\n      function childClass() {\n        if (initCompleteStatus) {\n          this.init.apply(this, arguments);\n        }\n      }\n      \n      var _super = this.prototype; // 父级类的原型\n      // 保存父级的所有属性为子类的原型，并重置constructor\n        \n      initCompleteStatus = false;\n      // 此时的实例化不会调用init\n      childClass.prototype = new this();\n      initCompleteStatus = true;\n        \n      Object.defineProperty(childClass.prototype, \"constructor\", {\n        value: childClass\n      });\n      \n      // 自身属性的赋值\n      for (var name in props) {\n        if (typeof props[name] === \"function\" && reg.test(props[name])) {\n          childClass.prototype[name] = (function(name, fn) {\n            return function() {\n              console.dir(Object.toString.call(fn));\n              var temp = this._super;\n              this._super = _super[name];\n              // 拿到函数返回值\n              var result = fn.apply(this, arguments);\n              this._super = temp;\n              // 将返回值返回\n              return result;\n            };\n          })(name, props[name]);\n        } else {\n          childClass.prototype[name] = props[name];\n        }\n      }\n      childClass.extend = arguments.callee;\n      return childClass;\n    };\n    return parentClass;\n  })();\n  ```\n","slug":"es6Class","published":1,"updated":"2021-01-08T13:07:02.273Z","layout":"post","photos":[],"link":"","_id":"ckjoaux6m000cde2x75ilkjnw","content":"<h1 id=\"es6中class的基本使用\"><a href=\"#es6中class的基本使用\" class=\"headerlink\" title=\"es6中class的基本使用\"></a>es6中class的基本使用</h1><ul>\n<li><p>有几个关键字的使用：</p>\n<ul>\n<li>class： 用来定义’类’； </li>\n<li>constructor： 用来初始化’类’；</li>\n<li>extends： 用来子类继承父类；</li>\n<li>super： 调用父类方法<ul>\n<li>区分一： constructor 中，直接调用super()并传参，相当于调用父级的constructor；</li>\n<li>区分二：普通方法中（原型方法），super指向父类的原型对象，调用super.xx()， xx指代父级的某个方法；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayName() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'小动物'</span>);</span><br><span class=\"line\">animal.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayName() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.sayName();</span><br><span class=\"line\">        <span class=\"comment\">// 写子类自己的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n<p>简不简单，惊不惊喜，意不意外，开不开心？</p>\n<blockquote>\n<p>class使用就是这么简单，但是要知道这只是语法糖，es5中继承是如何实现呢？</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"es5中继承的基本实现\"><a href=\"#es5中继承的基本实现\" class=\"headerlink\" title=\"es5中继承的基本实现\"></a>es5中继承的基本实现</h1><ul>\n<li><p>几个关键字的使用：</p>\n<ul>\n<li>function：类就是使用函数创建出来的；</li>\n<li>prototype：原型属性；</li>\n<li>Object.create(<code>__proto__</code>, <code>obj</code>)：用来创建对象<ul>\n<li>参数一<code>__proto__</code>：必需，被创建对象的原型对象。</li>\n<li>参数二<code>obj</code>：可选，包含一个或多个属性描述符的 JavaScript 对象，用来规定要被添加到对象的属性，可以分为两类，数据属性和访问器属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>简单使用示例代码(从基本示例中引发思考，如何调用父级方法)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Dog的原型指向Animal的一个实例</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"comment\">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class=\"line\">Dog.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">argument</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"es6class创建和es5中function创建，异同点在哪里？\"><a href=\"#es6class创建和es5中function创建，异同点在哪里？\" class=\"headerlink\" title=\"es6class创建和es5中function创建，异同点在哪里？\"></a>es6class创建和es5中function创建，异同点在哪里？</h1><ul>\n<li><p>相同点：</p>\n<ul>\n<li>都分为声明式和表达式</li>\n<li>对待name,length表现一致</li>\n<li>对待创建变量结果一致***</li>\n<li>fn对待相同，都可以用call,apply.bind来改变this指向</li>\n</ul>\n</li>\n<li><p>不同点：</p>\n<ul>\n<li>声明式，es5中的fn是存在变量提升的，es6中的class没有</li>\n<li>Dog类， fn创建可以使用call调用，class创建的不能</li>\n<li>在全局中创建Dog类，fn可以在window中访问Dog,class生成的不能</li>\n<li>武昌补充。。。我没琢磨粗来</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>那在es6还没出来的时候，当初的开发人员是如何写类的继承呢？别天真了，人没有那么傻，别个早已经封装实现了此类方法。<br>  <video id=\"video\" controls preload=\"none\" poster=\"laugh.mp4\"><br>    sorry,您的浏览器不支持该视频类型!<br>    <source id=\"mp4\" src=\"laugh.mp4\" type=\"video/mp4\"><br>  </video><br>看看es5的时候，别个是如何使用继承的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Animal = Class.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init是构造函数，起到contructor的作用</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'小动物'</span>);</span><br><span class=\"line\">animal.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Dog = Animal.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init是构造函数</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  在构造函数中调用父类的构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._super(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._super();</span><br><span class=\"line\">        <span class=\"comment\">// 写子类自己的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n<h1 id=\"看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\"><a href=\"#看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\" class=\"headerlink\" title=\"看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\"></a>看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承</h1><ul>\n<li><p>示例看基本的继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Dog的原型指向Animal的一个实例</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"comment\">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class=\"line\">Dog.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上述示例的缺陷：</p>\n<ol>\n<li>在创建Dog构造函数和原型时，就对Animal进行了实例化，这是不合适的。</li>\n<li>Dog的构造函数没法调用父类Animal的构造函数，导致在Dog构造函数中对name属性的重复赋值。</li>\n<li>Dog中的函数会覆盖Animal中的同名函数，没有重载的机制（和上一条是一个类型的问题）。</li>\n<li>实现中有constructor属性的指向错误。</li>\n<li>单一职责，不够通用。 </li>\n</ol>\n</li>\n<li><p>我们将其一个一个缺陷进行解决，最后便可以得到我们想要的封装结构,下面是完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Class = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标识类的初始化是否完成，如果完成，便可以调用init进行初始化构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> initCompleteStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 定义正则，边界为_super完整的字符串则是真</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\b_super\\b/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parentClass</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 父级，初始化基类是空对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  parentClass.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childClass</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (initCompleteStatus) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> _super = <span class=\"keyword\">this</span>.prototype; <span class=\"comment\">// 父级类的原型</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存父级的所有属性为子类的原型，并重置constructor</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    initCompleteStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 此时的实例化不会调用init</span></span><br><span class=\"line\">    childClass.prototype = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>();</span><br><span class=\"line\">    initCompleteStatus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(childClass.prototype, <span class=\"string\">\"constructor\"</span>, &#123;</span><br><span class=\"line\">      value: childClass</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 自身属性的赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> props) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props[name] === <span class=\"string\">\"function\"</span> &amp;&amp; reg.test(props[name])) &#123;</span><br><span class=\"line\">        childClass.prototype[name] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(<span class=\"built_in\">Object</span>.toString.call(fn));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = <span class=\"keyword\">this</span>._super;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._super = _super[name];</span><br><span class=\"line\">            <span class=\"comment\">// 拿到函数返回值</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._super = temp;</span><br><span class=\"line\">            <span class=\"comment\">// 将返回值返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;)(name, props[name]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        childClass.prototype[name] = props[name];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childClass.extend = <span class=\"built_in\">arguments</span>.callee;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> childClass;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> parentClass;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"es6中class的基本使用\"><a href=\"#es6中class的基本使用\" class=\"headerlink\" title=\"es6中class的基本使用\"></a>es6中class的基本使用</h1><ul>\n<li><p>有几个关键字的使用：</p>\n<ul>\n<li>class： 用来定义’类’； </li>\n<li>constructor： 用来初始化’类’；</li>\n<li>extends： 用来子类继承父类；</li>\n<li>super： 调用父类方法<ul>\n<li>区分一： constructor 中，直接调用super()并传参，相当于调用父级的constructor；</li>\n<li>区分二：普通方法中（原型方法），super指向父类的原型对象，调用super.xx()， xx指代父级的某个方法；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>示例代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayName() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'小动物'</span>);</span><br><span class=\"line\">animal.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(name, age) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sayName() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>.sayName();</span><br><span class=\"line\">        <span class=\"comment\">// 写子类自己的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n<p>简不简单，惊不惊喜，意不意外，开不开心？</p>\n<blockquote>\n<p>class使用就是这么简单，但是要知道这只是语法糖，es5中继承是如何实现呢？</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"es5中继承的基本实现\"><a href=\"#es5中继承的基本实现\" class=\"headerlink\" title=\"es5中继承的基本实现\"></a>es5中继承的基本实现</h1><ul>\n<li><p>几个关键字的使用：</p>\n<ul>\n<li>function：类就是使用函数创建出来的；</li>\n<li>prototype：原型属性；</li>\n<li>Object.create(<code>__proto__</code>, <code>obj</code>)：用来创建对象<ul>\n<li>参数一<code>__proto__</code>：必需，被创建对象的原型对象。</li>\n<li>参数二<code>obj</code>：可选，包含一个或多个属性描述符的 JavaScript 对象，用来规定要被添加到对象的属性，可以分为两类，数据属性和访问器属性</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>简单使用示例代码(从基本示例中引发思考，如何调用父级方法)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Dog的原型指向Animal的一个实例</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"comment\">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class=\"line\">Dog.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">argument</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"es6class创建和es5中function创建，异同点在哪里？\"><a href=\"#es6class创建和es5中function创建，异同点在哪里？\" class=\"headerlink\" title=\"es6class创建和es5中function创建，异同点在哪里？\"></a>es6class创建和es5中function创建，异同点在哪里？</h1><ul>\n<li><p>相同点：</p>\n<ul>\n<li>都分为声明式和表达式</li>\n<li>对待name,length表现一致</li>\n<li>对待创建变量结果一致***</li>\n<li>fn对待相同，都可以用call,apply.bind来改变this指向</li>\n</ul>\n</li>\n<li><p>不同点：</p>\n<ul>\n<li>声明式，es5中的fn是存在变量提升的，es6中的class没有</li>\n<li>Dog类， fn创建可以使用call调用，class创建的不能</li>\n<li>在全局中创建Dog类，fn可以在window中访问Dog,class生成的不能</li>\n<li>武昌补充。。。我没琢磨粗来</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>那在es6还没出来的时候，当初的开发人员是如何写类的继承呢？别天真了，人没有那么傻，别个早已经封装实现了此类方法。<br>  <video id=\"video\" controls preload=\"none\" poster=\"laugh.mp4\"><br>    sorry,您的浏览器不支持该视频类型!<br>    <source id=\"mp4\" src=\"laugh.mp4\" type=\"video/mp4\"><br>  </video><br>看看es5的时候，别个是如何使用继承的</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Animal = Class.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init是构造函数，起到contructor的作用</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> animal = <span class=\"keyword\">new</span> Animal(<span class=\"string\">'小动物'</span>);</span><br><span class=\"line\">animal.sayName();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Dog = Animal.extend(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// init是构造函数</span></span><br><span class=\"line\">    init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  在构造函数中调用父类的构造函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._super(name);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用父类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>._super();</span><br><span class=\"line\">        <span class=\"comment\">// 写子类自己的方法</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n<h1 id=\"看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\"><a href=\"#看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\" class=\"headerlink\" title=\"看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承\"></a>看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承</h1><ul>\n<li><p>示例看基本的继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基类-动物</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Animal.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name, <span class=\"string\">'--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 子类，狗--继承于动物类</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dog</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Dog的原型指向Animal的一个实例</span></span><br><span class=\"line\">Dog.prototype = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\"><span class=\"comment\">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class=\"line\">Dog.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>(<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">'大黄'</span>, <span class=\"string\">'7'</span>);</span><br><span class=\"line\">dog.sayName();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上述示例的缺陷：</p>\n<ol>\n<li>在创建Dog构造函数和原型时，就对Animal进行了实例化，这是不合适的。</li>\n<li>Dog的构造函数没法调用父类Animal的构造函数，导致在Dog构造函数中对name属性的重复赋值。</li>\n<li>Dog中的函数会覆盖Animal中的同名函数，没有重载的机制（和上一条是一个类型的问题）。</li>\n<li>实现中有constructor属性的指向错误。</li>\n<li>单一职责，不够通用。 </li>\n</ol>\n</li>\n<li><p>我们将其一个一个缺陷进行解决，最后便可以得到我们想要的封装结构,下面是完整代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Class = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标识类的初始化是否完成，如果完成，便可以调用init进行初始化构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> initCompleteStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 定义正则，边界为_super完整的字符串则是真</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\b_super\\b/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parentClass</span>(<span class=\"params\"></span>) </span>&#123;&#125; <span class=\"comment\">// 父级，初始化基类是空对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">  parentClass.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">childClass</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (initCompleteStatus) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.init.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">var</span> _super = <span class=\"keyword\">this</span>.prototype; <span class=\"comment\">// 父级类的原型</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存父级的所有属性为子类的原型，并重置constructor</span></span><br><span class=\"line\">      </span><br><span class=\"line\">    initCompleteStatus = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 此时的实例化不会调用init</span></span><br><span class=\"line\">    childClass.prototype = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>();</span><br><span class=\"line\">    initCompleteStatus = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(childClass.prototype, <span class=\"string\">\"constructor\"</span>, &#123;</span><br><span class=\"line\">      value: childClass</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 自身属性的赋值</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> props) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props[name] === <span class=\"string\">\"function\"</span> &amp;&amp; reg.test(props[name])) &#123;</span><br><span class=\"line\">        childClass.prototype[name] = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, fn</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.dir(<span class=\"built_in\">Object</span>.toString.call(fn));</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = <span class=\"keyword\">this</span>._super;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._super = _super[name];</span><br><span class=\"line\">            <span class=\"comment\">// 拿到函数返回值</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> result = fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._super = temp;</span><br><span class=\"line\">            <span class=\"comment\">// 将返回值返回</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;)(name, props[name]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        childClass.prototype[name] = props[name];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    childClass.extend = <span class=\"built_in\">arguments</span>.callee;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> childClass;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> parentClass;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"git 常用命令","date":"2021-01-07T12:07:44.000Z","comments":0,"_content":"\n[可以观看廖雪峰大神写的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n*   `git init`\n\n    > 初始化一个git仓库\n\n*   `git remote add origin <git@server-name:path/repo-name.git>`\n\n    > 关联远程库\n\n*   `git clone`\n\n    > 克隆\n\n*   `git checkout -b <name>` or `git switch -c <name>`\n\n    > 检出分支pr-branch并切换到新分支上\n\n*   `git checkout -b <new-branch> origin/<remote-branch>`\n\n    > 检出远程分支remote-branch到本地，命名为new-branch\n\n*  ` git commit`\n\n    > 本地提交\n\n*   `git pull`\n\n    > 远程更新拉到本地\n\n*   `git push`\n\n    > 本地推送到远程\n\n*   `git merge c2`\n\n    > 把c2 branch 内容合并到当前分支上\n\n*   `git rebase c2`\n\n    > 将c2分支最新的提交同步到当前分支，并变成线性提交\n\n*   `git checkout c2^`\n\n    > 分离HEAD，让其指向c2的父级\n\n*   `git checkout c2~2`\n\n    > 让其指向c2的父级的父级\n\n*   `git branch -f c2 HEAD~2`\n\n    > 将分支c2重新分配给当前分支的父级的父级\n\n*   `git reset HEAD~1`\n\n    > 将当前分支向后移到较早的提交上来恢复更改\n\n*   `git revert HEAD`\n\n    > 重写当前分支，把上次的提交，反转过来再次提交， 来恢复之前的更改\n\n*   `git push -u origin master`\n\n    > 将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了\n\n*   `git pull`\n\n    > 相当于git fetch, git merge\n\n*   `git pull --rebase`\n\n    > 相当于git fetch , git rebase ，本地就不会出现提交分叉以及万恶的merge commit信息\n\n*   `rebase` 好处\n\n    <pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"reStructuredText\" cid=\"n214\" mdtype=\"fences\" style=\"box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;\">想要更好的提交树，使用rebase操作会更好一点。\n    这样可以线性的看到每一次提交，并且没有增加提交节点。\n    merge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。\n    而rebase 操作的话，会中断rebase,同时会提示去解决冲突。\n    解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</pre>\n\n*   `git stash`\n\n    > 储藏现场工作（将git仓库已经追踪记录的，但是没有commit的东西先存起来）\n\n*   `git stash list`\n\n    > 查看储藏区\n\n*   `git stash apply stash@{0}`\n\n    > 恢复储藏区， 不会删除储藏区的内容，等待commit\n\n*   `git stash pop`\n\n    > 恢复储藏区， 同时会删除储藏区的内容，等待commit\n\n*   `git stash drop stash@{0}`\n\n    > 删除储藏区的内容\n\n*   `git cherry-pick 4c805e2`\n\n    > 复制一个特定的提交到当前分支\n\n*   `git tag <tagname> ? <commit ID>`\n\n    > 用于新建一个标签，默认为`HEAD`，也可以指定一个commit id\n\n*   `git tag -a <tagname> -m \"This is a tag\"`\n\n    > 可以指定标签信息\n\n*   `git tag`\n\n    > 查看所有标签\n\n*   `git show <tagname>`\n\n    > 查看一个标签\n\n*   `git tag -d <tagname>`\n\n    > 删除一个标签\n\n*   `git push origin <tagname>`\n\n    > 推送一个本地标签 到 远程\n\n*   `git push origin --tags`\n\n    > 推送全部未推送过的本地标签\n\n*   `git push origin :refs/tags/<tagname>`\n\n    > 删除一个远程标签\n\n","source":"_posts/gitCommand.md","raw":"---\ntitle: git 常用命令\ndate: 2021-01-07 20:07:44\ntags: \n- git\ncategories:\n- git\ncomments: false\n---\n\n[可以观看廖雪峰大神写的git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n\n*   `git init`\n\n    > 初始化一个git仓库\n\n*   `git remote add origin <git@server-name:path/repo-name.git>`\n\n    > 关联远程库\n\n*   `git clone`\n\n    > 克隆\n\n*   `git checkout -b <name>` or `git switch -c <name>`\n\n    > 检出分支pr-branch并切换到新分支上\n\n*   `git checkout -b <new-branch> origin/<remote-branch>`\n\n    > 检出远程分支remote-branch到本地，命名为new-branch\n\n*  ` git commit`\n\n    > 本地提交\n\n*   `git pull`\n\n    > 远程更新拉到本地\n\n*   `git push`\n\n    > 本地推送到远程\n\n*   `git merge c2`\n\n    > 把c2 branch 内容合并到当前分支上\n\n*   `git rebase c2`\n\n    > 将c2分支最新的提交同步到当前分支，并变成线性提交\n\n*   `git checkout c2^`\n\n    > 分离HEAD，让其指向c2的父级\n\n*   `git checkout c2~2`\n\n    > 让其指向c2的父级的父级\n\n*   `git branch -f c2 HEAD~2`\n\n    > 将分支c2重新分配给当前分支的父级的父级\n\n*   `git reset HEAD~1`\n\n    > 将当前分支向后移到较早的提交上来恢复更改\n\n*   `git revert HEAD`\n\n    > 重写当前分支，把上次的提交，反转过来再次提交， 来恢复之前的更改\n\n*   `git push -u origin master`\n\n    > 将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了\n\n*   `git pull`\n\n    > 相当于git fetch, git merge\n\n*   `git pull --rebase`\n\n    > 相当于git fetch , git rebase ，本地就不会出现提交分叉以及万恶的merge commit信息\n\n*   `rebase` 好处\n\n    <pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"reStructuredText\" cid=\"n214\" mdtype=\"fences\" style=\"box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;\">想要更好的提交树，使用rebase操作会更好一点。\n    这样可以线性的看到每一次提交，并且没有增加提交节点。\n    merge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。\n    而rebase 操作的话，会中断rebase,同时会提示去解决冲突。\n    解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</pre>\n\n*   `git stash`\n\n    > 储藏现场工作（将git仓库已经追踪记录的，但是没有commit的东西先存起来）\n\n*   `git stash list`\n\n    > 查看储藏区\n\n*   `git stash apply stash@{0}`\n\n    > 恢复储藏区， 不会删除储藏区的内容，等待commit\n\n*   `git stash pop`\n\n    > 恢复储藏区， 同时会删除储藏区的内容，等待commit\n\n*   `git stash drop stash@{0}`\n\n    > 删除储藏区的内容\n\n*   `git cherry-pick 4c805e2`\n\n    > 复制一个特定的提交到当前分支\n\n*   `git tag <tagname> ? <commit ID>`\n\n    > 用于新建一个标签，默认为`HEAD`，也可以指定一个commit id\n\n*   `git tag -a <tagname> -m \"This is a tag\"`\n\n    > 可以指定标签信息\n\n*   `git tag`\n\n    > 查看所有标签\n\n*   `git show <tagname>`\n\n    > 查看一个标签\n\n*   `git tag -d <tagname>`\n\n    > 删除一个标签\n\n*   `git push origin <tagname>`\n\n    > 推送一个本地标签 到 远程\n\n*   `git push origin --tags`\n\n    > 推送全部未推送过的本地标签\n\n*   `git push origin :refs/tags/<tagname>`\n\n    > 删除一个远程标签\n\n","slug":"gitCommand","published":1,"updated":"2021-01-08T13:07:02.285Z","layout":"post","photos":[],"link":"","_id":"ckjoaux77000gde2xh0ee1o12","content":"<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">可以观看廖雪峰大神写的git教程</a></p>\n<ul>\n<li><p><code>git init</code></p>\n<blockquote>\n<p>初始化一个git仓库</p>\n</blockquote>\n</li>\n<li><p><code>git remote add origin &lt;git@server-name:path/repo-name.git&gt;</code></p>\n<blockquote>\n<p>关联远程库</p>\n</blockquote>\n</li>\n<li><p><code>git clone</code></p>\n<blockquote>\n<p>克隆</p>\n</blockquote>\n</li>\n<li><p><code>git checkout -b &lt;name&gt;</code> or <code>git switch -c &lt;name&gt;</code></p>\n<blockquote>\n<p>检出分支pr-branch并切换到新分支上</p>\n</blockquote>\n</li>\n<li><p><code>git checkout -b &lt;new-branch&gt; origin/&lt;remote-branch&gt;</code></p>\n<blockquote>\n<p>检出远程分支remote-branch到本地，命名为new-branch</p>\n</blockquote>\n</li>\n<li><p><code>git commit</code></p>\n<blockquote>\n<p>本地提交</p>\n</blockquote>\n</li>\n<li><p><code>git pull</code></p>\n<blockquote>\n<p>远程更新拉到本地</p>\n</blockquote>\n</li>\n<li><p><code>git push</code></p>\n<blockquote>\n<p>本地推送到远程</p>\n</blockquote>\n</li>\n<li><p><code>git merge c2</code></p>\n<blockquote>\n<p>把c2 branch 内容合并到当前分支上</p>\n</blockquote>\n</li>\n<li><p><code>git rebase c2</code></p>\n<blockquote>\n<p>将c2分支最新的提交同步到当前分支，并变成线性提交</p>\n</blockquote>\n</li>\n<li><p><code>git checkout c2^</code></p>\n<blockquote>\n<p>分离HEAD，让其指向c2的父级</p>\n</blockquote>\n</li>\n<li><p><code>git checkout c2~2</code></p>\n<blockquote>\n<p>让其指向c2的父级的父级</p>\n</blockquote>\n</li>\n<li><p><code>git branch -f c2 HEAD~2</code></p>\n<blockquote>\n<p>将分支c2重新分配给当前分支的父级的父级</p>\n</blockquote>\n</li>\n<li><p><code>git reset HEAD~1</code></p>\n<blockquote>\n<p>将当前分支向后移到较早的提交上来恢复更改</p>\n</blockquote>\n</li>\n<li><p><code>git revert HEAD</code></p>\n<blockquote>\n<p>重写当前分支，把上次的提交，反转过来再次提交， 来恢复之前的更改</p>\n</blockquote>\n</li>\n<li><p><code>git push -u origin master</code></p>\n<blockquote>\n<p>将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了</p>\n</blockquote>\n</li>\n<li><p><code>git pull</code></p>\n<blockquote>\n<p>相当于git fetch, git merge</p>\n</blockquote>\n</li>\n<li><p><code>git pull --rebase</code></p>\n<blockquote>\n<p>相当于git fetch , git rebase ，本地就不会出现提交分叉以及万恶的merge commit信息</p>\n</blockquote>\n</li>\n<li><p><code>rebase</code> 好处</p>\n<pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"reStructuredText\" cid=\"n214\" mdtype=\"fences\" style=\"box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;\">想要更好的提交树，使用rebase操作会更好一点。\n这样可以线性的看到每一次提交，并且没有增加提交节点。\nmerge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。\n而rebase 操作的话，会中断rebase,同时会提示去解决冲突。\n解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</pre>\n</li>\n<li><p><code>git stash</code></p>\n<blockquote>\n<p>储藏现场工作（将git仓库已经追踪记录的，但是没有commit的东西先存起来）</p>\n</blockquote>\n</li>\n<li><p><code>git stash list</code></p>\n<blockquote>\n<p>查看储藏区</p>\n</blockquote>\n</li>\n<li><p><code>git stash apply stash@{0}</code></p>\n<blockquote>\n<p>恢复储藏区， 不会删除储藏区的内容，等待commit</p>\n</blockquote>\n</li>\n<li><p><code>git stash pop</code></p>\n<blockquote>\n<p>恢复储藏区， 同时会删除储藏区的内容，等待commit</p>\n</blockquote>\n</li>\n<li><p><code>git stash drop stash@{0}</code></p>\n<blockquote>\n<p>删除储藏区的内容</p>\n</blockquote>\n</li>\n<li><p><code>git cherry-pick 4c805e2</code></p>\n<blockquote>\n<p>复制一个特定的提交到当前分支</p>\n</blockquote>\n</li>\n<li><p><code>git tag &lt;tagname&gt; ? &lt;commit ID&gt;</code></p>\n<blockquote>\n<p>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id</p>\n</blockquote>\n</li>\n<li><p><code>git tag -a &lt;tagname&gt; -m &quot;This is a tag&quot;</code></p>\n<blockquote>\n<p>可以指定标签信息</p>\n</blockquote>\n</li>\n<li><p><code>git tag</code></p>\n<blockquote>\n<p>查看所有标签</p>\n</blockquote>\n</li>\n<li><p><code>git show &lt;tagname&gt;</code></p>\n<blockquote>\n<p>查看一个标签</p>\n</blockquote>\n</li>\n<li><p><code>git tag -d &lt;tagname&gt;</code></p>\n<blockquote>\n<p>删除一个标签</p>\n</blockquote>\n</li>\n<li><p><code>git push origin &lt;tagname&gt;</code></p>\n<blockquote>\n<p>推送一个本地标签 到 远程</p>\n</blockquote>\n</li>\n<li><p><code>git push origin --tags</code></p>\n<blockquote>\n<p>推送全部未推送过的本地标签</p>\n</blockquote>\n</li>\n<li><p><code>git push origin :refs/tags/&lt;tagname&gt;</code></p>\n<blockquote>\n<p>删除一个远程标签</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">可以观看廖雪峰大神写的git教程</a></p>\n<ul>\n<li><p><code>git init</code></p>\n<blockquote>\n<p>初始化一个git仓库</p>\n</blockquote>\n</li>\n<li><p><code>git remote add origin &lt;git@server-name:path/repo-name.git&gt;</code></p>\n<blockquote>\n<p>关联远程库</p>\n</blockquote>\n</li>\n<li><p><code>git clone</code></p>\n<blockquote>\n<p>克隆</p>\n</blockquote>\n</li>\n<li><p><code>git checkout -b &lt;name&gt;</code> or <code>git switch -c &lt;name&gt;</code></p>\n<blockquote>\n<p>检出分支pr-branch并切换到新分支上</p>\n</blockquote>\n</li>\n<li><p><code>git checkout -b &lt;new-branch&gt; origin/&lt;remote-branch&gt;</code></p>\n<blockquote>\n<p>检出远程分支remote-branch到本地，命名为new-branch</p>\n</blockquote>\n</li>\n<li><p><code>git commit</code></p>\n<blockquote>\n<p>本地提交</p>\n</blockquote>\n</li>\n<li><p><code>git pull</code></p>\n<blockquote>\n<p>远程更新拉到本地</p>\n</blockquote>\n</li>\n<li><p><code>git push</code></p>\n<blockquote>\n<p>本地推送到远程</p>\n</blockquote>\n</li>\n<li><p><code>git merge c2</code></p>\n<blockquote>\n<p>把c2 branch 内容合并到当前分支上</p>\n</blockquote>\n</li>\n<li><p><code>git rebase c2</code></p>\n<blockquote>\n<p>将c2分支最新的提交同步到当前分支，并变成线性提交</p>\n</blockquote>\n</li>\n<li><p><code>git checkout c2^</code></p>\n<blockquote>\n<p>分离HEAD，让其指向c2的父级</p>\n</blockquote>\n</li>\n<li><p><code>git checkout c2~2</code></p>\n<blockquote>\n<p>让其指向c2的父级的父级</p>\n</blockquote>\n</li>\n<li><p><code>git branch -f c2 HEAD~2</code></p>\n<blockquote>\n<p>将分支c2重新分配给当前分支的父级的父级</p>\n</blockquote>\n</li>\n<li><p><code>git reset HEAD~1</code></p>\n<blockquote>\n<p>将当前分支向后移到较早的提交上来恢复更改</p>\n</blockquote>\n</li>\n<li><p><code>git revert HEAD</code></p>\n<blockquote>\n<p>重写当前分支，把上次的提交，反转过来再次提交， 来恢复之前的更改</p>\n</blockquote>\n</li>\n<li><p><code>git push -u origin master</code></p>\n<blockquote>\n<p>将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了</p>\n</blockquote>\n</li>\n<li><p><code>git pull</code></p>\n<blockquote>\n<p>相当于git fetch, git merge</p>\n</blockquote>\n</li>\n<li><p><code>git pull --rebase</code></p>\n<blockquote>\n<p>相当于git fetch , git rebase ，本地就不会出现提交分叉以及万恶的merge commit信息</p>\n</blockquote>\n</li>\n<li><p><code>rebase</code> 好处</p>\n<pre spellcheck=\"false\" class=\"md-fences md-end-block ty-contain-cm modeLoaded\" lang=\"reStructuredText\" cid=\"n214\" mdtype=\"fences\" style=\"box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;\">想要更好的提交树，使用rebase操作会更好一点。\n这样可以线性的看到每一次提交，并且没有增加提交节点。\nmerge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。\n而rebase 操作的话，会中断rebase,同时会提示去解决冲突。\n解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</pre>\n</li>\n<li><p><code>git stash</code></p>\n<blockquote>\n<p>储藏现场工作（将git仓库已经追踪记录的，但是没有commit的东西先存起来）</p>\n</blockquote>\n</li>\n<li><p><code>git stash list</code></p>\n<blockquote>\n<p>查看储藏区</p>\n</blockquote>\n</li>\n<li><p><code>git stash apply stash@{0}</code></p>\n<blockquote>\n<p>恢复储藏区， 不会删除储藏区的内容，等待commit</p>\n</blockquote>\n</li>\n<li><p><code>git stash pop</code></p>\n<blockquote>\n<p>恢复储藏区， 同时会删除储藏区的内容，等待commit</p>\n</blockquote>\n</li>\n<li><p><code>git stash drop stash@{0}</code></p>\n<blockquote>\n<p>删除储藏区的内容</p>\n</blockquote>\n</li>\n<li><p><code>git cherry-pick 4c805e2</code></p>\n<blockquote>\n<p>复制一个特定的提交到当前分支</p>\n</blockquote>\n</li>\n<li><p><code>git tag &lt;tagname&gt; ? &lt;commit ID&gt;</code></p>\n<blockquote>\n<p>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id</p>\n</blockquote>\n</li>\n<li><p><code>git tag -a &lt;tagname&gt; -m &quot;This is a tag&quot;</code></p>\n<blockquote>\n<p>可以指定标签信息</p>\n</blockquote>\n</li>\n<li><p><code>git tag</code></p>\n<blockquote>\n<p>查看所有标签</p>\n</blockquote>\n</li>\n<li><p><code>git show &lt;tagname&gt;</code></p>\n<blockquote>\n<p>查看一个标签</p>\n</blockquote>\n</li>\n<li><p><code>git tag -d &lt;tagname&gt;</code></p>\n<blockquote>\n<p>删除一个标签</p>\n</blockquote>\n</li>\n<li><p><code>git push origin &lt;tagname&gt;</code></p>\n<blockquote>\n<p>推送一个本地标签 到 远程</p>\n</blockquote>\n</li>\n<li><p><code>git push origin --tags</code></p>\n<blockquote>\n<p>推送全部未推送过的本地标签</p>\n</blockquote>\n</li>\n<li><p><code>git push origin :refs/tags/&lt;tagname&gt;</code></p>\n<blockquote>\n<p>删除一个远程标签</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"grunt","date":"2019-08-27T14:54:08.000Z","_content":"\n# grunt\n\n1. 安装环境\n\n   - npm init -y\n\n   - grunt `npm install grunt --save-dev`\n\n   - grunt-cli `npm install grunt-cli -g`, 这里我是全局安装grunt-cli\n\n     \n\n2. 配置文件\n\n   - 在package.json同级目录下，创建`Gruntfile.js`文件\n\n     ```js\n     module.exports = function(grunt) {\n       // Do grunt-related things in here\n     };\n     ```\n\n3. 为工程增加babel转义功能\n\n   - 为何要这么做？\n\n     - 由于现代浏览器对es6+的语法支持度不够高，对于...解构、async/await 等无法识别，所以需要将我们的代码编译为浏览器认识的代码（方便我们使用最新的语法去编写代码，使代码更清晰明了高大上）\n\n   - 安装依赖\n\n     - `npm install --save-dev grunt-babel @babel/core`\n     - `npm install @babel/preset-env --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       require(\"load-grunt-tasks\")(grunt); // npm install --save-dev load-grunt-tasks\n       \n       grunt.initConfig({\n         \"babel\": {\n           options: {\n             sourceMap: false,\n             presets: [\n               [\n                 '@babel/preset-env',\n                 {\n                   targets: {\n                     browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']\n                   }\n                 }\n               ]\n             ]\n           },\n           dist: {\n             files: {\n               \"dist/app.js\": \"src/app.js\"\n             }\n           }\n         }\n       });\n       \n       grunt.registerTask(\"default\", [\"babel\"]);\n       ```\n\n       ```\n       grunt.loadNpmTasks('grunt-babel');\n       ```\n\n       \n\n     - `@babel/core` 是实际用来转义es6+代码的\n\n     - `@babel/preset-env`是做转义预设，指定转义规则的\n\n4. 为环境增加全局变量`babel-polyfill`\n\n   - 为何要这样做？\n\n     - 当babel转义后，其实还有一些东西无法转义，比如es6+中的全局变量中的Promise, Object.assign()方法等，这就需要我们对当前环境进行一个polyfill，填充他们缺少的功能。（如果不填充，浏览器如果不认识Promise，那肯定运行的时候报错噻）\n\n   - 安装依赖\n\n     - `npm install --save-dev @babel/polyfill`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       presets: [\n               [\n                 '@babel/preset-env',\n                 {\n                   targets: {\n                     browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']\n                   },\n                   modules: 'commonjs', // 选项用于模块转化规则设置，可选配置包括：\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, 默认使用 \"commonjs\"。即，将代码中的ES6的import转为require。\n                   corejs: '3', // 声明corejs版本\n                   useBuiltIns: 'usage' // 不用显示引用@babel/polyfill\n                 }\n               ]\n             ]\n       ```\n\n       \n\n5. 为环境增加browserify功能\n\n   - 为何这样做\n\n     - 我们会发现babel转义出来的代码里面，会有require()/import语法，这都是引入的polyfill，但是浏览器不认识require() 这种commonJs 的CMD语法，也不认识import/exports 等语法，必须转换为浏览器认识的。\n     - browserify默认是将require进行转换。\n     - 对前端define的转换还不知道怎么配置。\n\n   - 安装依赖\n\n     - `npm install --save-dev browserify`\n     - `npm install --save-dev grunt-browserify`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       // 让浏览器适配require(commonJS,CMD)\n          browserify: {\n             dist: {\n               files: [\n                 {\n                   expand: true,\n                   src: ['**/*.js'], //所有js文件\n                   dest: tmpDirBabel, //输出到此目录下\n                   cwd: tmpDirBabel //js目录下\n                 }\n               ]\n             }\n           }\n       ```\n\n       ```\n       grunt.loadNpmTasks('grunt-browserify');\n       ```\n\n6. 配置压缩功能\n\n   - 为何这样做？\n\n     - js文件进行压缩体积，优化方向\n\n   - 安装依赖\n\n     - `npm install grunt-contrib-uglify --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       // 自定义压缩\n           uglify: {\n             options: {\n               mangle: true, //混淆变量名\n               comments: 'false' //false（删除全部注释），some（保留@preserve @license @cc_on等注释）\n             },\n             uglifyFile: {\n               files: [\n                 {\n                   expand: true,\n                   src: ['**/*.js'], //所有js文件\n                   dest: tmpDirBabel, //输出到此目录下\n                   cwd: tmpDirBabel //js目录下\n                 }\n               ]\n             }\n           }\n       ```\n\n       ```js\n       grunt.loadNpmTasks('grunt-contrib-uglify');\n       ```\n\n7. 配置监听\n\n   - 为何这么做？\n\n     - 当文件发生更改时，需要做的一些任务，通常配置dev环境，比如less的编译， 本地js的转义等\n\n   - 安装依赖\n\n     - `npm install grunt-contrib-watch grunt-contrib-livereload --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       watch: {\n             js: {\n               files: ['localApp/**/*.js'], //所有js\n               tasks: [\n                 'babel',\n                 'browserify'\n               ],\n               options: {\n                 interrupt: true, // 如果文件再次更改，则停止上一次的任务，重新构建新的\n                 livereload: true\n               }\n             },\n             others: {\n               files: ['localApp/**/*', '!localApp/**/*.js'], // 除了js\n               tasks: ['copy:copyOthersToWebApp'],\n               options: {\n                 interrupt: true,\n                 livereload: true\n               }\n             }\n           }\n       \n       ```\n\n       ```js\n        grunt.loadNpmTasks('grunt-contrib-watch');\n        grunt.loadNpmTasks('grunt-contrib-livereload');\n       \n       ```\n\n8. 加载npm任务\n\n   ```js\n     grunt.loadNpmTasks('grunt-babel');\n   \n   ```\n\n   \n\n9. 注册自定义任务\n\n   ```js\n   grunt.registerTask('dev', ['watch']);\n   \n   ```\n\n   ","source":"_posts/grunt.md","raw":"---\ntitle: grunt\ndate: 2019-08-27 22:54:08\ntags: \n- 自动化构建\ncategories:\n- 自动化构建\n---\n\n# grunt\n\n1. 安装环境\n\n   - npm init -y\n\n   - grunt `npm install grunt --save-dev`\n\n   - grunt-cli `npm install grunt-cli -g`, 这里我是全局安装grunt-cli\n\n     \n\n2. 配置文件\n\n   - 在package.json同级目录下，创建`Gruntfile.js`文件\n\n     ```js\n     module.exports = function(grunt) {\n       // Do grunt-related things in here\n     };\n     ```\n\n3. 为工程增加babel转义功能\n\n   - 为何要这么做？\n\n     - 由于现代浏览器对es6+的语法支持度不够高，对于...解构、async/await 等无法识别，所以需要将我们的代码编译为浏览器认识的代码（方便我们使用最新的语法去编写代码，使代码更清晰明了高大上）\n\n   - 安装依赖\n\n     - `npm install --save-dev grunt-babel @babel/core`\n     - `npm install @babel/preset-env --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       require(\"load-grunt-tasks\")(grunt); // npm install --save-dev load-grunt-tasks\n       \n       grunt.initConfig({\n         \"babel\": {\n           options: {\n             sourceMap: false,\n             presets: [\n               [\n                 '@babel/preset-env',\n                 {\n                   targets: {\n                     browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']\n                   }\n                 }\n               ]\n             ]\n           },\n           dist: {\n             files: {\n               \"dist/app.js\": \"src/app.js\"\n             }\n           }\n         }\n       });\n       \n       grunt.registerTask(\"default\", [\"babel\"]);\n       ```\n\n       ```\n       grunt.loadNpmTasks('grunt-babel');\n       ```\n\n       \n\n     - `@babel/core` 是实际用来转义es6+代码的\n\n     - `@babel/preset-env`是做转义预设，指定转义规则的\n\n4. 为环境增加全局变量`babel-polyfill`\n\n   - 为何要这样做？\n\n     - 当babel转义后，其实还有一些东西无法转义，比如es6+中的全局变量中的Promise, Object.assign()方法等，这就需要我们对当前环境进行一个polyfill，填充他们缺少的功能。（如果不填充，浏览器如果不认识Promise，那肯定运行的时候报错噻）\n\n   - 安装依赖\n\n     - `npm install --save-dev @babel/polyfill`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       presets: [\n               [\n                 '@babel/preset-env',\n                 {\n                   targets: {\n                     browsers: ['> 1%', 'last 2 versions', 'not ie <= 8']\n                   },\n                   modules: 'commonjs', // 选项用于模块转化规则设置，可选配置包括：\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, 默认使用 \"commonjs\"。即，将代码中的ES6的import转为require。\n                   corejs: '3', // 声明corejs版本\n                   useBuiltIns: 'usage' // 不用显示引用@babel/polyfill\n                 }\n               ]\n             ]\n       ```\n\n       \n\n5. 为环境增加browserify功能\n\n   - 为何这样做\n\n     - 我们会发现babel转义出来的代码里面，会有require()/import语法，这都是引入的polyfill，但是浏览器不认识require() 这种commonJs 的CMD语法，也不认识import/exports 等语法，必须转换为浏览器认识的。\n     - browserify默认是将require进行转换。\n     - 对前端define的转换还不知道怎么配置。\n\n   - 安装依赖\n\n     - `npm install --save-dev browserify`\n     - `npm install --save-dev grunt-browserify`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       // 让浏览器适配require(commonJS,CMD)\n          browserify: {\n             dist: {\n               files: [\n                 {\n                   expand: true,\n                   src: ['**/*.js'], //所有js文件\n                   dest: tmpDirBabel, //输出到此目录下\n                   cwd: tmpDirBabel //js目录下\n                 }\n               ]\n             }\n           }\n       ```\n\n       ```\n       grunt.loadNpmTasks('grunt-browserify');\n       ```\n\n6. 配置压缩功能\n\n   - 为何这样做？\n\n     - js文件进行压缩体积，优化方向\n\n   - 安装依赖\n\n     - `npm install grunt-contrib-uglify --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       // 自定义压缩\n           uglify: {\n             options: {\n               mangle: true, //混淆变量名\n               comments: 'false' //false（删除全部注释），some（保留@preserve @license @cc_on等注释）\n             },\n             uglifyFile: {\n               files: [\n                 {\n                   expand: true,\n                   src: ['**/*.js'], //所有js文件\n                   dest: tmpDirBabel, //输出到此目录下\n                   cwd: tmpDirBabel //js目录下\n                 }\n               ]\n             }\n           }\n       ```\n\n       ```js\n       grunt.loadNpmTasks('grunt-contrib-uglify');\n       ```\n\n7. 配置监听\n\n   - 为何这么做？\n\n     - 当文件发生更改时，需要做的一些任务，通常配置dev环境，比如less的编译， 本地js的转义等\n\n   - 安装依赖\n\n     - `npm install grunt-contrib-watch grunt-contrib-livereload --save-dev`\n\n   - 配置文件\n\n     - Gruntfile.js\n\n       ```js\n       watch: {\n             js: {\n               files: ['localApp/**/*.js'], //所有js\n               tasks: [\n                 'babel',\n                 'browserify'\n               ],\n               options: {\n                 interrupt: true, // 如果文件再次更改，则停止上一次的任务，重新构建新的\n                 livereload: true\n               }\n             },\n             others: {\n               files: ['localApp/**/*', '!localApp/**/*.js'], // 除了js\n               tasks: ['copy:copyOthersToWebApp'],\n               options: {\n                 interrupt: true,\n                 livereload: true\n               }\n             }\n           }\n       \n       ```\n\n       ```js\n        grunt.loadNpmTasks('grunt-contrib-watch');\n        grunt.loadNpmTasks('grunt-contrib-livereload');\n       \n       ```\n\n8. 加载npm任务\n\n   ```js\n     grunt.loadNpmTasks('grunt-babel');\n   \n   ```\n\n   \n\n9. 注册自定义任务\n\n   ```js\n   grunt.registerTask('dev', ['watch']);\n   \n   ```\n\n   ","slug":"grunt","published":1,"updated":"2021-01-08T13:07:02.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjoaux7g000ide2xrq3d2h9s","content":"<h1 id=\"grunt\"><a href=\"#grunt\" class=\"headerlink\" title=\"grunt\"></a>grunt</h1><ol>\n<li><p>安装环境</p>\n<ul>\n<li><p>npm init -y</p>\n</li>\n<li><p>grunt <code>npm install grunt --save-dev</code></p>\n</li>\n<li><p>grunt-cli <code>npm install grunt-cli -g</code>, 这里我是全局安装grunt-cli</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>配置文件</p>\n<ul>\n<li><p>在package.json同级目录下，创建<code>Gruntfile.js</code>文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do grunt-related things in here</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>为工程增加babel转义功能</p>\n<ul>\n<li><p>为何要这么做？</p>\n<ul>\n<li>由于现代浏览器对es6+的语法支持度不够高，对于…解构、async/await 等无法识别，所以需要将我们的代码编译为浏览器认识的代码（方便我们使用最新的语法去编写代码，使代码更清晰明了高大上）</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev grunt-babel @babel/core</code></li>\n<li><code>npm install @babel/preset-env --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"load-grunt-tasks\"</span>)(grunt); <span class=\"comment\">// npm install --save-dev load-grunt-tasks</span></span><br><span class=\"line\"></span><br><span class=\"line\">grunt.initConfig(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"babel\"</span>: &#123;</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">          <span class=\"string\">'@babel/preset-env'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            targets: &#123;</span><br><span class=\"line\">              browsers: [<span class=\"string\">'&gt; 1%'</span>, <span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'not ie &lt;= 8'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    dist: &#123;</span><br><span class=\"line\">      files: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"dist/app.js\"</span>: <span class=\"string\">\"src/app.js\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">grunt.registerTask(<span class=\"string\">\"default\"</span>, [<span class=\"string\">\"babel\"</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&apos;grunt-babel&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>- `@babel/core` 是实际用来转义es6+代码的\n\n- `@babel/preset-env`是做转义预设，指定转义规则的\n</code></pre><ol start=\"4\">\n<li><p>为环境增加全局变量<code>babel-polyfill</code></p>\n<ul>\n<li><p>为何要这样做？</p>\n<ul>\n<li>当babel转义后，其实还有一些东西无法转义，比如es6+中的全局变量中的Promise, Object.assign()方法等，这就需要我们对当前环境进行一个polyfill，填充他们缺少的功能。（如果不填充，浏览器如果不认识Promise，那肯定运行的时候报错噻）</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev @babel/polyfill</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">presets: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">          <span class=\"string\">'@babel/preset-env'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            targets: &#123;</span><br><span class=\"line\">              browsers: [<span class=\"string\">'&gt; 1%'</span>, <span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'not ie &lt;= 8'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            modules: <span class=\"string\">'commonjs'</span>, <span class=\"comment\">// 选项用于模块转化规则设置，可选配置包括：\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, 默认使用 \"commonjs\"。即，将代码中的ES6的import转为require。</span></span><br><span class=\"line\">            corejs: <span class=\"string\">'3'</span>, <span class=\"comment\">// 声明corejs版本</span></span><br><span class=\"line\">            useBuiltIns: <span class=\"string\">'usage'</span> <span class=\"comment\">// 不用显示引用@babel/polyfill</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      ]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>为环境增加browserify功能</p>\n<ul>\n<li><p>为何这样做</p>\n<ul>\n<li>我们会发现babel转义出来的代码里面，会有require()/import语法，这都是引入的polyfill，但是浏览器不认识require() 这种commonJs 的CMD语法，也不认识import/exports 等语法，必须转换为浏览器认识的。</li>\n<li>browserify默认是将require进行转换。</li>\n<li>对前端define的转换还不知道怎么配置。</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev browserify</code></li>\n<li><code>npm install --save-dev grunt-browserify</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让浏览器适配require(commonJS,CMD)</span></span><br><span class=\"line\">   browserify: &#123;</span><br><span class=\"line\">      dist: &#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            expand: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            src: [<span class=\"string\">'**/*.js'</span>], <span class=\"comment\">//所有js文件</span></span><br><span class=\"line\">            dest: tmpDirBabel, <span class=\"comment\">//输出到此目录下</span></span><br><span class=\"line\">            cwd: tmpDirBabel <span class=\"comment\">//js目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&apos;grunt-browserify&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置压缩功能</p>\n<ul>\n<li><p>为何这样做？</p>\n<ul>\n<li>js文件进行压缩体积，优化方向</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install grunt-contrib-uglify --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义压缩</span></span><br><span class=\"line\">    uglify: &#123;</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        mangle: <span class=\"literal\">true</span>, <span class=\"comment\">//混淆变量名</span></span><br><span class=\"line\">        comments: <span class=\"string\">'false'</span> <span class=\"comment\">//false（删除全部注释），some（保留@preserve @license @cc_on等注释）</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      uglifyFile: &#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            expand: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            src: [<span class=\"string\">'**/*.js'</span>], <span class=\"comment\">//所有js文件</span></span><br><span class=\"line\">            dest: tmpDirBabel, <span class=\"comment\">//输出到此目录下</span></span><br><span class=\"line\">            cwd: tmpDirBabel <span class=\"comment\">//js目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置监听</p>\n<ul>\n<li><p>为何这么做？</p>\n<ul>\n<li>当文件发生更改时，需要做的一些任务，通常配置dev环境，比如less的编译， 本地js的转义等</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install grunt-contrib-watch grunt-contrib-livereload --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">      js: &#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'localApp/**/*.js'</span>], <span class=\"comment\">//所有js</span></span><br><span class=\"line\">        tasks: [</span><br><span class=\"line\">          <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">          <span class=\"string\">'browserify'</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          interrupt: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果文件再次更改，则停止上一次的任务，重新构建新的</span></span><br><span class=\"line\">          livereload: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      others: &#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'localApp/**/*'</span>, <span class=\"string\">'!localApp/**/*.js'</span>], <span class=\"comment\">// 除了js</span></span><br><span class=\"line\">        tasks: [<span class=\"string\">'copy:copyOthersToWebApp'</span>],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          interrupt: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          livereload: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</span><br><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-livereload'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>加载npm任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-babel'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"9\">\n<li><p>注册自定义任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.registerTask(<span class=\"string\">'dev'</span>, [<span class=\"string\">'watch'</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"grunt\"><a href=\"#grunt\" class=\"headerlink\" title=\"grunt\"></a>grunt</h1><ol>\n<li><p>安装环境</p>\n<ul>\n<li><p>npm init -y</p>\n</li>\n<li><p>grunt <code>npm install grunt --save-dev</code></p>\n</li>\n<li><p>grunt-cli <code>npm install grunt-cli -g</code>, 这里我是全局安装grunt-cli</p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>配置文件</p>\n<ul>\n<li><p>在package.json同级目录下，创建<code>Gruntfile.js</code>文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">grunt</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Do grunt-related things in here</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>为工程增加babel转义功能</p>\n<ul>\n<li><p>为何要这么做？</p>\n<ul>\n<li>由于现代浏览器对es6+的语法支持度不够高，对于…解构、async/await 等无法识别，所以需要将我们的代码编译为浏览器认识的代码（方便我们使用最新的语法去编写代码，使代码更清晰明了高大上）</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev grunt-babel @babel/core</code></li>\n<li><code>npm install @babel/preset-env --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"load-grunt-tasks\"</span>)(grunt); <span class=\"comment\">// npm install --save-dev load-grunt-tasks</span></span><br><span class=\"line\"></span><br><span class=\"line\">grunt.initConfig(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"babel\"</span>: &#123;</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      presets: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">          <span class=\"string\">'@babel/preset-env'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            targets: &#123;</span><br><span class=\"line\">              browsers: [<span class=\"string\">'&gt; 1%'</span>, <span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'not ie &lt;= 8'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    dist: &#123;</span><br><span class=\"line\">      files: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"dist/app.js\"</span>: <span class=\"string\">\"src/app.js\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">grunt.registerTask(<span class=\"string\">\"default\"</span>, [<span class=\"string\">\"babel\"</span>]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&apos;grunt-babel&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<pre><code>- `@babel/core` 是实际用来转义es6+代码的\n\n- `@babel/preset-env`是做转义预设，指定转义规则的\n</code></pre><ol start=\"4\">\n<li><p>为环境增加全局变量<code>babel-polyfill</code></p>\n<ul>\n<li><p>为何要这样做？</p>\n<ul>\n<li>当babel转义后，其实还有一些东西无法转义，比如es6+中的全局变量中的Promise, Object.assign()方法等，这就需要我们对当前环境进行一个polyfill，填充他们缺少的功能。（如果不填充，浏览器如果不认识Promise，那肯定运行的时候报错噻）</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev @babel/polyfill</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">presets: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">          <span class=\"string\">'@babel/preset-env'</span>,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            targets: &#123;</span><br><span class=\"line\">              browsers: [<span class=\"string\">'&gt; 1%'</span>, <span class=\"string\">'last 2 versions'</span>, <span class=\"string\">'not ie &lt;= 8'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            modules: <span class=\"string\">'commonjs'</span>, <span class=\"comment\">// 选项用于模块转化规则设置，可选配置包括：\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | false, 默认使用 \"commonjs\"。即，将代码中的ES6的import转为require。</span></span><br><span class=\"line\">            corejs: <span class=\"string\">'3'</span>, <span class=\"comment\">// 声明corejs版本</span></span><br><span class=\"line\">            useBuiltIns: <span class=\"string\">'usage'</span> <span class=\"comment\">// 不用显示引用@babel/polyfill</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      ]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"5\">\n<li><p>为环境增加browserify功能</p>\n<ul>\n<li><p>为何这样做</p>\n<ul>\n<li>我们会发现babel转义出来的代码里面，会有require()/import语法，这都是引入的polyfill，但是浏览器不认识require() 这种commonJs 的CMD语法，也不认识import/exports 等语法，必须转换为浏览器认识的。</li>\n<li>browserify默认是将require进行转换。</li>\n<li>对前端define的转换还不知道怎么配置。</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install --save-dev browserify</code></li>\n<li><code>npm install --save-dev grunt-browserify</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 让浏览器适配require(commonJS,CMD)</span></span><br><span class=\"line\">   browserify: &#123;</span><br><span class=\"line\">      dist: &#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            expand: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            src: [<span class=\"string\">'**/*.js'</span>], <span class=\"comment\">//所有js文件</span></span><br><span class=\"line\">            dest: tmpDirBabel, <span class=\"comment\">//输出到此目录下</span></span><br><span class=\"line\">            cwd: tmpDirBabel <span class=\"comment\">//js目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(&apos;grunt-browserify&apos;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置压缩功能</p>\n<ul>\n<li><p>为何这样做？</p>\n<ul>\n<li>js文件进行压缩体积，优化方向</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install grunt-contrib-uglify --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义压缩</span></span><br><span class=\"line\">    uglify: &#123;</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        mangle: <span class=\"literal\">true</span>, <span class=\"comment\">//混淆变量名</span></span><br><span class=\"line\">        comments: <span class=\"string\">'false'</span> <span class=\"comment\">//false（删除全部注释），some（保留@preserve @license @cc_on等注释）</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      uglifyFile: &#123;</span><br><span class=\"line\">        files: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            expand: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            src: [<span class=\"string\">'**/*.js'</span>], <span class=\"comment\">//所有js文件</span></span><br><span class=\"line\">            dest: tmpDirBabel, <span class=\"comment\">//输出到此目录下</span></span><br><span class=\"line\">            cwd: tmpDirBabel <span class=\"comment\">//js目录下</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-uglify'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>配置监听</p>\n<ul>\n<li><p>为何这么做？</p>\n<ul>\n<li>当文件发生更改时，需要做的一些任务，通常配置dev环境，比如less的编译， 本地js的转义等</li>\n</ul>\n</li>\n<li><p>安装依赖</p>\n<ul>\n<li><code>npm install grunt-contrib-watch grunt-contrib-livereload --save-dev</code></li>\n</ul>\n</li>\n<li><p>配置文件</p>\n<ul>\n<li><p>Gruntfile.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">      js: &#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'localApp/**/*.js'</span>], <span class=\"comment\">//所有js</span></span><br><span class=\"line\">        tasks: [</span><br><span class=\"line\">          <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">          <span class=\"string\">'browserify'</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          interrupt: <span class=\"literal\">true</span>, <span class=\"comment\">// 如果文件再次更改，则停止上一次的任务，重新构建新的</span></span><br><span class=\"line\">          livereload: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      others: &#123;</span><br><span class=\"line\">        files: [<span class=\"string\">'localApp/**/*'</span>, <span class=\"string\">'!localApp/**/*.js'</span>], <span class=\"comment\">// 除了js</span></span><br><span class=\"line\">        tasks: [<span class=\"string\">'copy:copyOthersToWebApp'</span>],</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          interrupt: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          livereload: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-watch'</span>);</span><br><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-contrib-livereload'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>加载npm任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.loadNpmTasks(<span class=\"string\">'grunt-babel'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"9\">\n<li><p>注册自定义任务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grunt.registerTask(<span class=\"string\">'dev'</span>, [<span class=\"string\">'watch'</span>]);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"单元测试","date":"2018-12-29T07:31:51.000Z","comments":0,"_content":"# mocha + chai 单元测试\n\n参考链接： [测试框架 Mocha 实例教程](http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html)\n断言库使用 [chai](https://www.chaijs.com/api/bdd/)\n\n> 主要为个人的练习记录存放，下面会展示一些或者重点易错点。\n\n## 通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。\n```js\n$ mocha spec/{my,awesome}.js\n$ mocha test/unit/*.js\n$ mocha 'test/**/*.@(js|jsx)' // 也支持node的通配符，使用字符串包裹起来即可\n\n提示： 如果只有一个文件的时候，也需要加上, 比如 mocha test/{cf,}.js 否则会报错。\nWarning: Could not find any test files matching pattern: test/{cf}.js\nNo test files found\n\n```\n\n## 递归执行（mocha默认会执行当前目录下的test目录下的文件）\n\n```js\n如果想执行内嵌的其他文件，比如：\ntest/cf/**.js;\ntest/gg/tt/**.js;\n这种默认使用mocha命令是不会执行的，因为他们不在test目录下。\n可以使用：\nmocha --recursive 即可以递归执行test目录下所有文件，包含深度嵌套的。\n```\n\n## 显示报告结果(`--reporter`参数用来指定测试报告的格式，默认是`spec`格式。)\n\n```js\n$ mocha\n# 等同于\n$ mocha --reporter spec\n```\n\n> `--reporters`参数可以显示所有内置的报告格式。\n\n```js\n$ mocha --reporters\n```\n\n## 生成报告结果（使用[`mochawesome`](http://adamgruber.github.io/mochawesome/)模块，可以生成漂亮的HTML格式的报告。）\n\n```js\n$ npm install --save-dev mochawesome\n$ ../node_modules/.bin/mocha --reporter mochawesome\n```\n\n上面代码中，`mocha`命令使用了项目内安装的版本，而不是全局安装的版本，因为`mochawesome`模块是安装在项目内的。\n\n然后，测试结果报告就在[`mochaawesome-reports`](https://github.com/ruanyf/mocha-demos/blob/master/demo02/mochawesome-reports)子目录生成。\n\n## 配置文件mocha.opts\n\nMocha允许在`test`目录下面，放置配置文件`mocha.opts`，把命令行参数写在里面。请先进入[`demo03`](https://github.com/ruanyf/mocha-demos/tree/master/demo03)目录，运行下面的命令。\n\n```js\n$ mocha --recursive --reporter tap\n```\n\n上面这个命令有两个参数`--recursive`、`--reporter tap`。\n\n然后，把这两个参数写入`test`目录下的[`mocha.opts`](https://github.com/ruanyf/mocha-demos/blob/master/demo03/test/mocha.opts)文件。\n\n```js\n--reporter tap\n--recursive\n```\n\n然后，执行`mocha`就能取得与第一行命令一样的效果。\n\n```js\n$ mocha\n```\n\n如果测试用例不是存放在test子目录，可以在`mocha.opts`写入以下内容。\n\n```js\notherDirTests\n--recursive\n```\n\n上面代码指定运行`otherDirTests`目录及其子目录之中的测试脚本。\n\n## ES6测试\n\n如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入[`demo04`](https://github.com/ruanyf/mocha-demos/tree/master/demo04)目录，打开[`test/add.test.js`](https://github.com/ruanyf/mocha-demos/blob/master/demo04/test/add.test.js)文件，可以看到这个测试用例是用ES6写的。\n\n```js\nimport add from '../src/add.js';\nimport chai from 'chai';\n\nlet expect = chai.expect;\n\ndescribe('加法函数的测试', function() {\n  it('1 加 1 应该等于 2', function() {\n    expect(add(1, 1)).to.be.equal(2);\n  });\n});\n```\n\nES6转码，需要安装Babel。\n\n```js\n$ npm install babel-core babel-preset-es2015 --save-dev\n```\n\n然后，在项目目录下面，新建一个[`.babelrc`](https://github.com/ruanyf/mocha-demos/blob/master/demo04/.babelrc)配置文件。\n\n```js\n{\n  \"presets\": [ \"es2015\" ]\n}\n```\n\n最后，使用`--compilers`参数指定测试脚本的转码器。\n\n```js\n$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n```\n\n上面代码中，`--compilers`参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用`babel-core/register`模块，处理一下`.js`文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。\n\n> 可以结合mocha.opts使用，或者在package.json中自定义命令去实现。\n\n\n### package.json（使用方式：`npm run test`）\n\n```js\n\"scripts\": {\n    \"test\": \"mocha --recursive --compilers js:babel-core/register\"\n }\n```\n\n--compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！\n\n```js\n\"scripts\": {\n    \"test\": \"mocha --recursive --require babel-core/register\"\n }\n```\n\n### Mocha.opts（使用方式： `mocha`）\n\n```js\n--reporter spec\n--recursive\n--compilers js:babel-core/register\n```\n\n--compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！\n\n```js\n--reporter spec\n--recursive\n--require babel-core/register\n```","source":"_posts/mocha.md","raw":"---\ntitle: 单元测试\ndate: 2018-12-29 15:31:51\ntags:\n- mocha\ncategories:\n- mocha\ncomments: false\n---\n# mocha + chai 单元测试\n\n参考链接： [测试框架 Mocha 实例教程](http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html)\n断言库使用 [chai](https://www.chaijs.com/api/bdd/)\n\n> 主要为个人的练习记录存放，下面会展示一些或者重点易错点。\n\n## 通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。\n```js\n$ mocha spec/{my,awesome}.js\n$ mocha test/unit/*.js\n$ mocha 'test/**/*.@(js|jsx)' // 也支持node的通配符，使用字符串包裹起来即可\n\n提示： 如果只有一个文件的时候，也需要加上, 比如 mocha test/{cf,}.js 否则会报错。\nWarning: Could not find any test files matching pattern: test/{cf}.js\nNo test files found\n\n```\n\n## 递归执行（mocha默认会执行当前目录下的test目录下的文件）\n\n```js\n如果想执行内嵌的其他文件，比如：\ntest/cf/**.js;\ntest/gg/tt/**.js;\n这种默认使用mocha命令是不会执行的，因为他们不在test目录下。\n可以使用：\nmocha --recursive 即可以递归执行test目录下所有文件，包含深度嵌套的。\n```\n\n## 显示报告结果(`--reporter`参数用来指定测试报告的格式，默认是`spec`格式。)\n\n```js\n$ mocha\n# 等同于\n$ mocha --reporter spec\n```\n\n> `--reporters`参数可以显示所有内置的报告格式。\n\n```js\n$ mocha --reporters\n```\n\n## 生成报告结果（使用[`mochawesome`](http://adamgruber.github.io/mochawesome/)模块，可以生成漂亮的HTML格式的报告。）\n\n```js\n$ npm install --save-dev mochawesome\n$ ../node_modules/.bin/mocha --reporter mochawesome\n```\n\n上面代码中，`mocha`命令使用了项目内安装的版本，而不是全局安装的版本，因为`mochawesome`模块是安装在项目内的。\n\n然后，测试结果报告就在[`mochaawesome-reports`](https://github.com/ruanyf/mocha-demos/blob/master/demo02/mochawesome-reports)子目录生成。\n\n## 配置文件mocha.opts\n\nMocha允许在`test`目录下面，放置配置文件`mocha.opts`，把命令行参数写在里面。请先进入[`demo03`](https://github.com/ruanyf/mocha-demos/tree/master/demo03)目录，运行下面的命令。\n\n```js\n$ mocha --recursive --reporter tap\n```\n\n上面这个命令有两个参数`--recursive`、`--reporter tap`。\n\n然后，把这两个参数写入`test`目录下的[`mocha.opts`](https://github.com/ruanyf/mocha-demos/blob/master/demo03/test/mocha.opts)文件。\n\n```js\n--reporter tap\n--recursive\n```\n\n然后，执行`mocha`就能取得与第一行命令一样的效果。\n\n```js\n$ mocha\n```\n\n如果测试用例不是存放在test子目录，可以在`mocha.opts`写入以下内容。\n\n```js\notherDirTests\n--recursive\n```\n\n上面代码指定运行`otherDirTests`目录及其子目录之中的测试脚本。\n\n## ES6测试\n\n如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入[`demo04`](https://github.com/ruanyf/mocha-demos/tree/master/demo04)目录，打开[`test/add.test.js`](https://github.com/ruanyf/mocha-demos/blob/master/demo04/test/add.test.js)文件，可以看到这个测试用例是用ES6写的。\n\n```js\nimport add from '../src/add.js';\nimport chai from 'chai';\n\nlet expect = chai.expect;\n\ndescribe('加法函数的测试', function() {\n  it('1 加 1 应该等于 2', function() {\n    expect(add(1, 1)).to.be.equal(2);\n  });\n});\n```\n\nES6转码，需要安装Babel。\n\n```js\n$ npm install babel-core babel-preset-es2015 --save-dev\n```\n\n然后，在项目目录下面，新建一个[`.babelrc`](https://github.com/ruanyf/mocha-demos/blob/master/demo04/.babelrc)配置文件。\n\n```js\n{\n  \"presets\": [ \"es2015\" ]\n}\n```\n\n最后，使用`--compilers`参数指定测试脚本的转码器。\n\n```js\n$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register\n```\n\n上面代码中，`--compilers`参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用`babel-core/register`模块，处理一下`.js`文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。\n\n> 可以结合mocha.opts使用，或者在package.json中自定义命令去实现。\n\n\n### package.json（使用方式：`npm run test`）\n\n```js\n\"scripts\": {\n    \"test\": \"mocha --recursive --compilers js:babel-core/register\"\n }\n```\n\n--compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！\n\n```js\n\"scripts\": {\n    \"test\": \"mocha --recursive --require babel-core/register\"\n }\n```\n\n### Mocha.opts（使用方式： `mocha`）\n\n```js\n--reporter spec\n--recursive\n--compilers js:babel-core/register\n```\n\n--compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！\n\n```js\n--reporter spec\n--recursive\n--require babel-core/register\n```","slug":"mocha","published":1,"updated":"2021-01-08T13:07:02.291Z","layout":"post","photos":[],"link":"","_id":"ckjoaux7k000lde2xkfmndk99","content":"<h1 id=\"mocha-chai-单元测试\"><a href=\"#mocha-chai-单元测试\" class=\"headerlink\" title=\"mocha + chai 单元测试\"></a>mocha + chai 单元测试</h1><p>参考链接： <a href=\"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\" target=\"_blank\" rel=\"noopener\">测试框架 Mocha 实例教程</a><br>断言库使用 <a href=\"https://www.chaijs.com/api/bdd/\" target=\"_blank\" rel=\"noopener\">chai</a></p>\n<blockquote>\n<p>主要为个人的练习记录存放，下面会展示一些或者重点易错点。</p>\n</blockquote>\n<h2 id=\"通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。\"><a href=\"#通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。\" class=\"headerlink\" title=\"通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。\"></a>通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha spec/&#123;my,awesome&#125;.js</span><br><span class=\"line\">$ mocha test/unit<span class=\"comment\">/*.js</span></span><br><span class=\"line\"><span class=\"comment\">$ mocha 'test/**/</span>*.@(js|jsx)<span class=\"string\">' // 也支持node的通配符，使用字符串包裹起来即可</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">提示： 如果只有一个文件的时候，也需要加上, 比如 mocha test/&#123;cf,&#125;.js 否则会报错。</span></span><br><span class=\"line\"><span class=\"string\">Warning: Could not find any test files matching pattern: test/&#123;cf&#125;.js</span></span><br><span class=\"line\"><span class=\"string\">No test files found</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"递归执行（mocha默认会执行当前目录下的test目录下的文件）\"><a href=\"#递归执行（mocha默认会执行当前目录下的test目录下的文件）\" class=\"headerlink\" title=\"递归执行（mocha默认会执行当前目录下的test目录下的文件）\"></a>递归执行（mocha默认会执行当前目录下的test目录下的文件）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果想执行内嵌的其他文件，比如：</span><br><span class=\"line\">test/cf<span class=\"comment\">/**.js;</span></span><br><span class=\"line\"><span class=\"comment\">test/gg/tt/**.js;</span></span><br><span class=\"line\"><span class=\"comment\">这种默认使用mocha命令是不会执行的，因为他们不在test目录下。</span></span><br><span class=\"line\"><span class=\"comment\">可以使用：</span></span><br><span class=\"line\"><span class=\"comment\">mocha --recursive 即可以递归执行test目录下所有文件，包含深度嵌套的。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。\"><a href=\"#显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。\" class=\"headerlink\" title=\"显示报告结果(--reporter参数用来指定测试报告的格式，默认是spec格式。)\"></a>显示报告结果(<code>--reporter</code>参数用来指定测试报告的格式，默认是<code>spec</code>格式。)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">$ mocha --reporter spec</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--reporters</code>参数可以显示所有内置的报告格式。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --reporters</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\"><a href=\"#生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\" class=\"headerlink\" title=\"生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\"></a>生成报告结果（使用<a href=\"http://adamgruber.github.io/mochawesome/\" target=\"_blank\" rel=\"noopener\"><code>mochawesome</code></a>模块，可以生成漂亮的HTML格式的报告。）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev mochawesome</span><br><span class=\"line\">$ ../node_modules/.bin/mocha --reporter mochawesome</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>mocha</code>命令使用了项目内安装的版本，而不是全局安装的版本，因为<code>mochawesome</code>模块是安装在项目内的。</p>\n<p>然后，测试结果报告就在<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo02/mochawesome-reports\" target=\"_blank\" rel=\"noopener\"><code>mochaawesome-reports</code></a>子目录生成。</p>\n<h2 id=\"配置文件mocha-opts\"><a href=\"#配置文件mocha-opts\" class=\"headerlink\" title=\"配置文件mocha.opts\"></a>配置文件mocha.opts</h2><p>Mocha允许在<code>test</code>目录下面，放置配置文件<code>mocha.opts</code>，把命令行参数写在里面。请先进入<a href=\"https://github.com/ruanyf/mocha-demos/tree/master/demo03\" target=\"_blank\" rel=\"noopener\"><code>demo03</code></a>目录，运行下面的命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --recursive --reporter tap</span><br></pre></td></tr></table></figure>\n<p>上面这个命令有两个参数<code>--recursive</code>、<code>--reporter tap</code>。</p>\n<p>然后，把这两个参数写入<code>test</code>目录下的<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo03/test/mocha.opts\" target=\"_blank\" rel=\"noopener\"><code>mocha.opts</code></a>文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter tap</span><br><span class=\"line\">--recursive</span><br></pre></td></tr></table></figure>\n<p>然后，执行<code>mocha</code>就能取得与第一行命令一样的效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br></pre></td></tr></table></figure>\n<p>如果测试用例不是存放在test子目录，可以在<code>mocha.opts</code>写入以下内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">otherDirTests</span><br><span class=\"line\">--recursive</span><br></pre></td></tr></table></figure>\n<p>上面代码指定运行<code>otherDirTests</code>目录及其子目录之中的测试脚本。</p>\n<h2 id=\"ES6测试\"><a href=\"#ES6测试\" class=\"headerlink\" title=\"ES6测试\"></a>ES6测试</h2><p>如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入<a href=\"https://github.com/ruanyf/mocha-demos/tree/master/demo04\" target=\"_blank\" rel=\"noopener\"><code>demo04</code></a>目录，打开<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo04/test/add.test.js\" target=\"_blank\" rel=\"noopener\"><code>test/add.test.js</code></a>文件，可以看到这个测试用例是用ES6写的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> add <span class=\"keyword\">from</span> <span class=\"string\">'../src/add.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> chai <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> expect = chai.expect;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'加法函数的测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'1 加 1 应该等于 2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(add(<span class=\"number\">1</span>, <span class=\"number\">1</span>)).to.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>ES6转码，需要安装Babel。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install babel-core babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure>\n<p>然后，在项目目录下面，新建一个<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo04/.babelrc\" target=\"_blank\" rel=\"noopener\"><code>.babelrc</code></a>配置文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [ <span class=\"string\">\"es2015\"</span> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，使用<code>--compilers</code>参数指定测试脚本的转码器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>--compilers</code>参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用<code>babel-core/register</code>模块，处理一下<code>.js</code>文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。</p>\n<blockquote>\n<p>可以结合mocha.opts使用，或者在package.json中自定义命令去实现。</p>\n</blockquote>\n<h3 id=\"package-json（使用方式：npm-run-test）\"><a href=\"#package-json（使用方式：npm-run-test）\" class=\"headerlink\" title=\"package.json（使用方式：npm run test）\"></a>package.json（使用方式：<code>npm run test</code>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --recursive --compilers js:babel-core/register\"</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --recursive --require babel-core/register\"</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mocha-opts（使用方式：-mocha）\"><a href=\"#Mocha-opts（使用方式：-mocha）\" class=\"headerlink\" title=\"Mocha.opts（使用方式： mocha）\"></a>Mocha.opts（使用方式： <code>mocha</code>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter spec</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">--compilers js:babel-core/register</span><br></pre></td></tr></table></figure>\n<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter spec</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">--<span class=\"built_in\">require</span> babel-core/register</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mocha-chai-单元测试\"><a href=\"#mocha-chai-单元测试\" class=\"headerlink\" title=\"mocha + chai 单元测试\"></a>mocha + chai 单元测试</h1><p>参考链接： <a href=\"http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html\" target=\"_blank\" rel=\"noopener\">测试框架 Mocha 实例教程</a><br>断言库使用 <a href=\"https://www.chaijs.com/api/bdd/\" target=\"_blank\" rel=\"noopener\">chai</a></p>\n<blockquote>\n<p>主要为个人的练习记录存放，下面会展示一些或者重点易错点。</p>\n</blockquote>\n<h2 id=\"通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。\"><a href=\"#通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。\" class=\"headerlink\" title=\"通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。\"></a>通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha spec/&#123;my,awesome&#125;.js</span><br><span class=\"line\">$ mocha test/unit<span class=\"comment\">/*.js</span></span><br><span class=\"line\"><span class=\"comment\">$ mocha 'test/**/</span>*.@(js|jsx)<span class=\"string\">' // 也支持node的通配符，使用字符串包裹起来即可</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">提示： 如果只有一个文件的时候，也需要加上, 比如 mocha test/&#123;cf,&#125;.js 否则会报错。</span></span><br><span class=\"line\"><span class=\"string\">Warning: Could not find any test files matching pattern: test/&#123;cf&#125;.js</span></span><br><span class=\"line\"><span class=\"string\">No test files found</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"递归执行（mocha默认会执行当前目录下的test目录下的文件）\"><a href=\"#递归执行（mocha默认会执行当前目录下的test目录下的文件）\" class=\"headerlink\" title=\"递归执行（mocha默认会执行当前目录下的test目录下的文件）\"></a>递归执行（mocha默认会执行当前目录下的test目录下的文件）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果想执行内嵌的其他文件，比如：</span><br><span class=\"line\">test/cf<span class=\"comment\">/**.js;</span></span><br><span class=\"line\"><span class=\"comment\">test/gg/tt/**.js;</span></span><br><span class=\"line\"><span class=\"comment\">这种默认使用mocha命令是不会执行的，因为他们不在test目录下。</span></span><br><span class=\"line\"><span class=\"comment\">可以使用：</span></span><br><span class=\"line\"><span class=\"comment\">mocha --recursive 即可以递归执行test目录下所有文件，包含深度嵌套的。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。\"><a href=\"#显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。\" class=\"headerlink\" title=\"显示报告结果(--reporter参数用来指定测试报告的格式，默认是spec格式。)\"></a>显示报告结果(<code>--reporter</code>参数用来指定测试报告的格式，默认是<code>spec</code>格式。)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br><span class=\"line\"># 等同于</span><br><span class=\"line\">$ mocha --reporter spec</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>--reporters</code>参数可以显示所有内置的报告格式。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --reporters</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\"><a href=\"#生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\" class=\"headerlink\" title=\"生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）\"></a>生成报告结果（使用<a href=\"http://adamgruber.github.io/mochawesome/\" target=\"_blank\" rel=\"noopener\"><code>mochawesome</code></a>模块，可以生成漂亮的HTML格式的报告。）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev mochawesome</span><br><span class=\"line\">$ ../node_modules/.bin/mocha --reporter mochawesome</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>mocha</code>命令使用了项目内安装的版本，而不是全局安装的版本，因为<code>mochawesome</code>模块是安装在项目内的。</p>\n<p>然后，测试结果报告就在<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo02/mochawesome-reports\" target=\"_blank\" rel=\"noopener\"><code>mochaawesome-reports</code></a>子目录生成。</p>\n<h2 id=\"配置文件mocha-opts\"><a href=\"#配置文件mocha-opts\" class=\"headerlink\" title=\"配置文件mocha.opts\"></a>配置文件mocha.opts</h2><p>Mocha允许在<code>test</code>目录下面，放置配置文件<code>mocha.opts</code>，把命令行参数写在里面。请先进入<a href=\"https://github.com/ruanyf/mocha-demos/tree/master/demo03\" target=\"_blank\" rel=\"noopener\"><code>demo03</code></a>目录，运行下面的命令。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha --recursive --reporter tap</span><br></pre></td></tr></table></figure>\n<p>上面这个命令有两个参数<code>--recursive</code>、<code>--reporter tap</code>。</p>\n<p>然后，把这两个参数写入<code>test</code>目录下的<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo03/test/mocha.opts\" target=\"_blank\" rel=\"noopener\"><code>mocha.opts</code></a>文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter tap</span><br><span class=\"line\">--recursive</span><br></pre></td></tr></table></figure>\n<p>然后，执行<code>mocha</code>就能取得与第一行命令一样的效果。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mocha</span><br></pre></td></tr></table></figure>\n<p>如果测试用例不是存放在test子目录，可以在<code>mocha.opts</code>写入以下内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">otherDirTests</span><br><span class=\"line\">--recursive</span><br></pre></td></tr></table></figure>\n<p>上面代码指定运行<code>otherDirTests</code>目录及其子目录之中的测试脚本。</p>\n<h2 id=\"ES6测试\"><a href=\"#ES6测试\" class=\"headerlink\" title=\"ES6测试\"></a>ES6测试</h2><p>如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入<a href=\"https://github.com/ruanyf/mocha-demos/tree/master/demo04\" target=\"_blank\" rel=\"noopener\"><code>demo04</code></a>目录，打开<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo04/test/add.test.js\" target=\"_blank\" rel=\"noopener\"><code>test/add.test.js</code></a>文件，可以看到这个测试用例是用ES6写的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> add <span class=\"keyword\">from</span> <span class=\"string\">'../src/add.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> chai <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> expect = chai.expect;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'加法函数的测试'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'1 加 1 应该等于 2'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    expect(add(<span class=\"number\">1</span>, <span class=\"number\">1</span>)).to.be.equal(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>ES6转码，需要安装Babel。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install babel-core babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure>\n<p>然后，在项目目录下面，新建一个<a href=\"https://github.com/ruanyf/mocha-demos/blob/master/demo04/.babelrc\" target=\"_blank\" rel=\"noopener\"><code>.babelrc</code></a>配置文件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [ <span class=\"string\">\"es2015\"</span> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后，使用<code>--compilers</code>参数指定测试脚本的转码器。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register</span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>--compilers</code>参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用<code>babel-core/register</code>模块，处理一下<code>.js</code>文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。</p>\n<blockquote>\n<p>可以结合mocha.opts使用，或者在package.json中自定义命令去实现。</p>\n</blockquote>\n<h3 id=\"package-json（使用方式：npm-run-test）\"><a href=\"#package-json（使用方式：npm-run-test）\" class=\"headerlink\" title=\"package.json（使用方式：npm run test）\"></a>package.json（使用方式：<code>npm run test</code>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --recursive --compilers js:babel-core/register\"</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha --recursive --require babel-core/register\"</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Mocha-opts（使用方式：-mocha）\"><a href=\"#Mocha-opts（使用方式：-mocha）\" class=\"headerlink\" title=\"Mocha.opts（使用方式： mocha）\"></a>Mocha.opts（使用方式： <code>mocha</code>）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter spec</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">--compilers js:babel-core/register</span><br></pre></td></tr></table></figure>\n<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--reporter spec</span><br><span class=\"line\">--recursive</span><br><span class=\"line\">--<span class=\"built_in\">require</span> babel-core/register</span><br></pre></td></tr></table></figure>"},{"title":"protractor","date":"2020-04-04T06:58:26.000Z","comments":0,"_content":"\n# protractor\n\n[Source Code](https://github.com/dangchaofeng/protractor)\n\n","source":"_posts/protractor.md","raw":"---\ntitle: protractor\ndate: 2020-04-04 14:58:26\ntags:\n- e2e\ncategories:\n- protractor\ncomments: false\n---\n\n# protractor\n\n[Source Code](https://github.com/dangchaofeng/protractor)\n\n","slug":"protractor","published":1,"updated":"2021-01-08T13:07:02.302Z","layout":"post","photos":[],"link":"","_id":"ckjoauxgn001kde2x55kztfap","content":"<h1 id=\"protractor\"><a href=\"#protractor\" class=\"headerlink\" title=\"protractor\"></a>protractor</h1><p><a href=\"https://github.com/dangchaofeng/protractor\" target=\"_blank\" rel=\"noopener\">Source Code</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"protractor\"><a href=\"#protractor\" class=\"headerlink\" title=\"protractor\"></a>protractor</h1><p><a href=\"https://github.com/dangchaofeng/protractor\" target=\"_blank\" rel=\"noopener\">Source Code</a></p>\n"},{"title":"如何给无网的服务器linux环境安装nodeJs","comments":0,"_content":"1. 首先我们本地需要有一个已经下载好的node文件\n\n   * [下载地址1（英文）]: (https://nodejs.org/en/download/)\n\n   * [下载地址2（中文）]: (http://nodejs.cn/download/)\n\n     >  备注： 首先通过ssh连接我们要进入的linux系统中，输入密码连接成功后，通过  uname -a  命令查看到Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图：\n\n   \t![Image1 text](no-network-linux-install-nodeJs/img1.jpg)\n\n   > 所以我们需要下载一个64位linux二进制包。\n\n   ![Image2 text](no-network-linux-install-nodeJs/img2.jpg)\n\n2. 将下载下来的文件上传服务器并解压，查看版本正常后，进行创建全局软连接\n\n   * 将文件上传服务器，通过scp命令，如图：\n\n     ![Image3 text](no-network-linux-install-nodeJs/img3.jpg)\n\n   * 然后再次通过ssh连接服务器后，在上面找到文件进行解压，正常流程如图：\n\n     > 备注：正常流程，linux支持xz解压，将文件解压为tar类型，再通过tar -xvf 解决即可。\n     >\n     > 如果你的linux不支持xz解压，请在自己本地[下载配置xz](https://www.jianshu.com/p/6efadc7f86cf)并且解压为tar文件，再通过scp命令传到服务器上，再通过tar -xvf 解决即可。\n     >\n     >\n\n     ![Image4 text](no-network-linux-install-nodeJs/img4.jpg)\n\n\n   * 最后一步，我们需要进入我所在tar解压后的文件夹下/bin\n\n     > 备注：进入到文件夹/bin下后，ls一下，会发现有node 和npm的存在，我们执行了node -v, npm -v；发现提示command not fount 命令不存在，因为我们没有创建全局软连接。\n     >\n     > * ln -s /dcf/node-v10.14.2-linux-x64/bin/node /usr/local/bin/\n     > * ln -s /dcf/node-v10.14.2-linux-x64/bin/npm /usr/local/bin/\n     >\n     > 通过ln -s 创建全局软连接之后，就可以正常使用。\n     >\n     > 注意：一定要用绝对路径，不要用相对路径去配置软连接，那样会无效！\n\n     ![Image5 text](no-network-linux-install-nodeJs/img5.jpg)\n\n3. 全局软连接建立完成后，执行node -v； npm -v；发现有版本后，就说明安装成了。","source":"_posts/no-network-linux-install-nodeJs.md","raw":"---\ntitle: 如何给无网的服务器linux环境安装nodeJs\ntags:\n- linux\n- node\ncategories: \n- linux\n- node\ncomments: false\n---\n1. 首先我们本地需要有一个已经下载好的node文件\n\n   * [下载地址1（英文）]: (https://nodejs.org/en/download/)\n\n   * [下载地址2（中文）]: (http://nodejs.cn/download/)\n\n     >  备注： 首先通过ssh连接我们要进入的linux系统中，输入密码连接成功后，通过  uname -a  命令查看到Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图：\n\n   \t![Image1 text](no-network-linux-install-nodeJs/img1.jpg)\n\n   > 所以我们需要下载一个64位linux二进制包。\n\n   ![Image2 text](no-network-linux-install-nodeJs/img2.jpg)\n\n2. 将下载下来的文件上传服务器并解压，查看版本正常后，进行创建全局软连接\n\n   * 将文件上传服务器，通过scp命令，如图：\n\n     ![Image3 text](no-network-linux-install-nodeJs/img3.jpg)\n\n   * 然后再次通过ssh连接服务器后，在上面找到文件进行解压，正常流程如图：\n\n     > 备注：正常流程，linux支持xz解压，将文件解压为tar类型，再通过tar -xvf 解决即可。\n     >\n     > 如果你的linux不支持xz解压，请在自己本地[下载配置xz](https://www.jianshu.com/p/6efadc7f86cf)并且解压为tar文件，再通过scp命令传到服务器上，再通过tar -xvf 解决即可。\n     >\n     >\n\n     ![Image4 text](no-network-linux-install-nodeJs/img4.jpg)\n\n\n   * 最后一步，我们需要进入我所在tar解压后的文件夹下/bin\n\n     > 备注：进入到文件夹/bin下后，ls一下，会发现有node 和npm的存在，我们执行了node -v, npm -v；发现提示command not fount 命令不存在，因为我们没有创建全局软连接。\n     >\n     > * ln -s /dcf/node-v10.14.2-linux-x64/bin/node /usr/local/bin/\n     > * ln -s /dcf/node-v10.14.2-linux-x64/bin/npm /usr/local/bin/\n     >\n     > 通过ln -s 创建全局软连接之后，就可以正常使用。\n     >\n     > 注意：一定要用绝对路径，不要用相对路径去配置软连接，那样会无效！\n\n     ![Image5 text](no-network-linux-install-nodeJs/img5.jpg)\n\n3. 全局软连接建立完成后，执行node -v； npm -v；发现有版本后，就说明安装成了。","slug":"no-network-linux-install-nodeJs","published":1,"date":"2021-01-08T13:07:02.291Z","updated":"2021-01-08T13:07:02.292Z","layout":"post","photos":[],"link":"","_id":"ckjoauxh3001mde2x5h06kooq","content":"<ol>\n<li><p>首先我们本地需要有一个已经下载好的node文件</p>\n<ul>\n<li><p>[下载地址1（英文）]: (<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a>)</p>\n</li>\n<li><p>[下载地址2（中文）]: (<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/download/</a>)</p>\n<blockquote>\n<p> 备注： 首先通过ssh连接我们要进入的linux系统中，输入密码连接成功后，通过  uname -a  命令查看到Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图：</p>\n</blockquote>\n<p>  <img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img1.jpg\" alt=\"Image1 text\"></p>\n</li>\n</ul>\n<blockquote>\n<p>所以我们需要下载一个64位linux二进制包。</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img2.jpg\" alt=\"Image2 text\"></p>\n</li>\n<li><p>将下载下来的文件上传服务器并解压，查看版本正常后，进行创建全局软连接</p>\n<ul>\n<li><p>将文件上传服务器，通过scp命令，如图：</p>\n<p><img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img3.jpg\" alt=\"Image3 text\"></p>\n</li>\n<li><p>然后再次通过ssh连接服务器后，在上面找到文件进行解压，正常流程如图：</p>\n<blockquote>\n<p>备注：正常流程，linux支持xz解压，将文件解压为tar类型，再通过tar -xvf 解决即可。</p>\n<p>如果你的linux不支持xz解压，请在自己本地<a href=\"https://www.jianshu.com/p/6efadc7f86cf\" target=\"_blank\" rel=\"noopener\">下载配置xz</a>并且解压为tar文件，再通过scp命令传到服务器上，再通过tar -xvf 解决即可。</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img4.jpg\" alt=\"Image4 text\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>最后一步，我们需要进入我所在tar解压后的文件夹下/bin</p>\n<blockquote>\n<p>备注：进入到文件夹/bin下后，ls一下，会发现有node 和npm的存在，我们执行了node -v, npm -v；发现提示command not fount 命令不存在，因为我们没有创建全局软连接。</p>\n<ul>\n<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/node /usr/local/bin/</li>\n<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/npm /usr/local/bin/</li>\n</ul>\n<p>通过ln -s 创建全局软连接之后，就可以正常使用。</p>\n<p>注意：一定要用绝对路径，不要用相对路径去配置软连接，那样会无效！</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img5.jpg\" alt=\"Image5 text\"></p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>全局软连接建立完成后，执行node -v； npm -v；发现有版本后，就说明安装成了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>首先我们本地需要有一个已经下载好的node文件</p>\n<ul>\n<li><p>[下载地址1（英文）]: (<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/download/</a>)</p>\n</li>\n<li><p>[下载地址2（中文）]: (<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/download/</a>)</p>\n<blockquote>\n<p> 备注： 首先通过ssh连接我们要进入的linux系统中，输入密码连接成功后，通过  uname -a  命令查看到Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图：</p>\n</blockquote>\n<p>  <img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img1.jpg\" alt=\"Image1 text\"></p>\n</li>\n</ul>\n<blockquote>\n<p>所以我们需要下载一个64位linux二进制包。</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img2.jpg\" alt=\"Image2 text\"></p>\n</li>\n<li><p>将下载下来的文件上传服务器并解压，查看版本正常后，进行创建全局软连接</p>\n<ul>\n<li><p>将文件上传服务器，通过scp命令，如图：</p>\n<p><img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img3.jpg\" alt=\"Image3 text\"></p>\n</li>\n<li><p>然后再次通过ssh连接服务器后，在上面找到文件进行解压，正常流程如图：</p>\n<blockquote>\n<p>备注：正常流程，linux支持xz解压，将文件解压为tar类型，再通过tar -xvf 解决即可。</p>\n<p>如果你的linux不支持xz解压，请在自己本地<a href=\"https://www.jianshu.com/p/6efadc7f86cf\" target=\"_blank\" rel=\"noopener\">下载配置xz</a>并且解压为tar文件，再通过scp命令传到服务器上，再通过tar -xvf 解决即可。</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img4.jpg\" alt=\"Image4 text\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>最后一步，我们需要进入我所在tar解压后的文件夹下/bin</p>\n<blockquote>\n<p>备注：进入到文件夹/bin下后，ls一下，会发现有node 和npm的存在，我们执行了node -v, npm -v；发现提示command not fount 命令不存在，因为我们没有创建全局软连接。</p>\n<ul>\n<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/node /usr/local/bin/</li>\n<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/npm /usr/local/bin/</li>\n</ul>\n<p>通过ln -s 创建全局软连接之后，就可以正常使用。</p>\n<p>注意：一定要用绝对路径，不要用相对路径去配置软连接，那样会无效！</p>\n</blockquote>\n<p><img src=\"/blog/dist/2021/01/08/no-network-linux-install-nodeJs/img5.jpg\" alt=\"Image5 text\"></p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>全局软连接建立完成后，执行node -v； npm -v；发现有版本后，就说明安装成了。</li>\n</ol>\n"},{"title":"vue的双向绑定","date":"2019-01-02T02:11:40.000Z","comments":0,"_content":"\n# 简易Vue实现\n\n> 本人练习制作的(网速慢的时候，页面会显示源码{{getHelloWorld}})[简易版vue](https://dangchaofeng.github.io/vue-simple/cf-result/index.html)\n\n> 演示版的源码（含清晰注释/cf-result文件下）[在这里](https://github.com/dangchaofeng/vue-simple)\n\n> 要实现简单的vue，必须掌握两点：\n\n* 数据劫持，Object.defineProperty()\n* 发布-订阅模式 \n\n## 创建对象的方法\n\n### 字面量创建法\n\n```javascript\nvar people = {\n    name: 'DangChaofeng',\n    age: '25'\n};\n```\n\n### 构造函数创建法\n\n```\tjavascript\nvar people = new Object();\npeople.name = 'DangChaofeng';\npeople.age = '25';\n```\n\n创建出来的对象，我们可以对它进行任意操作，增删改查均可以。\n\nEg:\n\n```\tjavascript\n// 增加：\npeople.gender = 'man';\n// 删除\ndelete people.gender;\n// 修改\npeople.name = 'Suliang';\n// 查(获取)\npeople.name\n```\n\n但是你们有没有想过，为什么我们可以对它进行增删改查呢？我们已经知道对象是一个键值对，key-value（属性-值）的存在，少有人去知道，对象属性还有自己的特性。\n\n## 对象属性的四大特性\n\n### 数据属性\n\n```javascript\nvar obj = new Object();\nObject.defineProperty(obj, 'name', {\n    value: \"Tom\",\n    writable: true,\n    configurable: true,\n    enumerable: true\n});\n```\n\n### 访问器属性\n\n```\tjavascript\nvar obj = new Object();\nvar tempVar = '123';\nObject.defineProperty(obj, 'name', {\n    configurable: true,\n    enumerable: true,\n    set: function(val){\n        tempVar = val;\n    },\n    get: function(){\n        return tempVar;\n    }\n});\n```\n\n这里需要说明下： 如果我们不使用Object.defineProperty()来创建属性，默认创建出来的属性的特性，均为true,如果使用Object.defineProperty()来创建属性，不写的特性，均默认为fasle。\n\n如果我不写writable: true，则可写行性为false,赋值操作将失败。\n\nVUE中的`数据劫持`，就是利用对象的访问器属性，通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时做你想要做的事情。\n\n## 发布-订阅者模式\n\n> jq的$().on()、$().trigger()；就是典型的一种发布订阅模式实现。下来我们实现自己的一个简易版发布订阅者模式：\n\n```js\nfunction Public() {\n  // 一个中间站，是用来收集存储并建立发布者和订阅者之间的联系：\n  this.handlers = {};\n}\nPublic.prototype = {\n    // 订阅事件\n    on: function(eventType, handler){\n        var self = this;\n        // 如果不存在这个事件，则初始化，值是一个数组。(因为对一个事件可以监听多次，挂不同的回调函数，所以事件名称对应多个事件函数).\n        if(!(eventType in self.handlers)) {\n           self.handlers[eventType] = [];\n        } else {\n           self.handlers[eventType].push(handler);\n        }\n        return this;\n    },\n     // 触发事件(发布事件) 循环执行事件对应的所有事件函数，并把参数带进入。\n    emit: function(eventType){\n       var self = this;\n       var handlerArgs = Array.prototype.slice.call(arguments,1);\n       for(var i = 0; i < self.handlers[eventType].length; i++) {\n         self.handlers[eventType][i].apply(self,handlerArgs);\n       }\n       return self;\n    },\n    // 删除订阅事件\n    off: function(eventType, handler){\n        var currentEvent = this.handlers[eventType];\n        var len = 0;\n        if (currentEvent) {\n            len = currentEvent.length;\n            for (var i = len - 1; i >= 0; i--){\n                if (currentEvent[i] === handler){\n                    currentEvent.splice(i, 1);\n                }\n            }\n        }\n        return this;\n    }\n};\n \nvar Publisher = new Public();\n \n//订阅事件a\nPublisher.on('a', function(data){\n    console.log(1 + data);\n});\nPublisher.on('a', function(data){\n    console.log(2 + data);\n});\n \n//触发事件a\nPublisher.emit('a', '我是第1次调用的参数');\n \nPublisher.emit('a', '我是第2次调用的参数');　\n```\n\n\n\n\n","source":"_posts/vue.md","raw":"---\ntitle: vue的双向绑定\ndate: 2019-01-02 10:11:40\ntags:\n- vue\n- 数据劫持\n- 发布订阅\ncategories:\n- vue\n- 数据劫持\n- 发布订阅\ncomments: false\n---\n\n# 简易Vue实现\n\n> 本人练习制作的(网速慢的时候，页面会显示源码{{getHelloWorld}})[简易版vue](https://dangchaofeng.github.io/vue-simple/cf-result/index.html)\n\n> 演示版的源码（含清晰注释/cf-result文件下）[在这里](https://github.com/dangchaofeng/vue-simple)\n\n> 要实现简单的vue，必须掌握两点：\n\n* 数据劫持，Object.defineProperty()\n* 发布-订阅模式 \n\n## 创建对象的方法\n\n### 字面量创建法\n\n```javascript\nvar people = {\n    name: 'DangChaofeng',\n    age: '25'\n};\n```\n\n### 构造函数创建法\n\n```\tjavascript\nvar people = new Object();\npeople.name = 'DangChaofeng';\npeople.age = '25';\n```\n\n创建出来的对象，我们可以对它进行任意操作，增删改查均可以。\n\nEg:\n\n```\tjavascript\n// 增加：\npeople.gender = 'man';\n// 删除\ndelete people.gender;\n// 修改\npeople.name = 'Suliang';\n// 查(获取)\npeople.name\n```\n\n但是你们有没有想过，为什么我们可以对它进行增删改查呢？我们已经知道对象是一个键值对，key-value（属性-值）的存在，少有人去知道，对象属性还有自己的特性。\n\n## 对象属性的四大特性\n\n### 数据属性\n\n```javascript\nvar obj = new Object();\nObject.defineProperty(obj, 'name', {\n    value: \"Tom\",\n    writable: true,\n    configurable: true,\n    enumerable: true\n});\n```\n\n### 访问器属性\n\n```\tjavascript\nvar obj = new Object();\nvar tempVar = '123';\nObject.defineProperty(obj, 'name', {\n    configurable: true,\n    enumerable: true,\n    set: function(val){\n        tempVar = val;\n    },\n    get: function(){\n        return tempVar;\n    }\n});\n```\n\n这里需要说明下： 如果我们不使用Object.defineProperty()来创建属性，默认创建出来的属性的特性，均为true,如果使用Object.defineProperty()来创建属性，不写的特性，均默认为fasle。\n\n如果我不写writable: true，则可写行性为false,赋值操作将失败。\n\nVUE中的`数据劫持`，就是利用对象的访问器属性，通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时做你想要做的事情。\n\n## 发布-订阅者模式\n\n> jq的$().on()、$().trigger()；就是典型的一种发布订阅模式实现。下来我们实现自己的一个简易版发布订阅者模式：\n\n```js\nfunction Public() {\n  // 一个中间站，是用来收集存储并建立发布者和订阅者之间的联系：\n  this.handlers = {};\n}\nPublic.prototype = {\n    // 订阅事件\n    on: function(eventType, handler){\n        var self = this;\n        // 如果不存在这个事件，则初始化，值是一个数组。(因为对一个事件可以监听多次，挂不同的回调函数，所以事件名称对应多个事件函数).\n        if(!(eventType in self.handlers)) {\n           self.handlers[eventType] = [];\n        } else {\n           self.handlers[eventType].push(handler);\n        }\n        return this;\n    },\n     // 触发事件(发布事件) 循环执行事件对应的所有事件函数，并把参数带进入。\n    emit: function(eventType){\n       var self = this;\n       var handlerArgs = Array.prototype.slice.call(arguments,1);\n       for(var i = 0; i < self.handlers[eventType].length; i++) {\n         self.handlers[eventType][i].apply(self,handlerArgs);\n       }\n       return self;\n    },\n    // 删除订阅事件\n    off: function(eventType, handler){\n        var currentEvent = this.handlers[eventType];\n        var len = 0;\n        if (currentEvent) {\n            len = currentEvent.length;\n            for (var i = len - 1; i >= 0; i--){\n                if (currentEvent[i] === handler){\n                    currentEvent.splice(i, 1);\n                }\n            }\n        }\n        return this;\n    }\n};\n \nvar Publisher = new Public();\n \n//订阅事件a\nPublisher.on('a', function(data){\n    console.log(1 + data);\n});\nPublisher.on('a', function(data){\n    console.log(2 + data);\n});\n \n//触发事件a\nPublisher.emit('a', '我是第1次调用的参数');\n \nPublisher.emit('a', '我是第2次调用的参数');　\n```\n\n\n\n\n","slug":"vue","published":1,"updated":"2021-01-08T13:07:02.306Z","layout":"post","photos":[],"link":"","_id":"ckjoauxh8001qde2xeedazx25","content":"<h1 id=\"简易Vue实现\"><a href=\"#简易Vue实现\" class=\"headerlink\" title=\"简易Vue实现\"></a>简易Vue实现</h1><blockquote>\n<p>本人练习制作的(网速慢的时候，页面会显示源码)<a href=\"https://dangchaofeng.github.io/vue-simple/cf-result/index.html\">简易版vue</a></p>\n</blockquote>\n<blockquote>\n<p>演示版的源码（含清晰注释/cf-result文件下）<a href=\"https://github.com/dangchaofeng/vue-simple\" target=\"_blank\" rel=\"noopener\">在这里</a></p>\n</blockquote>\n<blockquote>\n<p>要实现简单的vue，必须掌握两点：</p>\n</blockquote>\n<ul>\n<li>数据劫持，Object.defineProperty()</li>\n<li>发布-订阅模式 </li>\n</ul>\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><h3 id=\"字面量创建法\"><a href=\"#字面量创建法\" class=\"headerlink\" title=\"字面量创建法\"></a>字面量创建法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'DangChaofeng'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'25'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数创建法\"><a href=\"#构造函数创建法\" class=\"headerlink\" title=\"构造函数创建法\"></a>构造函数创建法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">people.name = <span class=\"string\">'DangChaofeng'</span>;</span><br><span class=\"line\">people.age = <span class=\"string\">'25'</span>;</span><br></pre></td></tr></table></figure>\n<p>创建出来的对象，我们可以对它进行任意操作，增删改查均可以。</p>\n<p>Eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加：</span></span><br><span class=\"line\">people.gender = <span class=\"string\">'man'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> people.gender;</span><br><span class=\"line\"><span class=\"comment\">// 修改</span></span><br><span class=\"line\">people.name = <span class=\"string\">'Suliang'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 查(获取)</span></span><br><span class=\"line\">people.name</span><br></pre></td></tr></table></figure>\n<p>但是你们有没有想过，为什么我们可以对它进行增删改查呢？我们已经知道对象是一个键值对，key-value（属性-值）的存在，少有人去知道，对象属性还有自己的特性。</p>\n<h2 id=\"对象属性的四大特性\"><a href=\"#对象属性的四大特性\" class=\"headerlink\" title=\"对象属性的四大特性\"></a>对象属性的四大特性</h2><h3 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"Tom\"</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> tempVar = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(val)&#123;</span><br><span class=\"line\">        tempVar = val;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tempVar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里需要说明下： 如果我们不使用Object.defineProperty()来创建属性，默认创建出来的属性的特性，均为true,如果使用Object.defineProperty()来创建属性，不写的特性，均默认为fasle。</p>\n<p>如果我不写writable: true，则可写行性为false,赋值操作将失败。</p>\n<p>VUE中的<code>数据劫持</code>，就是利用对象的访问器属性，通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时做你想要做的事情。</p>\n<h2 id=\"发布-订阅者模式\"><a href=\"#发布-订阅者模式\" class=\"headerlink\" title=\"发布-订阅者模式\"></a>发布-订阅者模式</h2><blockquote>\n<p>jq的$().on()、$().trigger()；就是典型的一种发布订阅模式实现。下来我们实现自己的一个简易版发布订阅者模式：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Public</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一个中间站，是用来收集存储并建立发布者和订阅者之间的联系：</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlers = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Public.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 订阅事件</span></span><br><span class=\"line\">    on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不存在这个事件，则初始化，值是一个数组。(因为对一个事件可以监听多次，挂不同的回调函数，所以事件名称对应多个事件函数).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(eventType <span class=\"keyword\">in</span> self.handlers)) &#123;</span><br><span class=\"line\">           self.handlers[eventType] = [];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           self.handlers[eventType].push(handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">     <span class=\"comment\">// 触发事件(发布事件) 循环执行事件对应的所有事件函数，并把参数带进入。</span></span><br><span class=\"line\">    emit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> handlerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.handlers[eventType].length; i++) &#123;</span><br><span class=\"line\">         self.handlers[eventType][i].apply(self,handlerArgs);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 删除订阅事件</span></span><br><span class=\"line\">    off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentEvent = <span class=\"keyword\">this</span>.handlers[eventType];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentEvent) &#123;</span><br><span class=\"line\">            len = currentEvent.length;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentEvent[i] === handler)&#123;</span><br><span class=\"line\">                    currentEvent.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> Publisher = <span class=\"keyword\">new</span> Public();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//订阅事件a</span></span><br><span class=\"line\">Publisher.on(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Publisher.on(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//触发事件a</span></span><br><span class=\"line\">Publisher.emit(<span class=\"string\">'a'</span>, <span class=\"string\">'我是第1次调用的参数'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Publisher.emit(<span class=\"string\">'a'</span>, <span class=\"string\">'我是第2次调用的参数'</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简易Vue实现\"><a href=\"#简易Vue实现\" class=\"headerlink\" title=\"简易Vue实现\"></a>简易Vue实现</h1><blockquote>\n<p>本人练习制作的(网速慢的时候，页面会显示源码)<a href=\"https://dangchaofeng.github.io/vue-simple/cf-result/index.html\">简易版vue</a></p>\n</blockquote>\n<blockquote>\n<p>演示版的源码（含清晰注释/cf-result文件下）<a href=\"https://github.com/dangchaofeng/vue-simple\" target=\"_blank\" rel=\"noopener\">在这里</a></p>\n</blockquote>\n<blockquote>\n<p>要实现简单的vue，必须掌握两点：</p>\n</blockquote>\n<ul>\n<li>数据劫持，Object.defineProperty()</li>\n<li>发布-订阅模式 </li>\n</ul>\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><h3 id=\"字面量创建法\"><a href=\"#字面量创建法\" class=\"headerlink\" title=\"字面量创建法\"></a>字面量创建法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'DangChaofeng'</span>,</span><br><span class=\"line\">    age: <span class=\"string\">'25'</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数创建法\"><a href=\"#构造函数创建法\" class=\"headerlink\" title=\"构造函数创建法\"></a>构造函数创建法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">people.name = <span class=\"string\">'DangChaofeng'</span>;</span><br><span class=\"line\">people.age = <span class=\"string\">'25'</span>;</span><br></pre></td></tr></table></figure>\n<p>创建出来的对象，我们可以对它进行任意操作，增删改查均可以。</p>\n<p>Eg:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加：</span></span><br><span class=\"line\">people.gender = <span class=\"string\">'man'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> people.gender;</span><br><span class=\"line\"><span class=\"comment\">// 修改</span></span><br><span class=\"line\">people.name = <span class=\"string\">'Suliang'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 查(获取)</span></span><br><span class=\"line\">people.name</span><br></pre></td></tr></table></figure>\n<p>但是你们有没有想过，为什么我们可以对它进行增删改查呢？我们已经知道对象是一个键值对，key-value（属性-值）的存在，少有人去知道，对象属性还有自己的特性。</p>\n<h2 id=\"对象属性的四大特性\"><a href=\"#对象属性的四大特性\" class=\"headerlink\" title=\"对象属性的四大特性\"></a>对象属性的四大特性</h2><h3 id=\"数据属性\"><a href=\"#数据属性\" class=\"headerlink\" title=\"数据属性\"></a>数据属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">    value: <span class=\"string\">\"Tom\"</span>,</span><br><span class=\"line\">    writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问器属性\"><a href=\"#访问器属性\" class=\"headerlink\" title=\"访问器属性\"></a>访问器属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> tempVar = <span class=\"string\">'123'</span>;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(obj, <span class=\"string\">'name'</span>, &#123;</span><br><span class=\"line\">    configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(val)&#123;</span><br><span class=\"line\">        tempVar = val;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tempVar;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里需要说明下： 如果我们不使用Object.defineProperty()来创建属性，默认创建出来的属性的特性，均为true,如果使用Object.defineProperty()来创建属性，不写的特性，均默认为fasle。</p>\n<p>如果我不写writable: true，则可写行性为false,赋值操作将失败。</p>\n<p>VUE中的<code>数据劫持</code>，就是利用对象的访问器属性，通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时做你想要做的事情。</p>\n<h2 id=\"发布-订阅者模式\"><a href=\"#发布-订阅者模式\" class=\"headerlink\" title=\"发布-订阅者模式\"></a>发布-订阅者模式</h2><blockquote>\n<p>jq的$().on()、$().trigger()；就是典型的一种发布订阅模式实现。下来我们实现自己的一个简易版发布订阅者模式：</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Public</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一个中间站，是用来收集存储并建立发布者和订阅者之间的联系：</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlers = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Public.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 订阅事件</span></span><br><span class=\"line\">    on: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不存在这个事件，则初始化，值是一个数组。(因为对一个事件可以监听多次，挂不同的回调函数，所以事件名称对应多个事件函数).</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!(eventType <span class=\"keyword\">in</span> self.handlers)) &#123;</span><br><span class=\"line\">           self.handlers[eventType] = [];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           self.handlers[eventType].push(handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">     <span class=\"comment\">// 触发事件(发布事件) 循环执行事件对应的所有事件函数，并把参数带进入。</span></span><br><span class=\"line\">    emit: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> handlerArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; self.handlers[eventType].length; i++) &#123;</span><br><span class=\"line\">         self.handlers[eventType][i].apply(self,handlerArgs);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> self;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 删除订阅事件</span></span><br><span class=\"line\">    off: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventType, handler</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentEvent = <span class=\"keyword\">this</span>.handlers[eventType];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentEvent) &#123;</span><br><span class=\"line\">            len = currentEvent.length;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = len - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentEvent[i] === handler)&#123;</span><br><span class=\"line\">                    currentEvent.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> Publisher = <span class=\"keyword\">new</span> Public();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//订阅事件a</span></span><br><span class=\"line\">Publisher.on(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Publisher.on(<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span> + data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//触发事件a</span></span><br><span class=\"line\">Publisher.emit(<span class=\"string\">'a'</span>, <span class=\"string\">'我是第1次调用的参数'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">Publisher.emit(<span class=\"string\">'a'</span>, <span class=\"string\">'我是第2次调用的参数'</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"TCP三次握手四次挥手","date":"2019-01-02T06:40:29.000Z","comments":0,"_content":"\n## TCP三次握手四次挥手\n\n### TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\n\n> 在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n>\n> 其中，对于我们日常的分析有用的就是前面的五个字段。\n\n```js\nSYN表示建立连接，\n\nFIN表示关闭连接，\n\nACK表示响应，\n\nPSH表示有 DATA数据传输，\n\nRST表示连接重置。\n```\n\n其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n\n如果只是单个的一个SYN，它表示的只是建立连接。\n\nTCP的几次握手就是通过这样的ACK表现出来的。\n\n但`SYN`与`FIN`是不会同时为1的，因为前者表示的是`建立连接`，而后者表示的是`断开连接`。\n\n\n\nRST一般是在FIN之后才会出现为1的情况，表示的是连接重置。\n\n 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n\n\n\nPSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\n\n\n\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\n概念补充-TCP三次握手：\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：\n\n`SYN`(synchronous建立联机) \n\n`ACK`(acknowledgement 确认) \n\n`PSH`(push传送) \n\n`FIN`(finish结束) \n\n`RST`(reset重置) \n\n`URG`(urgent紧急)\n\n`Sequence number`(顺序号码，用小写`seq`代替) \n\n`Acknowledge number`(确认号码，用小写`ack`代替)\n\n### TCP连接的建立（三次握手）\n\n> TCP三次握手如图：\n\n![img text](tcp/img1.png)\n\n1. TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；\n2. TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位`SYN=1`，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。<font color=red>TCP规定，SYN报文段（`SYN=1`的报文段）不能携带数据，但需要消耗掉一个序号。</font>\n3. TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 `ACK=1`，`SYN=1`，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。<font color=red>这个报文也不能携带数据，但是同样要消耗一个序号。</font>\n4. TCP客户进程收到确认后，还要向服务器给出确认。确认报文的`ACK=1`，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。<font color=red>TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</font>\n5. 当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。\n\n### 为什么TCP客户端最后还要发送一次确认呢？\n\n一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。\n\n如果使用的是两次握手建立连接，假设有这样一种场景，<font color=blue>客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，</font>由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<font color=blue>此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</font>\n\n如果采用的是三次握手，就算是<font color=green>那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。</font>由于服务器收不到确认，就知道客户端并没有请求连接。\n\n\n\n> 数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。tcp四次挥手如图：\n\n![img text](tcp/img2.png)\n\n1. 客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <font color=red face=\"黑体\">TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</font>\n2. 服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<font color=red face=\"黑体\">TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。</font><font color=blue>这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</font>\n3. 客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<font color=red>（在这之前还需要接受服务器发送的最后的数据）。</font>\n4. 01服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n5. 客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<font color=red>注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</font>\n6. 服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<font color=red>可以看到，服务器结束TCP连接的时间要比客户端早一些。</font>\n\n### 为什么客户端最后还要等待2MSL？\n\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。\n\n第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，<font color=blue>站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，</font>而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n\n第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\n\n为什么建立连接是三次握手，关闭连接确是四次挥手呢？\n\n建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 \n\n而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。\n\n### 如果已经建立了连接，但是客户端突然出现故障了怎么办？\n\nTCP还设有一个`保活计时器`，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，<font color=blue>时间通常是设置为2小时</font>，若两小时还没有收到客户端的任何数据，服务器就会发送一个<font color=blue>探测报文段，以后每隔75秒发送一次</font>。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。","source":"_posts/tcp.md","raw":"---\ntitle: TCP三次握手四次挥手\ndate: 2019-01-02 14:40:29\ntags:\n- tcp连接、断开连接\ncategories:\n- tcp连接、断开连接\ncomments: false\n---\n\n## TCP三次握手四次挥手\n\n### TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\n\n> 在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.\n>\n> 其中，对于我们日常的分析有用的就是前面的五个字段。\n\n```js\nSYN表示建立连接，\n\nFIN表示关闭连接，\n\nACK表示响应，\n\nPSH表示有 DATA数据传输，\n\nRST表示连接重置。\n```\n\n其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，\n\n如果只是单个的一个SYN，它表示的只是建立连接。\n\nTCP的几次握手就是通过这样的ACK表现出来的。\n\n但`SYN`与`FIN`是不会同时为1的，因为前者表示的是`建立连接`，而后者表示的是`断开连接`。\n\n\n\nRST一般是在FIN之后才会出现为1的情况，表示的是连接重置。\n\n 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。\n\n\n\nPSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。\n\n\n\nTCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。\n\n概念补充-TCP三次握手：\n\nTCP(Transmission Control Protocol)传输控制协议\n\nTCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：\n\n位码即tcp标志位，有6种标示：\n\n`SYN`(synchronous建立联机) \n\n`ACK`(acknowledgement 确认) \n\n`PSH`(push传送) \n\n`FIN`(finish结束) \n\n`RST`(reset重置) \n\n`URG`(urgent紧急)\n\n`Sequence number`(顺序号码，用小写`seq`代替) \n\n`Acknowledge number`(确认号码，用小写`ack`代替)\n\n### TCP连接的建立（三次握手）\n\n> TCP三次握手如图：\n\n![img text](tcp/img1.png)\n\n1. TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；\n2. TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位`SYN=1`，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。<font color=red>TCP规定，SYN报文段（`SYN=1`的报文段）不能携带数据，但需要消耗掉一个序号。</font>\n3. TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 `ACK=1`，`SYN=1`，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。<font color=red>这个报文也不能携带数据，但是同样要消耗一个序号。</font>\n4. TCP客户进程收到确认后，还要向服务器给出确认。确认报文的`ACK=1`，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。<font color=red>TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</font>\n5. 当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。\n\n### 为什么TCP客户端最后还要发送一次确认呢？\n\n一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。\n\n如果使用的是两次握手建立连接，假设有这样一种场景，<font color=blue>客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，</font>由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<font color=blue>此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</font>\n\n如果采用的是三次握手，就算是<font color=green>那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。</font>由于服务器收不到确认，就知道客户端并没有请求连接。\n\n\n\n> 数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。tcp四次挥手如图：\n\n![img text](tcp/img2.png)\n\n1. 客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <font color=red face=\"黑体\">TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</font>\n2. 服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<font color=red face=\"黑体\">TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。</font><font color=blue>这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</font>\n3. 客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<font color=red>（在这之前还需要接受服务器发送的最后的数据）。</font>\n4. 01服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。\n5. 客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<font color=red>注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</font>\n6. 服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<font color=red>可以看到，服务器结束TCP连接的时间要比客户端早一些。</font>\n\n### 为什么客户端最后还要等待2MSL？\n\nMSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。\n\n第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，<font color=blue>站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，</font>而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。\n\n第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。\n\n为什么建立连接是三次握手，关闭连接确是四次挥手呢？\n\n建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 \n\n而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。\n\n### 如果已经建立了连接，但是客户端突然出现故障了怎么办？\n\nTCP还设有一个`保活计时器`，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，<font color=blue>时间通常是设置为2小时</font>，若两小时还没有收到客户端的任何数据，服务器就会发送一个<font color=blue>探测报文段，以后每隔75秒发送一次</font>。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。","slug":"tcp","published":1,"updated":"2021-01-08T13:07:02.303Z","layout":"post","photos":[],"link":"","_id":"ckjoauxhg001rde2x49h5c4s2","content":"<h2 id=\"TCP三次握手四次挥手\"><a href=\"#TCP三次握手四次挥手\" class=\"headerlink\" title=\"TCP三次握手四次挥手\"></a>TCP三次握手四次挥手</h2><h3 id=\"TCP的状态-SYN-FIN-ACK-PSH-RST-URG\"><a href=\"#TCP的状态-SYN-FIN-ACK-PSH-RST-URG\" class=\"headerlink\" title=\"TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\"></a>TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)</h3><blockquote>\n<p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>\n<p>其中，对于我们日常的分析有用的就是前面的五个字段。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYN表示建立连接，</span><br><span class=\"line\"></span><br><span class=\"line\">FIN表示关闭连接，</span><br><span class=\"line\"></span><br><span class=\"line\">ACK表示响应，</span><br><span class=\"line\"></span><br><span class=\"line\">PSH表示有 DATA数据传输，</span><br><span class=\"line\"></span><br><span class=\"line\">RST表示连接重置。</span><br></pre></td></tr></table></figure>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，</p>\n<p>如果只是单个的一个SYN，它表示的只是建立连接。</p>\n<p>TCP的几次握手就是通过这样的ACK表现出来的。</p>\n<p>但<code>SYN</code>与<code>FIN</code>是不会同时为1的，因为前者表示的是<code>建立连接</code>，而后者表示的是<code>断开连接</code>。</p>\n<p>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。</p>\n<p> 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>\n<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。</p>\n<p>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<p>概念补充-TCP三次握手：</p>\n<p>TCP(Transmission Control Protocol)传输控制协议</p>\n<p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：</p>\n<p><code>SYN</code>(synchronous建立联机) </p>\n<p><code>ACK</code>(acknowledgement 确认) </p>\n<p><code>PSH</code>(push传送) </p>\n<p><code>FIN</code>(finish结束) </p>\n<p><code>RST</code>(reset重置) </p>\n<p><code>URG</code>(urgent紧急)</p>\n<p><code>Sequence number</code>(顺序号码，用小写<code>seq</code>代替) </p>\n<p><code>Acknowledge number</code>(确认号码，用小写<code>ack</code>代替)</p>\n<h3 id=\"TCP连接的建立（三次握手）\"><a href=\"#TCP连接的建立（三次握手）\" class=\"headerlink\" title=\"TCP连接的建立（三次握手）\"></a>TCP连接的建立（三次握手）</h3><blockquote>\n<p>TCP三次握手如图：</p>\n</blockquote>\n<p><img src=\"/blog/dist/2019/01/02/tcp/img1.png\" alt=\"img text\"></p>\n<ol>\n<li>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；</li>\n<li>TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位<code>SYN=1</code>，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。<font color=\"red\">TCP规定，SYN报文段（<code>SYN=1</code>的报文段）不能携带数据，但需要消耗掉一个序号。</font></li>\n<li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 <code>ACK=1</code>，<code>SYN=1</code>，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。<font color=\"red\">这个报文也不能携带数据，但是同样要消耗一个序号。</font></li>\n<li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的<code>ACK=1</code>，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。<font color=\"red\">TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</font></li>\n<li>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。</li>\n</ol>\n<h3 id=\"为什么TCP客户端最后还要发送一次确认呢？\"><a href=\"#为什么TCP客户端最后还要发送一次确认呢？\" class=\"headerlink\" title=\"为什么TCP客户端最后还要发送一次确认呢？\"></a>为什么TCP客户端最后还要发送一次确认呢？</h3><p>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p>\n<p>如果使用的是两次握手建立连接，假设有这样一种场景，<font color=\"blue\">客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，</font>由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<font color=\"blue\">此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</font></p>\n<p>如果采用的是三次握手，就算是<font color=\"green\">那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。</font>由于服务器收不到确认，就知道客户端并没有请求连接。</p>\n<blockquote>\n<p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。tcp四次挥手如图：</p>\n</blockquote>\n<p><img src=\"/blog/dist/2019/01/02/tcp/img2.png\" alt=\"img text\"></p>\n<ol>\n<li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <font color=\"red\" face=\"黑体\">TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</font></li>\n<li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<font color=\"red\" face=\"黑体\">TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。</font><font color=\"blue\">这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</font></li>\n<li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<font color=\"red\">（在这之前还需要接受服务器发送的最后的数据）。</font></li>\n<li>01服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li>\n<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<font color=\"red\">注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</font></li>\n<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<font color=\"red\">可以看到，服务器结束TCP连接的时间要比客户端早一些。</font></li>\n</ol>\n<h3 id=\"为什么客户端最后还要等待2MSL？\"><a href=\"#为什么客户端最后还要等待2MSL？\" class=\"headerlink\" title=\"为什么客户端最后还要等待2MSL？\"></a>为什么客户端最后还要等待2MSL？</h3><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</p>\n<p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，<font color=\"blue\">站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，</font>而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p>\n<p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>\n<p>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p>\n<p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 </p>\n<p>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>\n<h3 id=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"><a href=\"#如果已经建立了连接，但是客户端突然出现故障了怎么办？\" class=\"headerlink\" title=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h3><p>TCP还设有一个<code>保活计时器</code>，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，<font color=\"blue\">时间通常是设置为2小时</font>，若两小时还没有收到客户端的任何数据，服务器就会发送一个<font color=\"blue\">探测报文段，以后每隔75秒发送一次</font>。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TCP三次握手四次挥手\"><a href=\"#TCP三次握手四次挥手\" class=\"headerlink\" title=\"TCP三次握手四次挥手\"></a>TCP三次握手四次挥手</h2><h3 id=\"TCP的状态-SYN-FIN-ACK-PSH-RST-URG\"><a href=\"#TCP的状态-SYN-FIN-ACK-PSH-RST-URG\" class=\"headerlink\" title=\"TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)\"></a>TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)</h3><blockquote>\n<p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>\n<p>其中，对于我们日常的分析有用的就是前面的五个字段。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SYN表示建立连接，</span><br><span class=\"line\"></span><br><span class=\"line\">FIN表示关闭连接，</span><br><span class=\"line\"></span><br><span class=\"line\">ACK表示响应，</span><br><span class=\"line\"></span><br><span class=\"line\">PSH表示有 DATA数据传输，</span><br><span class=\"line\"></span><br><span class=\"line\">RST表示连接重置。</span><br></pre></td></tr></table></figure>\n<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，</p>\n<p>如果只是单个的一个SYN，它表示的只是建立连接。</p>\n<p>TCP的几次握手就是通过这样的ACK表现出来的。</p>\n<p>但<code>SYN</code>与<code>FIN</code>是不会同时为1的，因为前者表示的是<code>建立连接</code>，而后者表示的是<code>断开连接</code>。</p>\n<p>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。</p>\n<p> 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>\n<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。</p>\n<p>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>\n<p>概念补充-TCP三次握手：</p>\n<p>TCP(Transmission Control Protocol)传输控制协议</p>\n<p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>\n<p>位码即tcp标志位，有6种标示：</p>\n<p><code>SYN</code>(synchronous建立联机) </p>\n<p><code>ACK</code>(acknowledgement 确认) </p>\n<p><code>PSH</code>(push传送) </p>\n<p><code>FIN</code>(finish结束) </p>\n<p><code>RST</code>(reset重置) </p>\n<p><code>URG</code>(urgent紧急)</p>\n<p><code>Sequence number</code>(顺序号码，用小写<code>seq</code>代替) </p>\n<p><code>Acknowledge number</code>(确认号码，用小写<code>ack</code>代替)</p>\n<h3 id=\"TCP连接的建立（三次握手）\"><a href=\"#TCP连接的建立（三次握手）\" class=\"headerlink\" title=\"TCP连接的建立（三次握手）\"></a>TCP连接的建立（三次握手）</h3><blockquote>\n<p>TCP三次握手如图：</p>\n</blockquote>\n<p><img src=\"/blog/dist/2019/01/02/tcp/img1.png\" alt=\"img text\"></p>\n<ol>\n<li>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；</li>\n<li>TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位<code>SYN=1</code>，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。<font color=\"red\">TCP规定，SYN报文段（<code>SYN=1</code>的报文段）不能携带数据，但需要消耗掉一个序号。</font></li>\n<li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 <code>ACK=1</code>，<code>SYN=1</code>，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。<font color=\"red\">这个报文也不能携带数据，但是同样要消耗一个序号。</font></li>\n<li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的<code>ACK=1</code>，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。<font color=\"red\">TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</font></li>\n<li>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。</li>\n</ol>\n<h3 id=\"为什么TCP客户端最后还要发送一次确认呢？\"><a href=\"#为什么TCP客户端最后还要发送一次确认呢？\" class=\"headerlink\" title=\"为什么TCP客户端最后还要发送一次确认呢？\"></a>为什么TCP客户端最后还要发送一次确认呢？</h3><p>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p>\n<p>如果使用的是两次握手建立连接，假设有这样一种场景，<font color=\"blue\">客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，</font>由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<font color=\"blue\">此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</font></p>\n<p>如果采用的是三次握手，就算是<font color=\"green\">那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。</font>由于服务器收不到确认，就知道客户端并没有请求连接。</p>\n<blockquote>\n<p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。tcp四次挥手如图：</p>\n</blockquote>\n<p><img src=\"/blog/dist/2019/01/02/tcp/img2.png\" alt=\"img text\"></p>\n<ol>\n<li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <font color=\"red\" face=\"黑体\">TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</font></li>\n<li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<font color=\"red\" face=\"黑体\">TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。</font><font color=\"blue\">这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</font></li>\n<li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<font color=\"red\">（在这之前还需要接受服务器发送的最后的数据）。</font></li>\n<li>01服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li>\n<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<font color=\"red\">注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</font></li>\n<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<font color=\"red\">可以看到，服务器结束TCP连接的时间要比客户端早一些。</font></li>\n</ol>\n<h3 id=\"为什么客户端最后还要等待2MSL？\"><a href=\"#为什么客户端最后还要等待2MSL？\" class=\"headerlink\" title=\"为什么客户端最后还要等待2MSL？\"></a>为什么客户端最后还要等待2MSL？</h3><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</p>\n<p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，<font color=\"blue\">站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，</font>而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p>\n<p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>\n<p>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p>\n<p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 </p>\n<p>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>\n<h3 id=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"><a href=\"#如果已经建立了连接，但是客户端突然出现故障了怎么办？\" class=\"headerlink\" title=\"如果已经建立了连接，但是客户端突然出现故障了怎么办？\"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h3><p>TCP还设有一个<code>保活计时器</code>，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，<font color=\"blue\">时间通常是设置为2小时</font>，若两小时还没有收到客户端的任何数据，服务器就会发送一个<font color=\"blue\">探测报文段，以后每隔75秒发送一次</font>。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>\n"},{"title":"npm常用命令","date":"2018-12-26T08:23:12.000Z","comments":0,"_content":"\n> 相信大家很多人，包括我自己，常常会对npm install --save-dev 、 npm install --save傻傻分不清楚,今天这里主要是对npm的常用命令进行一个总结。\n\n___\n\n> 首先，npm 是node.js自带的功能。查看npm版本\n\n```js\nnpm -v\n6.4.1\n```\n\n> 升级npm版本\n\n```js\nmac下: \n\tsudo npm install npm -g\nwindow下:\n\tnpm install npm -g\n```\n\n> 使用npm安装模块\n\n```js\nnpm install <Module Name>\neg: 使用npm安装node中的express框架\n\tnpm install express\n```\n\n安装好之后，express包就会放在当前工程目录下的node_modules 目录中，因此在代码中只需要通过 **require('express')** 的方式就好，无需指定第三方包路径。\n\n```js\nconst express = require('express');\n```\n\n> 默认方式为本地安装，还有一种是全局安装\n\n```js\nnpm install express -g   # 全局安装\n```\n\n> 接下来，我们列举下容易混淆的方式（注意①②的不同）\n\n```js\nnpm install X:\n\n\t- 会把X包安装到node_modules目录中\n\n\t- 不会修改package.json\n\n\t- 之后运行npm install命令时，不会自动安装X\n    \nnpm install X --save:\n\n    - 会把X包安装到node_modules目录中\n\n    - 会在package.json的 ①dependencies 属性下添加X\n\n    - 之后运行npm install命令时，会自动安装X到node_modules目录中\n\n    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，会自动安装msbuild到\t\t  node_modules目录中\nnpm install X --save-dev:\n\n    - 会把X包安装到node_modules目录中\n\n    - 会在package.json的 ②devDependencies 属性下添加X\n\n    - 之后运行npm install命令时，会自动安装X到node_modules目录中\n\n    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，不会自动安装X到\t\t\t  node_modules目录中\n```\n\n> npm install 使用原则\n\n```js\n运行时需要用到的包使用--save，否则使用--save-dev。\n```\n\n> npm 卸载模块\n\n```\nnpm uninstall X\n卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：\nnpm ls\n```\n\n> 更新模块\n\n```\nnpm update X\n```\n\n### 使用淘宝镜像\n\n> 大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n>\n> 你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:\n\n```js\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n注意： 如果使用的是cnpm，则只需要将第一个npm命令变为cnpm即可，其他和npm命令使用方式相同。","source":"_posts/npm-command.md","raw":"---\ntitle: npm常用命令\ndate: 2018-12-26 16:23:12\ntags: \n- npm\ncategories:\n- npm\ncomments: false\n---\n\n> 相信大家很多人，包括我自己，常常会对npm install --save-dev 、 npm install --save傻傻分不清楚,今天这里主要是对npm的常用命令进行一个总结。\n\n___\n\n> 首先，npm 是node.js自带的功能。查看npm版本\n\n```js\nnpm -v\n6.4.1\n```\n\n> 升级npm版本\n\n```js\nmac下: \n\tsudo npm install npm -g\nwindow下:\n\tnpm install npm -g\n```\n\n> 使用npm安装模块\n\n```js\nnpm install <Module Name>\neg: 使用npm安装node中的express框架\n\tnpm install express\n```\n\n安装好之后，express包就会放在当前工程目录下的node_modules 目录中，因此在代码中只需要通过 **require('express')** 的方式就好，无需指定第三方包路径。\n\n```js\nconst express = require('express');\n```\n\n> 默认方式为本地安装，还有一种是全局安装\n\n```js\nnpm install express -g   # 全局安装\n```\n\n> 接下来，我们列举下容易混淆的方式（注意①②的不同）\n\n```js\nnpm install X:\n\n\t- 会把X包安装到node_modules目录中\n\n\t- 不会修改package.json\n\n\t- 之后运行npm install命令时，不会自动安装X\n    \nnpm install X --save:\n\n    - 会把X包安装到node_modules目录中\n\n    - 会在package.json的 ①dependencies 属性下添加X\n\n    - 之后运行npm install命令时，会自动安装X到node_modules目录中\n\n    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，会自动安装msbuild到\t\t  node_modules目录中\nnpm install X --save-dev:\n\n    - 会把X包安装到node_modules目录中\n\n    - 会在package.json的 ②devDependencies 属性下添加X\n\n    - 之后运行npm install命令时，会自动安装X到node_modules目录中\n\n    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，不会自动安装X到\t\t\t  node_modules目录中\n```\n\n> npm install 使用原则\n\n```js\n运行时需要用到的包使用--save，否则使用--save-dev。\n```\n\n> npm 卸载模块\n\n```\nnpm uninstall X\n卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：\nnpm ls\n```\n\n> 更新模块\n\n```\nnpm update X\n```\n\n### 使用淘宝镜像\n\n> 大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n>\n> 你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:\n\n```js\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n注意： 如果使用的是cnpm，则只需要将第一个npm命令变为cnpm即可，其他和npm命令使用方式相同。","slug":"npm-command","published":1,"updated":"2021-01-08T13:07:02.301Z","layout":"post","photos":[],"link":"","_id":"ckjoauxhk001sde2xphlqc4fh","content":"<blockquote>\n<p>相信大家很多人，包括我自己，常常会对npm install –save-dev 、 npm install –save傻傻分不清楚,今天这里主要是对npm的常用命令进行一个总结。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>首先，npm 是node.js自带的功能。查看npm版本</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"><span class=\"number\">6.4</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>升级npm版本</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac下: </span><br><span class=\"line\">\tsudo npm install npm -g</span><br><span class=\"line\"><span class=\"built_in\">window</span>下:</span><br><span class=\"line\">\tnpm install npm -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用npm安装模块</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;Module Name&gt;</span><br><span class=\"line\">eg: 使用npm安装node中的express框架</span><br><span class=\"line\">\tnpm install express</span><br></pre></td></tr></table></figure>\n<p>安装好之后，express包就会放在当前工程目录下的node_modules 目录中，因此在代码中只需要通过 <strong>require(‘express’)</strong> 的方式就好，无需指定第三方包路径。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认方式为本地安装，还有一种是全局安装</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接下来，我们列举下容易混淆的方式（注意①②的不同）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install X:</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 不会修改package.json</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 之后运行npm install命令时，不会自动安装X</span><br><span class=\"line\">    </span><br><span class=\"line\">npm install X --save:</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会在package.json的 ①dependencies 属性下添加X</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，会自动安装msbuild到\t\t  node_modules目录中</span><br><span class=\"line\">npm install X --save-dev:</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会在package.json的 ②devDependencies 属性下添加X</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，不会自动安装X到\t\t\t  node_modules目录中</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm install 使用原则</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行时需要用到的包使用--save，否则使用--save-dev。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm 卸载模块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall X</span><br><span class=\"line\">卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</span><br><span class=\"line\">npm ls</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更新模块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update X</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用淘宝镜像\"><a href=\"#使用淘宝镜像\" class=\"headerlink\" title=\"使用淘宝镜像\"></a>使用淘宝镜像</h3><blockquote>\n<p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n<p>注意： 如果使用的是cnpm，则只需要将第一个npm命令变为cnpm即可，其他和npm命令使用方式相同。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>相信大家很多人，包括我自己，常常会对npm install –save-dev 、 npm install –save傻傻分不清楚,今天这里主要是对npm的常用命令进行一个总结。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>首先，npm 是node.js自带的功能。查看npm版本</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"><span class=\"number\">6.4</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>升级npm版本</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mac下: </span><br><span class=\"line\">\tsudo npm install npm -g</span><br><span class=\"line\"><span class=\"built_in\">window</span>下:</span><br><span class=\"line\">\tnpm install npm -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用npm安装模块</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;Module Name&gt;</span><br><span class=\"line\">eg: 使用npm安装node中的express框架</span><br><span class=\"line\">\tnpm install express</span><br></pre></td></tr></table></figure>\n<p>安装好之后，express包就会放在当前工程目录下的node_modules 目录中，因此在代码中只需要通过 <strong>require(‘express’)</strong> 的方式就好，无需指定第三方包路径。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>默认方式为本地安装，还有一种是全局安装</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>接下来，我们列举下容易混淆的方式（注意①②的不同）</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install X:</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 不会修改package.json</span><br><span class=\"line\"></span><br><span class=\"line\">\t- 之后运行npm install命令时，不会自动安装X</span><br><span class=\"line\">    </span><br><span class=\"line\">npm install X --save:</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会在package.json的 ①dependencies 属性下添加X</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，会自动安装msbuild到\t\t  node_modules目录中</span><br><span class=\"line\">npm install X --save-dev:</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会把X包安装到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 会在package.json的 ②devDependencies 属性下添加X</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class=\"line\"></span><br><span class=\"line\">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，不会自动安装X到\t\t\t  node_modules目录中</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm install 使用原则</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行时需要用到的包使用--save，否则使用--save-dev。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm 卸载模块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall X</span><br><span class=\"line\">卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</span><br><span class=\"line\">npm ls</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更新模块</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update X</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用淘宝镜像\"><a href=\"#使用淘宝镜像\" class=\"headerlink\" title=\"使用淘宝镜像\"></a>使用淘宝镜像</h3><blockquote>\n<p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https:<span class=\"comment\">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>\n<p>注意： 如果使用的是cnpm，则只需要将第一个npm命令变为cnpm即可，其他和npm命令使用方式相同。</p>\n"},{"title":"转载-实现标准Promise规范","date":"2019-01-02T11:27:30.000Z","comments":0,"_content":"\n![image text](http://www.hankill.com/wp-content/uploads/2018/08/WX20180803-103846.png)\n\n>原文：[BAT前端经典面试问题：史上最最最详细的手写Promise教程](https://juejin.im/post/5b2f02cd5188252b937548ab)\n\nes6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要：\n\n可以参照[promisesA+规范](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)\n\n# Promise 的声明\n\n首先呢，promise肯定是一个类，我们就用class来声明。\n\n由于`new Promise((resolve, reject)=>{})`，所以传入一个参数（函数），叫他executor，传入就执行。\nexecutor里面有两个参数，一个叫`resolve`（成功），一个叫`reject`（失败）。\n由于resolve和reject可执行，所以都是函数，我们用let声明。\n\n\n\n```js\nclass Promise{\n  // 构造器\n  constructor(executor){\n    // 成功\n    let resolve = () => { };\n    // 失败\n    let reject = () => { };\n    // 立即执行\n    executor(resolve, reject);\n  }\n}\n```\n\n## 解决基本状态\n\n#### Promise规定：\n\n- Promise存在三个状态（state）pending、fulfilled、rejected\n- pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）\n- 成功时，不可转为其他状态，且必须有一个不可改变的值（value）\n- 失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）\n- `new Promise((resolve, reject)=>{resolve(value)})` resolve为成功，接收参数value，状态改变为fulfilled，不可再次改变。\n- `new Promise((resolve, reject)=>{reject(reason)})` reject为失败，接收参数reason，状态改变为rejected，不可再次改变。\n- 若是executor函数报错 直接执行reject();\n\n于是乎，我们获得以下代码\n\n```js\nclass Promise{\n  constructor(executor){\n    // 初始化state为等待态\n    this.state = 'pending';\n    // 成功的值\n    this.value = undefined;\n    // 失败的原因\n    this.reason = undefined;\n    let resolve = value => {\n      // state改变,resolve调用就会失败\n      if (this.state === 'pending') {\n        // resolve调用后，state转化为成功态\n        this.state = 'fulfilled';\n        // 储存成功的值\n        this.value = value;\n      }\n    };\n    let reject = reason => {\n      // state改变,reject调用就会失败\n      if (this.state === 'pending') {\n        // reject调用后，state转化为失败态\n        this.state = 'rejected';\n        // 储存失败的原因\n        this.reason = reason;\n      }\n    };\n    // 如果executor执行报错，直接执行reject\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n}\n```\n\n## then方法\n\n#### Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因\n\n- 当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason\n- onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数\n\n```js\nclass Promise{\n  constructor(executor){...}\n  // then 方法 有两个参数onFulfilled onRejected\n  then(onFulfilled,onRejected) {\n    // 状态为fulfilled，执行onFulfilled，传入成功的值\n    if (this.state === 'fulfilled') {\n      onFulfilled(this.value);\n    };\n    // 状态为rejected，执行onRejected，传入失败的原因\n    if (this.state === 'rejected') {\n      onRejected(this.reason);\n    };\n  }\n}\n```\n\n## 解决异步实现\n\n**现在基本可以实现简单的同步代码，但是当resolve在setTomeout内执行，then时state还是pending等待状态 我们就需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们**\n类似于发布订阅，先将then里面的两个函数储存起来，由于一个promise可以有多个then，所以存在同一个数组内。\n\n\n```\n// 多个then的情况\nlet p = new Promise();\np.then();\np.then();\n```\n\n成功或者失败时，forEach调用它们\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    // 成功存放的数组\n    this.onResolvedCallbacks = [];\n    // 失败存放法数组\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        // 一旦resolve执行，调用成功数组的函数\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        // 一旦reject执行，调用失败数组的函数\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    if (this.state === 'fulfilled') {\n      onFulfilled(this.value);\n    };\n    if (this.state === 'rejected') {\n      onRejected(this.reason);\n    };\n    // 当状态state为pending时\n    if (this.state === 'pending') {\n      // onFulfilled传入到成功数组\n      this.onResolvedCallbacks.push(()=>{\n        onFulfilled(this.value);\n      })\n      // onRejected传入到失败数组\n      this.onRejectedCallbacks.push(()=>{\n        onRejected(this.reason);\n      })\n    }\n  }\n}\n```\n\n## 解决链式调用\n\n**我门常常用到new Promise().then().then(),这就是链式调用，用来解决回调地狱**\n1、为了达成链式，我们默认在第一个then里返回一个promise。[秘籍](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)规定了一种方法，就是在then里面返回一个新的promise,称为promise2：`promise2 = new Promise((resolve, reject)=>{})`\n\n- 将这个promise2返回的值传递到下一个then中\n- 如果返回一个普通的值，则将普通的值传递给下一个then中\n\n2、当我们在第一个then中`return`了一个参数（参数未知，需判断）。这个return出来的新的promise就是onFulfilled()或onRejected()的值\n规定onFulfilled()或onRejected()的值，即第一个then返回的值，叫做x，判断x的函数叫做resolvePromise\n\n- 首先，要看x是不是promise。\n- 如果是promise，则取它的结果，作为新的promise2成功的结果\n- 如果是普通值，直接作为promise2成功的结果\n- 所以要比较x和promise2\n- resolvePromise的参数有promise2（默认返回的promise）、x（我们自己`return`的对象）、resolve、reject\n- resolve和reject是promise2的\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    // 声明返回的promise2\n    let promise2 = new Promise((resolve, reject)=>{\n      if (this.state === 'fulfilled') {\n        let x = onFulfilled(this.value);\n        // resolvePromise函数，处理自己return的promise和默认的promise2的关系\n        resolvePromise(promise2, x, resolve, reject);\n      };\n      if (this.state === 'rejected') {\n        let x = onRejected(this.reason);\n        resolvePromise(promise2, x, resolve, reject);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(()=>{\n          let x = onFulfilled(this.value);\n          resolvePromise(promise2, x, resolve, reject);\n        })\n        this.onRejectedCallbacks.push(()=>{\n          let x = onRejected(this.reason);\n          resolvePromise(promise2, x, resolve, reject);\n        })\n      }\n    });\n    // 返回promise，完成链式\n    return promise2;\n  }\n}\n```\n\n## 完成resolvePromise函数\n\n规定了一段代码，让不同的promise代码互相套用，叫做resolvePromise\n\n- 如果 x === promise2，则是会造成循环引用，自己等待自己完成，则报“循环引用”错误\n\n```js\nlet p = new Promise(resolve => {\n  resolve(0);\n});\nvar p2 = p.then(data => {\n  // 循环引用，自己等待自己完成，一辈子完不成\n  return p2;\n})\n```\n\n1、判断x\n\n\n\n- **Otherwise, if x is an object or function,Let then be x.then**\n- x 不能是null\n- x 是普通值 直接resolve(x)\n- x 是对象或者函数（包括promise），`let then = x.then` 2、当x是对象或者函数（默认promise）\n- 声明了then\n- 如果取then报错，则走reject()\n- 如果then是个函数，则用call执行then，第一个参数是this，后面是成功的回调和失败的回调\n- 如果成功的回调还是pormise，就递归继续解析 3、成功和失败只能调用一个 所以设定一个called来防止多次调用\n\n```js\nfunction resolvePromise(promise2, x, resolve, reject){\n  // 循环引用报错\n  if(x === promise2){\n    // reject报错\n    return reject(new TypeError('Chaining cycle detected for promise'));\n  }\n  // 防止多次调用\n  let called;\n  // x不是null 且x是对象或者函数\n  if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n    try {\n      // A+规定，声明then = x的then方法\n      let then = x.then;\n      // 如果then是函数，就默认是promise了\n      if (typeof then === 'function') {\n        // 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调\n        then.call(x, y => {\n          // 成功和失败只能调用一个\n          if (called) return;\n          called = true;\n          // resolve的结果依旧是promise 那就继续解析\n          resolvePromise(promise2, y, resolve, reject);\n        }, err => {\n          // 成功和失败只能调用一个\n          if (called) return;\n          called = true;\n          reject(err);// 失败了就失败了\n        })\n      } else {\n        resolve(x); // 直接成功即可\n      }\n    } catch (e) {\n      // 也属于失败\n      if (called) return;\n      called = true;\n      // 取then出错了那就不要在继续执行了\n      reject(e);\n    }\n  } else {\n    resolve(x);\n  }\n}\n```\n\n## 解决其他问题\n\n1、规定onFulfilled,onRejected都是可选参数，如果他们不是函数，必须被忽略\n\n- onFulfilled返回一个普通的值，成功时直接等于 `value => value`\n- onRejected返回一个普通的值，失败时如果直接等于 value => value，则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误`reason => throw err` 2、[秘籍](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)规定onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题\n- 如果onFulfilled或onRejected报错，则直接返回reject()\n\n顺便附赠catch和resolve、reject、race、all方法\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    // onFulfilled如果不是函数，就忽略onFulfilled，直接返回value\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    // onRejected如果不是函数，就忽略onRejected，直接扔出错误\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.state === 'fulfilled') {\n        // 异步\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'rejected') {\n        // 异步\n        setTimeout(() => {\n          // 如果报错\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(() => {\n          // 异步\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0);\n        });\n        this.onRejectedCallbacks.push(() => {\n          // 异步\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0)\n        });\n      };\n    });\n    // 返回promise，完成链式\n    return promise2;\n  }\n}\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.state === 'fulfilled') {\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'rejected') {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0);\n        });\n        this.onRejectedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0)\n        });\n      };\n    });\n    return promise2;\n  }\n  catch(fn){\n    return this.then(null,fn);\n  }\n}\nfunction resolvePromise(promise2, x, resolve, reject){\n  if(x === promise2){\n    return reject(new TypeError('Chaining cycle detected for promise'));\n  }\n  let called;\n  if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n    try {\n      let then = x.then;\n      if (typeof then === 'function') {\n        then.call(x, y => {\n          if(called)return;\n          called = true;\n          resolvePromise(promise2, y, resolve, reject);\n        }, err => {\n          if(called)return;\n          called = true;\n          reject(err);\n        })\n      } else {\n        resolve(x);\n      }\n    } catch (e) {\n      if(called)return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    resolve(x);\n  }\n}\n//resolve方法\nPromise.resolve = function(val){\n  return new Promise((resolve,reject)=>{\n    resolve(val)\n  });\n}\n//reject方法\nPromise.reject = function(val){\n  return new Promise((resolve,reject)=>{\n    reject(val)\n  });\n}\n//race方法 \nPromise.race = function(promises) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < promises.length; i++) {\n            promises[i].then(resolve, reject)\n        };\n    })\n}\n//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回) 进行修订，processData添加resolve传参\nPromise.all = function(promises) {\n    let arr = [];\n    let i = 0;\n\n    function processData(index, data, resolve) {\n        arr[index] = data;\n        i++;\n        if (i == promises.length) {\n            resolve(arr);\n        };\n    };\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < promises.length; i++) {\n            promises[i].then(data => {\n                processData(i, data, resolve);\n            }, reject);\n        };\n    });\n}\n```\n\n## 如何验证我们的promise是否正确\n\n1、先在后面加上下述代码\n2、npm 有一个promises-aplus-tests插件 npm i promises-aplus-tests -g 可以全局安装 mac用户最前面加上sudo\n3、命令行 promises-aplus-tests [js文件名] 即可验证\n\n```js\n// 目前是通过他测试 他会测试一个对象\n// 语法糖\nPromise.defer = Promise.deferred = function () {\n  let dfd = {}\n  dfd.promise = new Promise((resolve,reject)=>{\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n}\nmodule.exports = Promise;\n//npm install promises-aplus-tests 用来测试自己的promise 符不符合promisesA+规范\n```","source":"_posts/promise.md","raw":"---\ntitle: 转载-实现标准Promise规范\ndate: 2019-01-02 19:27:30\ntags:\n- promise\n- javascript\ncategories:\n- promise\n- javascript\ncomments: false\n---\n\n![image text](http://www.hankill.com/wp-content/uploads/2018/08/WX20180803-103846.png)\n\n>原文：[BAT前端经典面试问题：史上最最最详细的手写Promise教程](https://juejin.im/post/5b2f02cd5188252b937548ab)\n\nes6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要：\n\n可以参照[promisesA+规范](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)\n\n# Promise 的声明\n\n首先呢，promise肯定是一个类，我们就用class来声明。\n\n由于`new Promise((resolve, reject)=>{})`，所以传入一个参数（函数），叫他executor，传入就执行。\nexecutor里面有两个参数，一个叫`resolve`（成功），一个叫`reject`（失败）。\n由于resolve和reject可执行，所以都是函数，我们用let声明。\n\n\n\n```js\nclass Promise{\n  // 构造器\n  constructor(executor){\n    // 成功\n    let resolve = () => { };\n    // 失败\n    let reject = () => { };\n    // 立即执行\n    executor(resolve, reject);\n  }\n}\n```\n\n## 解决基本状态\n\n#### Promise规定：\n\n- Promise存在三个状态（state）pending、fulfilled、rejected\n- pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）\n- 成功时，不可转为其他状态，且必须有一个不可改变的值（value）\n- 失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）\n- `new Promise((resolve, reject)=>{resolve(value)})` resolve为成功，接收参数value，状态改变为fulfilled，不可再次改变。\n- `new Promise((resolve, reject)=>{reject(reason)})` reject为失败，接收参数reason，状态改变为rejected，不可再次改变。\n- 若是executor函数报错 直接执行reject();\n\n于是乎，我们获得以下代码\n\n```js\nclass Promise{\n  constructor(executor){\n    // 初始化state为等待态\n    this.state = 'pending';\n    // 成功的值\n    this.value = undefined;\n    // 失败的原因\n    this.reason = undefined;\n    let resolve = value => {\n      // state改变,resolve调用就会失败\n      if (this.state === 'pending') {\n        // resolve调用后，state转化为成功态\n        this.state = 'fulfilled';\n        // 储存成功的值\n        this.value = value;\n      }\n    };\n    let reject = reason => {\n      // state改变,reject调用就会失败\n      if (this.state === 'pending') {\n        // reject调用后，state转化为失败态\n        this.state = 'rejected';\n        // 储存失败的原因\n        this.reason = reason;\n      }\n    };\n    // 如果executor执行报错，直接执行reject\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n}\n```\n\n## then方法\n\n#### Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因\n\n- 当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason\n- onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数\n\n```js\nclass Promise{\n  constructor(executor){...}\n  // then 方法 有两个参数onFulfilled onRejected\n  then(onFulfilled,onRejected) {\n    // 状态为fulfilled，执行onFulfilled，传入成功的值\n    if (this.state === 'fulfilled') {\n      onFulfilled(this.value);\n    };\n    // 状态为rejected，执行onRejected，传入失败的原因\n    if (this.state === 'rejected') {\n      onRejected(this.reason);\n    };\n  }\n}\n```\n\n## 解决异步实现\n\n**现在基本可以实现简单的同步代码，但是当resolve在setTomeout内执行，then时state还是pending等待状态 我们就需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们**\n类似于发布订阅，先将then里面的两个函数储存起来，由于一个promise可以有多个then，所以存在同一个数组内。\n\n\n```\n// 多个then的情况\nlet p = new Promise();\np.then();\np.then();\n```\n\n成功或者失败时，forEach调用它们\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    // 成功存放的数组\n    this.onResolvedCallbacks = [];\n    // 失败存放法数组\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        // 一旦resolve执行，调用成功数组的函数\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        // 一旦reject执行，调用失败数组的函数\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    if (this.state === 'fulfilled') {\n      onFulfilled(this.value);\n    };\n    if (this.state === 'rejected') {\n      onRejected(this.reason);\n    };\n    // 当状态state为pending时\n    if (this.state === 'pending') {\n      // onFulfilled传入到成功数组\n      this.onResolvedCallbacks.push(()=>{\n        onFulfilled(this.value);\n      })\n      // onRejected传入到失败数组\n      this.onRejectedCallbacks.push(()=>{\n        onRejected(this.reason);\n      })\n    }\n  }\n}\n```\n\n## 解决链式调用\n\n**我门常常用到new Promise().then().then(),这就是链式调用，用来解决回调地狱**\n1、为了达成链式，我们默认在第一个then里返回一个promise。[秘籍](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)规定了一种方法，就是在then里面返回一个新的promise,称为promise2：`promise2 = new Promise((resolve, reject)=>{})`\n\n- 将这个promise2返回的值传递到下一个then中\n- 如果返回一个普通的值，则将普通的值传递给下一个then中\n\n2、当我们在第一个then中`return`了一个参数（参数未知，需判断）。这个return出来的新的promise就是onFulfilled()或onRejected()的值\n规定onFulfilled()或onRejected()的值，即第一个then返回的值，叫做x，判断x的函数叫做resolvePromise\n\n- 首先，要看x是不是promise。\n- 如果是promise，则取它的结果，作为新的promise2成功的结果\n- 如果是普通值，直接作为promise2成功的结果\n- 所以要比较x和promise2\n- resolvePromise的参数有promise2（默认返回的promise）、x（我们自己`return`的对象）、resolve、reject\n- resolve和reject是promise2的\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    // 声明返回的promise2\n    let promise2 = new Promise((resolve, reject)=>{\n      if (this.state === 'fulfilled') {\n        let x = onFulfilled(this.value);\n        // resolvePromise函数，处理自己return的promise和默认的promise2的关系\n        resolvePromise(promise2, x, resolve, reject);\n      };\n      if (this.state === 'rejected') {\n        let x = onRejected(this.reason);\n        resolvePromise(promise2, x, resolve, reject);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(()=>{\n          let x = onFulfilled(this.value);\n          resolvePromise(promise2, x, resolve, reject);\n        })\n        this.onRejectedCallbacks.push(()=>{\n          let x = onRejected(this.reason);\n          resolvePromise(promise2, x, resolve, reject);\n        })\n      }\n    });\n    // 返回promise，完成链式\n    return promise2;\n  }\n}\n```\n\n## 完成resolvePromise函数\n\n规定了一段代码，让不同的promise代码互相套用，叫做resolvePromise\n\n- 如果 x === promise2，则是会造成循环引用，自己等待自己完成，则报“循环引用”错误\n\n```js\nlet p = new Promise(resolve => {\n  resolve(0);\n});\nvar p2 = p.then(data => {\n  // 循环引用，自己等待自己完成，一辈子完不成\n  return p2;\n})\n```\n\n1、判断x\n\n\n\n- **Otherwise, if x is an object or function,Let then be x.then**\n- x 不能是null\n- x 是普通值 直接resolve(x)\n- x 是对象或者函数（包括promise），`let then = x.then` 2、当x是对象或者函数（默认promise）\n- 声明了then\n- 如果取then报错，则走reject()\n- 如果then是个函数，则用call执行then，第一个参数是this，后面是成功的回调和失败的回调\n- 如果成功的回调还是pormise，就递归继续解析 3、成功和失败只能调用一个 所以设定一个called来防止多次调用\n\n```js\nfunction resolvePromise(promise2, x, resolve, reject){\n  // 循环引用报错\n  if(x === promise2){\n    // reject报错\n    return reject(new TypeError('Chaining cycle detected for promise'));\n  }\n  // 防止多次调用\n  let called;\n  // x不是null 且x是对象或者函数\n  if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n    try {\n      // A+规定，声明then = x的then方法\n      let then = x.then;\n      // 如果then是函数，就默认是promise了\n      if (typeof then === 'function') {\n        // 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调\n        then.call(x, y => {\n          // 成功和失败只能调用一个\n          if (called) return;\n          called = true;\n          // resolve的结果依旧是promise 那就继续解析\n          resolvePromise(promise2, y, resolve, reject);\n        }, err => {\n          // 成功和失败只能调用一个\n          if (called) return;\n          called = true;\n          reject(err);// 失败了就失败了\n        })\n      } else {\n        resolve(x); // 直接成功即可\n      }\n    } catch (e) {\n      // 也属于失败\n      if (called) return;\n      called = true;\n      // 取then出错了那就不要在继续执行了\n      reject(e);\n    }\n  } else {\n    resolve(x);\n  }\n}\n```\n\n## 解决其他问题\n\n1、规定onFulfilled,onRejected都是可选参数，如果他们不是函数，必须被忽略\n\n- onFulfilled返回一个普通的值，成功时直接等于 `value => value`\n- onRejected返回一个普通的值，失败时如果直接等于 value => value，则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误`reason => throw err` 2、[秘籍](https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com)规定onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题\n- 如果onFulfilled或onRejected报错，则直接返回reject()\n\n顺便附赠catch和resolve、reject、race、all方法\n\n```js\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    // onFulfilled如果不是函数，就忽略onFulfilled，直接返回value\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    // onRejected如果不是函数，就忽略onRejected，直接扔出错误\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.state === 'fulfilled') {\n        // 异步\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'rejected') {\n        // 异步\n        setTimeout(() => {\n          // 如果报错\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(() => {\n          // 异步\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0);\n        });\n        this.onRejectedCallbacks.push(() => {\n          // 异步\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0)\n        });\n      };\n    });\n    // 返回promise，完成链式\n    return promise2;\n  }\n}\nclass Promise{\n  constructor(executor){\n    this.state = 'pending';\n    this.value = undefined;\n    this.reason = undefined;\n    this.onResolvedCallbacks = [];\n    this.onRejectedCallbacks = [];\n    let resolve = value => {\n      if (this.state === 'pending') {\n        this.state = 'fulfilled';\n        this.value = value;\n        this.onResolvedCallbacks.forEach(fn=>fn());\n      }\n    };\n    let reject = reason => {\n      if (this.state === 'pending') {\n        this.state = 'rejected';\n        this.reason = reason;\n        this.onRejectedCallbacks.forEach(fn=>fn());\n      }\n    };\n    try{\n      executor(resolve, reject);\n    } catch (err) {\n      reject(err);\n    }\n  }\n  then(onFulfilled,onRejected) {\n    onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n    onRejected = typeof onRejected === 'function' ? onRejected : err => { throw err };\n    let promise2 = new Promise((resolve, reject) => {\n      if (this.state === 'fulfilled') {\n        setTimeout(() => {\n          try {\n            let x = onFulfilled(this.value);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'rejected') {\n        setTimeout(() => {\n          try {\n            let x = onRejected(this.reason);\n            resolvePromise(promise2, x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        }, 0);\n      };\n      if (this.state === 'pending') {\n        this.onResolvedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onFulfilled(this.value);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0);\n        });\n        this.onRejectedCallbacks.push(() => {\n          setTimeout(() => {\n            try {\n              let x = onRejected(this.reason);\n              resolvePromise(promise2, x, resolve, reject);\n            } catch (e) {\n              reject(e);\n            }\n          }, 0)\n        });\n      };\n    });\n    return promise2;\n  }\n  catch(fn){\n    return this.then(null,fn);\n  }\n}\nfunction resolvePromise(promise2, x, resolve, reject){\n  if(x === promise2){\n    return reject(new TypeError('Chaining cycle detected for promise'));\n  }\n  let called;\n  if (x != null && (typeof x === 'object' || typeof x === 'function')) {\n    try {\n      let then = x.then;\n      if (typeof then === 'function') {\n        then.call(x, y => {\n          if(called)return;\n          called = true;\n          resolvePromise(promise2, y, resolve, reject);\n        }, err => {\n          if(called)return;\n          called = true;\n          reject(err);\n        })\n      } else {\n        resolve(x);\n      }\n    } catch (e) {\n      if(called)return;\n      called = true;\n      reject(e);\n    }\n  } else {\n    resolve(x);\n  }\n}\n//resolve方法\nPromise.resolve = function(val){\n  return new Promise((resolve,reject)=>{\n    resolve(val)\n  });\n}\n//reject方法\nPromise.reject = function(val){\n  return new Promise((resolve,reject)=>{\n    reject(val)\n  });\n}\n//race方法 \nPromise.race = function(promises) {\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < promises.length; i++) {\n            promises[i].then(resolve, reject)\n        };\n    })\n}\n//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回) 进行修订，processData添加resolve传参\nPromise.all = function(promises) {\n    let arr = [];\n    let i = 0;\n\n    function processData(index, data, resolve) {\n        arr[index] = data;\n        i++;\n        if (i == promises.length) {\n            resolve(arr);\n        };\n    };\n    return new Promise((resolve, reject) => {\n        for (let i = 0; i < promises.length; i++) {\n            promises[i].then(data => {\n                processData(i, data, resolve);\n            }, reject);\n        };\n    });\n}\n```\n\n## 如何验证我们的promise是否正确\n\n1、先在后面加上下述代码\n2、npm 有一个promises-aplus-tests插件 npm i promises-aplus-tests -g 可以全局安装 mac用户最前面加上sudo\n3、命令行 promises-aplus-tests [js文件名] 即可验证\n\n```js\n// 目前是通过他测试 他会测试一个对象\n// 语法糖\nPromise.defer = Promise.deferred = function () {\n  let dfd = {}\n  dfd.promise = new Promise((resolve,reject)=>{\n    dfd.resolve = resolve;\n    dfd.reject = reject;\n  });\n  return dfd;\n}\nmodule.exports = Promise;\n//npm install promises-aplus-tests 用来测试自己的promise 符不符合promisesA+规范\n```","slug":"promise","published":1,"updated":"2021-01-08T13:07:02.302Z","layout":"post","photos":[],"link":"","_id":"ckjoauxhp001wde2xb4gcde2l","content":"<p><img src=\"http://www.hankill.com/wp-content/uploads/2018/08/WX20180803-103846.png\" alt=\"image text\"></p>\n<blockquote>\n<p>原文：<a href=\"https://juejin.im/post/5b2f02cd5188252b937548ab\" target=\"_blank\" rel=\"noopener\">BAT前端经典面试问题：史上最最最详细的手写Promise教程</a></p>\n</blockquote>\n<p>es6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要：</p>\n<p>可以参照<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">promisesA+规范</a></p>\n<h1 id=\"Promise-的声明\"><a href=\"#Promise-的声明\" class=\"headerlink\" title=\"Promise 的声明\"></a>Promise 的声明</h1><p>首先呢，promise肯定是一个类，我们就用class来声明。</p>\n<p>由于<code>new Promise((resolve, reject)=&gt;{})</code>，所以传入一个参数（函数），叫他executor，传入就执行。<br>executor里面有两个参数，一个叫<code>resolve</code>（成功），一个叫<code>reject</code>（失败）。<br>由于resolve和reject可执行，所以都是函数，我们用let声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 失败</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 立即执行</span></span><br><span class=\"line\">    executor(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决基本状态\"><a href=\"#解决基本状态\" class=\"headerlink\" title=\"解决基本状态\"></a>解决基本状态</h2><h4 id=\"Promise规定：\"><a href=\"#Promise规定：\" class=\"headerlink\" title=\"Promise规定：\"></a>Promise规定：</h4><ul>\n<li>Promise存在三个状态（state）pending、fulfilled、rejected</li>\n<li>pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）</li>\n<li>成功时，不可转为其他状态，且必须有一个不可改变的值（value）</li>\n<li>失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）</li>\n<li><code>new Promise((resolve, reject)=&gt;{resolve(value)})</code> resolve为成功，接收参数value，状态改变为fulfilled，不可再次改变。</li>\n<li><code>new Promise((resolve, reject)=&gt;{reject(reason)})</code> reject为失败，接收参数reason，状态改变为rejected，不可再次改变。</li>\n<li>若是executor函数报错 直接执行reject();</li>\n</ul>\n<p>于是乎，我们获得以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化state为等待态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成功的值</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 失败的原因</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state改变,resolve调用就会失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// resolve调用后，state转化为成功态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 储存成功的值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state改变,reject调用就会失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// reject调用后，state转化为失败态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 储存失败的原因</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 如果executor执行报错，直接执行reject</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h2><h4 id=\"Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因\"><a href=\"#Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因\" class=\"headerlink\" title=\"Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因\"></a>Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因</h4><ul>\n<li>当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason</li>\n<li>onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;...&#125;</span><br><span class=\"line\">  <span class=\"comment\">// then 方法 有两个参数onFulfilled onRejected</span></span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 状态为fulfilled，执行onFulfilled，传入成功的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 状态为rejected，执行onRejected，传入失败的原因</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决异步实现\"><a href=\"#解决异步实现\" class=\"headerlink\" title=\"解决异步实现\"></a>解决异步实现</h2><p><strong>现在基本可以实现简单的同步代码，但是当resolve在setTomeout内执行，then时state还是pending等待状态 我们就需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们</strong><br>类似于发布订阅，先将then里面的两个函数储存起来，由于一个promise可以有多个then，所以存在同一个数组内。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多个then的情况</span><br><span class=\"line\">let p = new Promise();</span><br><span class=\"line\">p.then();</span><br><span class=\"line\">p.then();</span><br></pre></td></tr></table></figure>\n<p>成功或者失败时，forEach调用它们</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成功存放的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"comment\">// 失败存放法数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"comment\">// 一旦resolve执行，调用成功数组的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"comment\">// 一旦reject执行，调用失败数组的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 当状态state为pending时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// onFulfilled传入到成功数组</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// onRejected传入到失败数组</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决链式调用\"><a href=\"#解决链式调用\" class=\"headerlink\" title=\"解决链式调用\"></a>解决链式调用</h2><p><strong>我门常常用到new Promise().then().then(),这就是链式调用，用来解决回调地狱</strong><br>1、为了达成链式，我们默认在第一个then里返回一个promise。<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">秘籍</a>规定了一种方法，就是在then里面返回一个新的promise,称为promise2：<code>promise2 = new Promise((resolve, reject)=&gt;{})</code></p>\n<ul>\n<li>将这个promise2返回的值传递到下一个then中</li>\n<li>如果返回一个普通的值，则将普通的值传递给下一个then中</li>\n</ul>\n<p>2、当我们在第一个then中<code>return</code>了一个参数（参数未知，需判断）。这个return出来的新的promise就是onFulfilled()或onRejected()的值<br>规定onFulfilled()或onRejected()的值，即第一个then返回的值，叫做x，判断x的函数叫做resolvePromise</p>\n<ul>\n<li>首先，要看x是不是promise。</li>\n<li>如果是promise，则取它的结果，作为新的promise2成功的结果</li>\n<li>如果是普通值，直接作为promise2成功的结果</li>\n<li>所以要比较x和promise2</li>\n<li>resolvePromise的参数有promise2（默认返回的promise）、x（我们自己<code>return</code>的对象）、resolve、reject</li>\n<li>resolve和reject是promise2的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明返回的promise2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">        <span class=\"comment\">// resolvePromise函数，处理自己return的promise和默认的promise2的关系</span></span><br><span class=\"line\">        resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">        resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise，完成链式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完成resolvePromise函数\"><a href=\"#完成resolvePromise函数\" class=\"headerlink\" title=\"完成resolvePromise函数\"></a>完成resolvePromise函数</h2><p>规定了一段代码，让不同的promise代码互相套用，叫做resolvePromise</p>\n<ul>\n<li>如果 x === promise2，则是会造成循环引用，自己等待自己完成，则报“循环引用”错误</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环引用，自己等待自己完成，一辈子完不成</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>1、判断x</p>\n<ul>\n<li><strong>Otherwise, if x is an object or function,Let then be x.then</strong></li>\n<li>x 不能是null</li>\n<li>x 是普通值 直接resolve(x)</li>\n<li>x 是对象或者函数（包括promise），<code>let then = x.then</code> 2、当x是对象或者函数（默认promise）</li>\n<li>声明了then</li>\n<li>如果取then报错，则走reject()</li>\n<li>如果then是个函数，则用call执行then，第一个参数是this，后面是成功的回调和失败的回调</li>\n<li>如果成功的回调还是pormise，就递归继续解析 3、成功和失败只能调用一个 所以设定一个called来防止多次调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环引用报错</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === promise2)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// reject报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 防止多次调用</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"comment\">// x不是null 且x是对象或者函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x != <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// A+规定，声明then = x的then方法</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"comment\">// 如果then是函数，就默认是promise了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调</span></span><br><span class=\"line\">        then.call(x, y =&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"comment\">// resolve的结果依旧是promise 那就继续解析</span></span><br><span class=\"line\">          resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">        &#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          reject(err);<span class=\"comment\">// 失败了就失败了</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(x); <span class=\"comment\">// 直接成功即可</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 也属于失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 取then出错了那就不要在继续执行了</span></span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决其他问题\"><a href=\"#解决其他问题\" class=\"headerlink\" title=\"解决其他问题\"></a>解决其他问题</h2><p>1、规定onFulfilled,onRejected都是可选参数，如果他们不是函数，必须被忽略</p>\n<ul>\n<li>onFulfilled返回一个普通的值，成功时直接等于 <code>value =&gt; value</code></li>\n<li>onRejected返回一个普通的值，失败时如果直接等于 value =&gt; value，则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误<code>reason =&gt; throw err</code> 2、<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">秘籍</a>规定onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题</li>\n<li>如果onFulfilled或onRejected报错，则直接返回reject()</li>\n</ul>\n<p>顺便附赠catch和resolve、reject、race、all方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// onFulfilled如果不是函数，就忽略onFulfilled，直接返回value</span></span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    <span class=\"comment\">// onRejected如果不是函数，就忽略onRejected，直接扔出错误</span></span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果报错</span></span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 异步</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 异步</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise，完成链式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(fn)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>,fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === promise2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x != <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        then.call(x, y =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">        &#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//resolve方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resolve(val)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//reject方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reject(val)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//race方法 </span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">            promises[i].then(resolve, reject)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回) 进行修订，processData添加resolve传参</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processData</span>(<span class=\"params\">index, data, resolve</span>) </span>&#123;</span><br><span class=\"line\">        arr[index] = data;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == promises.length) &#123;</span><br><span class=\"line\">            resolve(arr);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">            promises[i].then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">                processData(i, data, resolve);</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何验证我们的promise是否正确\"><a href=\"#如何验证我们的promise是否正确\" class=\"headerlink\" title=\"如何验证我们的promise是否正确\"></a>如何验证我们的promise是否正确</h2><p>1、先在后面加上下述代码<br>2、npm 有一个promises-aplus-tests插件 npm i promises-aplus-tests -g 可以全局安装 mac用户最前面加上sudo<br>3、命令行 promises-aplus-tests [js文件名] 即可验证</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目前是通过他测试 他会测试一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 语法糖</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.defer = <span class=\"built_in\">Promise</span>.deferred = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dfd = &#123;&#125;</span><br><span class=\"line\">  dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    dfd.resolve = resolve;</span><br><span class=\"line\">    dfd.reject = reject;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\"><span class=\"comment\">//npm install promises-aplus-tests 用来测试自己的promise 符不符合promisesA+规范</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://www.hankill.com/wp-content/uploads/2018/08/WX20180803-103846.png\" alt=\"image text\"></p>\n<blockquote>\n<p>原文：<a href=\"https://juejin.im/post/5b2f02cd5188252b937548ab\" target=\"_blank\" rel=\"noopener\">BAT前端经典面试问题：史上最最最详细的手写Promise教程</a></p>\n</blockquote>\n<p>es6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要：</p>\n<p>可以参照<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">promisesA+规范</a></p>\n<h1 id=\"Promise-的声明\"><a href=\"#Promise-的声明\" class=\"headerlink\" title=\"Promise 的声明\"></a>Promise 的声明</h1><p>首先呢，promise肯定是一个类，我们就用class来声明。</p>\n<p>由于<code>new Promise((resolve, reject)=&gt;{})</code>，所以传入一个参数（函数），叫他executor，传入就执行。<br>executor里面有两个参数，一个叫<code>resolve</code>（成功），一个叫<code>reject</code>（失败）。<br>由于resolve和reject可执行，所以都是函数，我们用let声明。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造器</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 失败</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 立即执行</span></span><br><span class=\"line\">    executor(resolve, reject);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决基本状态\"><a href=\"#解决基本状态\" class=\"headerlink\" title=\"解决基本状态\"></a>解决基本状态</h2><h4 id=\"Promise规定：\"><a href=\"#Promise规定：\" class=\"headerlink\" title=\"Promise规定：\"></a>Promise规定：</h4><ul>\n<li>Promise存在三个状态（state）pending、fulfilled、rejected</li>\n<li>pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）</li>\n<li>成功时，不可转为其他状态，且必须有一个不可改变的值（value）</li>\n<li>失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）</li>\n<li><code>new Promise((resolve, reject)=&gt;{resolve(value)})</code> resolve为成功，接收参数value，状态改变为fulfilled，不可再次改变。</li>\n<li><code>new Promise((resolve, reject)=&gt;{reject(reason)})</code> reject为失败，接收参数reason，状态改变为rejected，不可再次改变。</li>\n<li>若是executor函数报错 直接执行reject();</li>\n</ul>\n<p>于是乎，我们获得以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化state为等待态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成功的值</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 失败的原因</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state改变,resolve调用就会失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// resolve调用后，state转化为成功态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 储存成功的值</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// state改变,reject调用就会失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// reject调用后，state转化为失败态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 储存失败的原因</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 如果executor执行报错，直接执行reject</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"then方法\"><a href=\"#then方法\" class=\"headerlink\" title=\"then方法\"></a>then方法</h2><h4 id=\"Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因\"><a href=\"#Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因\" class=\"headerlink\" title=\"Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因\"></a>Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因</h4><ul>\n<li>当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason</li>\n<li>onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;...&#125;</span><br><span class=\"line\">  <span class=\"comment\">// then 方法 有两个参数onFulfilled onRejected</span></span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 状态为fulfilled，执行onFulfilled，传入成功的值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 状态为rejected，执行onRejected，传入失败的原因</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决异步实现\"><a href=\"#解决异步实现\" class=\"headerlink\" title=\"解决异步实现\"></a>解决异步实现</h2><p><strong>现在基本可以实现简单的同步代码，但是当resolve在setTomeout内执行，then时state还是pending等待状态 我们就需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们</strong><br>类似于发布订阅，先将then里面的两个函数储存起来，由于一个promise可以有多个then，所以存在同一个数组内。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多个then的情况</span><br><span class=\"line\">let p = new Promise();</span><br><span class=\"line\">p.then();</span><br><span class=\"line\">p.then();</span><br></pre></td></tr></table></figure>\n<p>成功或者失败时，forEach调用它们</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 成功存放的数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"comment\">// 失败存放法数组</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"comment\">// 一旦resolve执行，调用成功数组的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"comment\">// 一旦reject执行，调用失败数组的函数</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">      onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">      onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 当状态state为pending时</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// onFulfilled传入到成功数组</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// onRejected传入到失败数组</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">        onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决链式调用\"><a href=\"#解决链式调用\" class=\"headerlink\" title=\"解决链式调用\"></a>解决链式调用</h2><p><strong>我门常常用到new Promise().then().then(),这就是链式调用，用来解决回调地狱</strong><br>1、为了达成链式，我们默认在第一个then里返回一个promise。<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">秘籍</a>规定了一种方法，就是在then里面返回一个新的promise,称为promise2：<code>promise2 = new Promise((resolve, reject)=&gt;{})</code></p>\n<ul>\n<li>将这个promise2返回的值传递到下一个then中</li>\n<li>如果返回一个普通的值，则将普通的值传递给下一个then中</li>\n</ul>\n<p>2、当我们在第一个then中<code>return</code>了一个参数（参数未知，需判断）。这个return出来的新的promise就是onFulfilled()或onRejected()的值<br>规定onFulfilled()或onRejected()的值，即第一个then返回的值，叫做x，判断x的函数叫做resolvePromise</p>\n<ul>\n<li>首先，要看x是不是promise。</li>\n<li>如果是promise，则取它的结果，作为新的promise2成功的结果</li>\n<li>如果是普通值，直接作为promise2成功的结果</li>\n<li>所以要比较x和promise2</li>\n<li>resolvePromise的参数有promise2（默认返回的promise）、x（我们自己<code>return</code>的对象）、resolve、reject</li>\n<li>resolve和reject是promise2的</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明返回的promise2</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">        <span class=\"comment\">// resolvePromise函数，处理自己return的promise和默认的promise2的关系</span></span><br><span class=\"line\">        resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">        resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">          resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise，完成链式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完成resolvePromise函数\"><a href=\"#完成resolvePromise函数\" class=\"headerlink\" title=\"完成resolvePromise函数\"></a>完成resolvePromise函数</h2><p>规定了一段代码，让不同的promise代码互相套用，叫做resolvePromise</p>\n<ul>\n<li>如果 x === promise2，则是会造成循环引用，自己等待自己完成，则报“循环引用”错误</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">  resolve(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环引用，自己等待自己完成，一辈子完不成</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> p2;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>1、判断x</p>\n<ul>\n<li><strong>Otherwise, if x is an object or function,Let then be x.then</strong></li>\n<li>x 不能是null</li>\n<li>x 是普通值 直接resolve(x)</li>\n<li>x 是对象或者函数（包括promise），<code>let then = x.then</code> 2、当x是对象或者函数（默认promise）</li>\n<li>声明了then</li>\n<li>如果取then报错，则走reject()</li>\n<li>如果then是个函数，则用call执行then，第一个参数是this，后面是成功的回调和失败的回调</li>\n<li>如果成功的回调还是pormise，就递归继续解析 3、成功和失败只能调用一个 所以设定一个called来防止多次调用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 循环引用报错</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === promise2)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// reject报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 防止多次调用</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"comment\">// x不是null 且x是对象或者函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x != <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// A+规定，声明then = x的then方法</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"comment\">// 如果then是函数，就默认是promise了</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调</span></span><br><span class=\"line\">        then.call(x, y =&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"comment\">// resolve的结果依旧是promise 那就继续解析</span></span><br><span class=\"line\">          resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">        &#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 成功和失败只能调用一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          reject(err);<span class=\"comment\">// 失败了就失败了</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(x); <span class=\"comment\">// 直接成功即可</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 也属于失败</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 取then出错了那就不要在继续执行了</span></span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决其他问题\"><a href=\"#解决其他问题\" class=\"headerlink\" title=\"解决其他问题\"></a>解决其他问题</h2><p>1、规定onFulfilled,onRejected都是可选参数，如果他们不是函数，必须被忽略</p>\n<ul>\n<li>onFulfilled返回一个普通的值，成功时直接等于 <code>value =&gt; value</code></li>\n<li>onRejected返回一个普通的值，失败时如果直接等于 value =&gt; value，则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误<code>reason =&gt; throw err</code> 2、<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fpromisesaplus.com\" target=\"_blank\" rel=\"noopener\">秘籍</a>规定onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题</li>\n<li>如果onFulfilled或onRejected报错，则直接返回reject()</li>\n</ul>\n<p>顺便附赠catch和resolve、reject、race、all方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// onFulfilled如果不是函数，就忽略onFulfilled，直接返回value</span></span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    <span class=\"comment\">// onRejected如果不是函数，就忽略onRejected，直接扔出错误</span></span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步</span></span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 如果报错</span></span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 异步</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 异步</span></span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 返回promise，完成链式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(executor)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onResolvedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolve = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'fulfilled'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reject = <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = <span class=\"string\">'rejected'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reason = reason;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span>=&gt;</span>fn());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">      executor(resolve, reject);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      reject(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  then(onFulfilled,onRejected) &#123;</span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">'function'</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;</span><br><span class=\"line\">    onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123; <span class=\"keyword\">throw</span> err &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">            resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onResolvedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onFulfilled(<span class=\"keyword\">this</span>.value);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.onRejectedCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> x = onRejected(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">              resolvePromise(promise2, x, resolve, reject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">              reject(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span>(fn)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.then(<span class=\"literal\">null</span>,fn);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span>(<span class=\"params\">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(x === promise2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'Chaining cycle detected for promise'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> called;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x != <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> then = x.then;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        then.call(x, y =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          resolvePromise(promise2, y, resolve, reject);</span><br><span class=\"line\">        &#125;, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">          called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve(x);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(called)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">      called = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      reject(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//resolve方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    resolve(val)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//reject方法</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    reject(val)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//race方法 </span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">            promises[i].then(resolve, reject)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回) 进行修订，processData添加resolve传参</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">promises</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processData</span>(<span class=\"params\">index, data, resolve</span>) </span>&#123;</span><br><span class=\"line\">        arr[index] = data;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == promises.length) &#123;</span><br><span class=\"line\">            resolve(arr);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class=\"line\">            promises[i].then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">                processData(i, data, resolve);</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何验证我们的promise是否正确\"><a href=\"#如何验证我们的promise是否正确\" class=\"headerlink\" title=\"如何验证我们的promise是否正确\"></a>如何验证我们的promise是否正确</h2><p>1、先在后面加上下述代码<br>2、npm 有一个promises-aplus-tests插件 npm i promises-aplus-tests -g 可以全局安装 mac用户最前面加上sudo<br>3、命令行 promises-aplus-tests [js文件名] 即可验证</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目前是通过他测试 他会测试一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 语法糖</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.defer = <span class=\"built_in\">Promise</span>.deferred = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dfd = &#123;&#125;</span><br><span class=\"line\">  dfd.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    dfd.resolve = resolve;</span><br><span class=\"line\">    dfd.reject = reject;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dfd;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Promise</span>;</span><br><span class=\"line\"><span class=\"comment\">//npm install promises-aplus-tests 用来测试自己的promise 符不符合promisesA+规范</span></span><br></pre></td></tr></table></figure>"},{"title":"webdriverio-cucumber","date":"2020-10-19T16:14:41.000Z","_content":"\n# webdriverIO-cucumber\n\n[博客地址](https://github.com/dangchaofeng/webdriverIO-cucumber) 【直接下载，`npm install` ， `npm run test` 即可快速开始进入demo code】\n> 本用例使用的是webdriverIo基本的cli架构，然后自定义使用cucumber来进行e2e的语法定义以及文档输出。\n\n- 开场提示： \n  - 对node有版本要求， 10.14.0+\n  - 如果chromDriver下载失败，可能就需要翻墙了\n  - 案例中的网址，是需要翻墙才能访问的\n\n- [webdriverio参考](https://webdriver.io/docs/gettingstarted.html)\n- [cucumber基本语法入门](https://www.jianshu.com/p/3857f2c3a8d4)\n- `Expect `强烈建议使用webdriverio内置的，不需要额外加载chai的断言库，因为这是e2e基于浏览器的实现，很多基于DOM操作的内容，使用内置的更加方便合理，使用chai反而增加了复杂度\n- 为何不使用selenium-standalone-service\n  - 其一：个人学习使用的话，本地基于chromedriver浏览器足以\n  - 其二：selenium-standalone-service 启动的时候，会比webdriver卡很多(也有可能是本人电脑配置过低导致，但总体来说，个人练习足够)\n- 什么时候使用selenium-standalone-service\n  - 当你真正项目中使用e2e的时候，selenium-standalone提供良好浏览器的支持。\n    - [ChromeDriver](https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver)\n    - [FirefoxDriver](https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver)\n    - [IEDriver](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)\n    - [Edge WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads)\n    - [Chromium Edge WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads)\n- 你也可以根据公司的实际需求使用其他的service,eg: `sauce` \n\n- 为什么使用cucumber\n\n  - 来看看最最简单的实用语法示例\n\n    ```feature\n    Feature: Login Feature\n    \n        Scenario: My Login application\n    \n            Given I open my loginpage\n            When I login into my account\n            Then Something is exit\n    ```\n\n  - 上面可以看出，语法的三大要素很明确\n\n    - Given 给定一个初始场景\n    - When 给定一个条件\n    - Then 开始进行结果断言\n\n  - 这就是理由！","source":"_posts/webdriverio-cucumber.md","raw":"---\ntitle: webdriverio-cucumber\ndate: 2020-10-20 00:14:41\ntags:\n- e2e\n- webdriverio\n- cucumber\ncategories:\n- e2e\n- webdriverio\n- cucumber\n---\n\n# webdriverIO-cucumber\n\n[博客地址](https://github.com/dangchaofeng/webdriverIO-cucumber) 【直接下载，`npm install` ， `npm run test` 即可快速开始进入demo code】\n> 本用例使用的是webdriverIo基本的cli架构，然后自定义使用cucumber来进行e2e的语法定义以及文档输出。\n\n- 开场提示： \n  - 对node有版本要求， 10.14.0+\n  - 如果chromDriver下载失败，可能就需要翻墙了\n  - 案例中的网址，是需要翻墙才能访问的\n\n- [webdriverio参考](https://webdriver.io/docs/gettingstarted.html)\n- [cucumber基本语法入门](https://www.jianshu.com/p/3857f2c3a8d4)\n- `Expect `强烈建议使用webdriverio内置的，不需要额外加载chai的断言库，因为这是e2e基于浏览器的实现，很多基于DOM操作的内容，使用内置的更加方便合理，使用chai反而增加了复杂度\n- 为何不使用selenium-standalone-service\n  - 其一：个人学习使用的话，本地基于chromedriver浏览器足以\n  - 其二：selenium-standalone-service 启动的时候，会比webdriver卡很多(也有可能是本人电脑配置过低导致，但总体来说，个人练习足够)\n- 什么时候使用selenium-standalone-service\n  - 当你真正项目中使用e2e的时候，selenium-standalone提供良好浏览器的支持。\n    - [ChromeDriver](https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver)\n    - [FirefoxDriver](https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver)\n    - [IEDriver](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)\n    - [Edge WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads)\n    - [Chromium Edge WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads)\n- 你也可以根据公司的实际需求使用其他的service,eg: `sauce` \n\n- 为什么使用cucumber\n\n  - 来看看最最简单的实用语法示例\n\n    ```feature\n    Feature: Login Feature\n    \n        Scenario: My Login application\n    \n            Given I open my loginpage\n            When I login into my account\n            Then Something is exit\n    ```\n\n  - 上面可以看出，语法的三大要素很明确\n\n    - Given 给定一个初始场景\n    - When 给定一个条件\n    - Then 开始进行结果断言\n\n  - 这就是理由！","slug":"webdriverio-cucumber","published":1,"updated":"2021-01-08T13:07:02.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjoauxhr001xde2x3ehfpg51","content":"<h1 id=\"webdriverIO-cucumber\"><a href=\"#webdriverIO-cucumber\" class=\"headerlink\" title=\"webdriverIO-cucumber\"></a>webdriverIO-cucumber</h1><p><a href=\"https://github.com/dangchaofeng/webdriverIO-cucumber\" target=\"_blank\" rel=\"noopener\">博客地址</a> 【直接下载，<code>npm install</code> ， <code>npm run test</code> 即可快速开始进入demo code】</p>\n<blockquote>\n<p>本用例使用的是webdriverIo基本的cli架构，然后自定义使用cucumber来进行e2e的语法定义以及文档输出。</p>\n</blockquote>\n<ul>\n<li><p>开场提示： </p>\n<ul>\n<li>对node有版本要求， 10.14.0+</li>\n<li>如果chromDriver下载失败，可能就需要翻墙了</li>\n<li>案例中的网址，是需要翻墙才能访问的</li>\n</ul>\n</li>\n<li><p><a href=\"https://webdriver.io/docs/gettingstarted.html\" target=\"_blank\" rel=\"noopener\">webdriverio参考</a></p>\n</li>\n<li><a href=\"https://www.jianshu.com/p/3857f2c3a8d4\" target=\"_blank\" rel=\"noopener\">cucumber基本语法入门</a></li>\n<li><code>Expect</code>强烈建议使用webdriverio内置的，不需要额外加载chai的断言库，因为这是e2e基于浏览器的实现，很多基于DOM操作的内容，使用内置的更加方便合理，使用chai反而增加了复杂度</li>\n<li>为何不使用selenium-standalone-service<ul>\n<li>其一：个人学习使用的话，本地基于chromedriver浏览器足以</li>\n<li>其二：selenium-standalone-service 启动的时候，会比webdriver卡很多(也有可能是本人电脑配置过低导致，但总体来说，个人练习足够)</li>\n</ul>\n</li>\n<li>什么时候使用selenium-standalone-service<ul>\n<li>当你真正项目中使用e2e的时候，selenium-standalone提供良好浏览器的支持。<ul>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver\" target=\"_blank\" rel=\"noopener\">ChromeDriver</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver\" target=\"_blank\" rel=\"noopener\">FirefoxDriver</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver\" target=\"_blank\" rel=\"noopener\">IEDriver</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads\" target=\"_blank\" rel=\"noopener\">Edge WebDriver</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads\" target=\"_blank\" rel=\"noopener\">Chromium Edge WebDriver</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>你也可以根据公司的实际需求使用其他的service,eg: <code>sauce</code> </p>\n</li>\n<li><p>为什么使用cucumber</p>\n<ul>\n<li><p>来看看最最简单的实用语法示例</p>\n<figure class=\"highlight feature\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Feature</span>: Login <span class=\"keyword\">Feature</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Scenario</span>: My Login application</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">Given</span> I open my loginpage</span><br><span class=\"line\">        <span class=\"keyword\">When</span> I login into my account</span><br><span class=\"line\">        <span class=\"keyword\">Then</span> Something is exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上面可以看出，语法的三大要素很明确</p>\n<ul>\n<li>Given 给定一个初始场景</li>\n<li>When 给定一个条件</li>\n<li>Then 开始进行结果断言</li>\n</ul>\n</li>\n<li><p>这就是理由！</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"webdriverIO-cucumber\"><a href=\"#webdriverIO-cucumber\" class=\"headerlink\" title=\"webdriverIO-cucumber\"></a>webdriverIO-cucumber</h1><p><a href=\"https://github.com/dangchaofeng/webdriverIO-cucumber\" target=\"_blank\" rel=\"noopener\">博客地址</a> 【直接下载，<code>npm install</code> ， <code>npm run test</code> 即可快速开始进入demo code】</p>\n<blockquote>\n<p>本用例使用的是webdriverIo基本的cli架构，然后自定义使用cucumber来进行e2e的语法定义以及文档输出。</p>\n</blockquote>\n<ul>\n<li><p>开场提示： </p>\n<ul>\n<li>对node有版本要求， 10.14.0+</li>\n<li>如果chromDriver下载失败，可能就需要翻墙了</li>\n<li>案例中的网址，是需要翻墙才能访问的</li>\n</ul>\n</li>\n<li><p><a href=\"https://webdriver.io/docs/gettingstarted.html\" target=\"_blank\" rel=\"noopener\">webdriverio参考</a></p>\n</li>\n<li><a href=\"https://www.jianshu.com/p/3857f2c3a8d4\" target=\"_blank\" rel=\"noopener\">cucumber基本语法入门</a></li>\n<li><code>Expect</code>强烈建议使用webdriverio内置的，不需要额外加载chai的断言库，因为这是e2e基于浏览器的实现，很多基于DOM操作的内容，使用内置的更加方便合理，使用chai反而增加了复杂度</li>\n<li>为何不使用selenium-standalone-service<ul>\n<li>其一：个人学习使用的话，本地基于chromedriver浏览器足以</li>\n<li>其二：selenium-standalone-service 启动的时候，会比webdriver卡很多(也有可能是本人电脑配置过低导致，但总体来说，个人练习足够)</li>\n</ul>\n</li>\n<li>什么时候使用selenium-standalone-service<ul>\n<li>当你真正项目中使用e2e的时候，selenium-standalone提供良好浏览器的支持。<ul>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver\" target=\"_blank\" rel=\"noopener\">ChromeDriver</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver\" target=\"_blank\" rel=\"noopener\">FirefoxDriver</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver\" target=\"_blank\" rel=\"noopener\">IEDriver</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads\" target=\"_blank\" rel=\"noopener\">Edge WebDriver</a></li>\n<li><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads\" target=\"_blank\" rel=\"noopener\">Chromium Edge WebDriver</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>你也可以根据公司的实际需求使用其他的service,eg: <code>sauce</code> </p>\n</li>\n<li><p>为什么使用cucumber</p>\n<ul>\n<li><p>来看看最最简单的实用语法示例</p>\n<figure class=\"highlight feature\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Feature</span>: Login <span class=\"keyword\">Feature</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Scenario</span>: My Login application</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">Given</span> I open my loginpage</span><br><span class=\"line\">        <span class=\"keyword\">When</span> I login into my account</span><br><span class=\"line\">        <span class=\"keyword\">Then</span> Something is exit</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上面可以看出，语法的三大要素很明确</p>\n<ul>\n<li>Given 给定一个初始场景</li>\n<li>When 给定一个条件</li>\n<li>Then 开始进行结果断言</li>\n</ul>\n</li>\n<li><p>这就是理由！</p>\n</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/English2/img.jpg","slug":"img.jpg","post":"ckjoaux5y0004de2xuwizaufx","modified":0,"renderable":0},{"_id":"source/_posts/es6Class/laugh.mp4","slug":"laugh.mp4","post":"ckjoaux6m000cde2x75ilkjnw","modified":0,"renderable":0},{"_id":"source/_posts/tcp/img1.png","slug":"img1.png","post":"ckjoauxhg001rde2x49h5c4s2","modified":0,"renderable":0},{"_id":"source/_posts/tcp/img2.png","slug":"img2.png","post":"ckjoauxhg001rde2x49h5c4s2","modified":0,"renderable":0},{"_id":"source/_posts/no-network-linux-install-nodeJs/img1.jpg","slug":"img1.jpg","post":"ckjoauxh3001mde2x5h06kooq","modified":0,"renderable":0},{"_id":"source/_posts/no-network-linux-install-nodeJs/img2.jpg","slug":"img2.jpg","post":"ckjoauxh3001mde2x5h06kooq","modified":0,"renderable":0},{"_id":"source/_posts/no-network-linux-install-nodeJs/img3.jpg","slug":"img3.jpg","post":"ckjoauxh3001mde2x5h06kooq","modified":0,"renderable":0},{"_id":"source/_posts/no-network-linux-install-nodeJs/img4.jpg","slug":"img4.jpg","post":"ckjoauxh3001mde2x5h06kooq","modified":0,"renderable":0},{"_id":"source/_posts/no-network-linux-install-nodeJs/img5.jpg","slug":"img5.jpg","post":"ckjoauxh3001mde2x5h06kooq","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckjoaux670005de2x05929b12","category_id":"ckjoaux5v0002de2xlk6u8d0v","_id":"ckjoaux6y000dde2xuhsb1fub"},{"post_id":"ckjoaux520000de2xdloy61me","category_id":"ckjoaux5v0002de2xlk6u8d0v","_id":"ckjoaux7g000hde2xaig77w7h"},{"post_id":"ckjoaux5y0004de2xuwizaufx","category_id":"ckjoaux5v0002de2xlk6u8d0v","_id":"ckjoaux7u000nde2x5j8wey91"},{"post_id":"ckjoaux6b0006de2xsbeebmxn","category_id":"ckjoaux7i000jde2xxdwumver","_id":"ckjoaux7w000sde2xoq3h1z9c"},{"post_id":"ckjoaux6i000ade2xh9rjl87r","category_id":"ckjoaux7v000pde2xomj8iubb","_id":"ckjoaux7x000wde2xzdxui4cx"},{"post_id":"ckjoaux5i0001de2xk7i9rr1y","category_id":"ckjoaux6f0007de2xot8iwza5","_id":"ckjoaux830010de2x5ml8nf4k"},{"post_id":"ckjoaux5i0001de2xk7i9rr1y","category_id":"ckjoaux7w000tde2xr0pc5qo0","_id":"ckjoaux840013de2xxqdq3j3g"},{"post_id":"ckjoaux77000gde2xh0ee1o12","category_id":"ckjoaux840011de2xs5zzjocu","_id":"ckjoaux850018de2xkowewbe6"},{"post_id":"ckjoaux7g000ide2xrq3d2h9s","category_id":"ckjoaux840014de2xwf4p8enb","_id":"ckjoaux86001cde2xn5oc5ffv"},{"post_id":"ckjoaux7k000lde2xkfmndk99","category_id":"ckjoaux850019de2xpyy1yjx3","_id":"ckjoaux87001gde2xc6ajc8qm"},{"post_id":"ckjoaux6m000cde2x75ilkjnw","category_id":"ckjoaux82000xde2xxxpjtkc3","_id":"ckjoaux88001ide2xyer7iuhe"},{"post_id":"ckjoaux6m000cde2x75ilkjnw","category_id":"ckjoaux86001dde2xnraowoqm","_id":"ckjoaux88001jde2xjrvahd6x"},{"post_id":"ckjoauxgn001kde2x55kztfap","category_id":"ckjoauxh8001ode2xpbtzr212","_id":"ckjoauxhs001yde2x2tpaomr8"},{"post_id":"ckjoauxhg001rde2x49h5c4s2","category_id":"ckjoauxhv0023de2xhee049u0","_id":"ckjoauxi20027de2x41fi200d"},{"post_id":"ckjoauxhk001sde2xphlqc4fh","category_id":"ckjoauxi00025de2x0r0jg2s5","_id":"ckjoauxi3002cde2x54p9s280"},{"post_id":"ckjoauxh3001mde2x5h06kooq","category_id":"ckjoauxhl001tde2xt3sluca9","_id":"ckjoauxi6002kde2xmarsyua3"},{"post_id":"ckjoauxh3001mde2x5h06kooq","category_id":"ckjoauxi3002dde2x0uoh3924","_id":"ckjoauxi8002nde2xuz4nrihf"},{"post_id":"ckjoauxhp001wde2xb4gcde2l","category_id":"ckjoauxi20028de2xbersl4qa","_id":"ckjoauxif002ude2x8l4kiyel"},{"post_id":"ckjoauxhp001wde2xb4gcde2l","category_id":"ckjoauxic002ode2xpjlfc8hd","_id":"ckjoauxig002wde2x5zbupscc"},{"post_id":"ckjoauxh8001qde2xeedazx25","category_id":"ckjoauxhs001zde2x6705r1jy","_id":"ckjoauxii0031de2xn1o0fkgq"},{"post_id":"ckjoauxh8001qde2xeedazx25","category_id":"ckjoauxi7002lde2xbaopawb2","_id":"ckjoauxii0032de2x9qm7dox8"},{"post_id":"ckjoauxh8001qde2xeedazx25","category_id":"ckjoauxif002vde2xu76jz5a0","_id":"ckjoauxii0033de2xmvznzots"},{"post_id":"ckjoauxhr001xde2x3ehfpg51","category_id":"ckjoauxi5002hde2x97qy0djs","_id":"ckjoauxij0034de2xlsmtdz8u"},{"post_id":"ckjoauxhr001xde2x3ehfpg51","category_id":"ckjoauxie002sde2xnk86fn9j","_id":"ckjoauxik0035de2xp9sc29za"},{"post_id":"ckjoauxhr001xde2x3ehfpg51","category_id":"ckjoauxih002zde2xcwbrf9aq","_id":"ckjoauxin0036de2x6u9agel6"}],"PostTag":[{"post_id":"ckjoaux670005de2x05929b12","tag_id":"ckjoaux5x0003de2xawjjzlmw","_id":"ckjoaux6i0009de2xu8dwpp5b"},{"post_id":"ckjoaux520000de2xdloy61me","tag_id":"ckjoaux5x0003de2xawjjzlmw","_id":"ckjoaux6l000bde2xjetx5co8"},{"post_id":"ckjoaux5i0001de2xk7i9rr1y","tag_id":"ckjoaux6h0008de2xh2oico6c","_id":"ckjoaux7t000mde2x9xbzt893"},{"post_id":"ckjoaux5i0001de2xk7i9rr1y","tag_id":"ckjoaux71000fde2x2m0rjt7x","_id":"ckjoaux7v000ode2xzwv4ghqi"},{"post_id":"ckjoaux5y0004de2xuwizaufx","tag_id":"ckjoaux5x0003de2xawjjzlmw","_id":"ckjoaux7v000rde2xr9lhxwgn"},{"post_id":"ckjoaux6b0006de2xsbeebmxn","tag_id":"ckjoaux7v000qde2xqvoh5xjn","_id":"ckjoaux7w000vde2x3vwo9jyq"},{"post_id":"ckjoaux6i000ade2xh9rjl87r","tag_id":"ckjoaux7w000ude2xfl98z0nw","_id":"ckjoaux83000zde2x9lh27wwf"},{"post_id":"ckjoaux6m000cde2x75ilkjnw","tag_id":"ckjoaux83000yde2xqonvdrmn","_id":"ckjoaux850016de2x6l1zksed"},{"post_id":"ckjoaux6m000cde2x75ilkjnw","tag_id":"ckjoaux840012de2xxw1zpsro","_id":"ckjoaux850017de2xjmtnj8zh"},{"post_id":"ckjoaux77000gde2xh0ee1o12","tag_id":"ckjoaux840015de2xssvsj339","_id":"ckjoaux85001bde2xa28v3qy0"},{"post_id":"ckjoaux7g000ide2xrq3d2h9s","tag_id":"ckjoaux85001ade2xhswjh34y","_id":"ckjoaux87001fde2xp9ir3ohm"},{"post_id":"ckjoaux7k000lde2xkfmndk99","tag_id":"ckjoaux86001ede2xom91jg32","_id":"ckjoaux87001hde2x8kd8zd8r"},{"post_id":"ckjoauxgn001kde2x55kztfap","tag_id":"ckjoauxh8001pde2xr8tmtj8o","_id":"ckjoauxho001vde2x58cakdx2"},{"post_id":"ckjoauxh3001mde2x5h06kooq","tag_id":"ckjoauxhl001ude2xl16it5cl","_id":"ckjoauxhu0021de2x5tj8fnxv"},{"post_id":"ckjoauxh3001mde2x5h06kooq","tag_id":"ckjoaux6h0008de2xh2oico6c","_id":"ckjoauxhv0022de2xqqih7ae4"},{"post_id":"ckjoauxh8001qde2xeedazx25","tag_id":"ckjoauxht0020de2x0ebaez0w","_id":"ckjoauxi3002ade2xjzcf5kbo"},{"post_id":"ckjoauxh8001qde2xeedazx25","tag_id":"ckjoauxhw0024de2xg75273hb","_id":"ckjoauxi3002bde2xzwms09l1"},{"post_id":"ckjoauxh8001qde2xeedazx25","tag_id":"ckjoauxi10026de2xerzqxhsx","_id":"ckjoauxi4002fde2xkv1yq9zi"},{"post_id":"ckjoauxhg001rde2x49h5c4s2","tag_id":"ckjoauxi20029de2xmco3w9w5","_id":"ckjoauxi5002gde2xivzxs64j"},{"post_id":"ckjoauxhk001sde2xphlqc4fh","tag_id":"ckjoauxi4002ede2x34fhj0n5","_id":"ckjoauxi6002jde2x4j7htf99"},{"post_id":"ckjoauxhp001wde2xb4gcde2l","tag_id":"ckjoauxi5002ide2xzgp77io6","_id":"ckjoauxid002qde2xrypvgj38"},{"post_id":"ckjoauxhp001wde2xb4gcde2l","tag_id":"ckjoauxi7002mde2xu6hvrwz4","_id":"ckjoauxid002rde2xlli2xymy"},{"post_id":"ckjoauxhr001xde2x3ehfpg51","tag_id":"ckjoauxh8001pde2xr8tmtj8o","_id":"ckjoauxig002xde2xe5y47stk"},{"post_id":"ckjoauxhr001xde2x3ehfpg51","tag_id":"ckjoauxic002pde2xqx6aq7qw","_id":"ckjoauxih002yde2xkg2tvbfx"},{"post_id":"ckjoauxhr001xde2x3ehfpg51","tag_id":"ckjoauxie002tde2xp74swoum","_id":"ckjoauxih0030de2xj1jodd8h"}],"Tag":[{"name":"English","_id":"ckjoaux5x0003de2xawjjzlmw"},{"name":"node","_id":"ckjoaux6h0008de2xh2oico6c"},{"name":"koa","_id":"ckjoaux71000fde2x2m0rjt7x"},{"name":"TDD","_id":"ckjoaux7v000qde2xqvoh5xjn"},{"name":"desgin-patterns","_id":"ckjoaux7w000ude2xfl98z0nw"},{"name":"class","_id":"ckjoaux83000yde2xqonvdrmn"},{"name":"prototype","_id":"ckjoaux840012de2xxw1zpsro"},{"name":"git","_id":"ckjoaux840015de2xssvsj339"},{"name":"自动化构建","_id":"ckjoaux85001ade2xhswjh34y"},{"name":"mocha","_id":"ckjoaux86001ede2xom91jg32"},{"name":"e2e","_id":"ckjoauxh8001pde2xr8tmtj8o"},{"name":"linux","_id":"ckjoauxhl001ude2xl16it5cl"},{"name":"vue","_id":"ckjoauxht0020de2x0ebaez0w"},{"name":"数据劫持","_id":"ckjoauxhw0024de2xg75273hb"},{"name":"发布订阅","_id":"ckjoauxi10026de2xerzqxhsx"},{"name":"tcp连接、断开连接","_id":"ckjoauxi20029de2xmco3w9w5"},{"name":"npm","_id":"ckjoauxi4002ede2x34fhj0n5"},{"name":"promise","_id":"ckjoauxi5002ide2xzgp77io6"},{"name":"javascript","_id":"ckjoauxi7002mde2xu6hvrwz4"},{"name":"webdriverio","_id":"ckjoauxic002pde2xqx6aq7qw"},{"name":"cucumber","_id":"ckjoauxie002tde2xp74swoum"}]}}