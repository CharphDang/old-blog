<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>词悬浮-词汇速记法1</title>
    <url>/blog/dist/2018/12/26/English/</url>
    <content><![CDATA[<h1 id="第一堂课笔记"><a href="#第一堂课笔记" class="headerlink" title="第一堂课笔记"></a>第一堂课笔记</h1><h2 id="【词根】：-elect-采集-press-压力"><a href="#【词根】：-elect-采集-press-压力" class="headerlink" title="【词根】： -elect-(采集)  -press-(压力)"></a>【词根】： -elect-(采集)  -press-(压力)</h2><h2 id="【前缀】：（常见30个）"><a href="#【前缀】：（常见30个）" class="headerlink" title="【前缀】：（常见30个）"></a>【前缀】：（常见30个）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">e- 向外</span><br><span class="line">un- 否定</span><br><span class="line">self- 自己</span><br><span class="line">col- 在一起，强调</span><br><span class="line">se- 分</span><br><span class="line">neg- 否定</span><br><span class="line"></span><br><span class="line">over- 在上，超过</span><br><span class="line">de- 向下，分</span><br><span class="line">im- 向内，否定，强调</span><br><span class="line">ex- 向外</span><br><span class="line">un- 否定</span><br><span class="line">anti- 反</span><br><span class="line">com- 在一起</span><br><span class="line">re- 往回，再次</span><br><span class="line">i??- 否定</span><br></pre></td></tr></table></figure>
<h2 id="【后缀】：（常见40个）"><a href="#【后缀】：（常见40个）" class="headerlink" title="【后缀】：（常见40个）"></a>【后缀】：（常见40个）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-or === -er 名词或形容词后缀</span><br><span class="line">-ed 形容词或过去式或过去分词</span><br><span class="line">-al 形容词或名词后缀</span><br><span class="line">-ant 名词或形容词后缀</span><br><span class="line">-ation 复合名词后缀</span><br><span class="line"></span><br><span class="line">-ic 形容词或名词后缀</span><br><span class="line">-ive 形容词或名词后缀</span><br><span class="line">-ist 名词或形容词后缀</span><br><span class="line">-ing 形容词或动名词或现在分词</span><br><span class="line">-ion 名词后缀</span><br><span class="line">-ism 名词后缀，表...主义</span><br><span class="line">-ist 名词后缀，表...主义者</span><br><span class="line">-ity 名词后缀，表抽象事物</span><br><span class="line">-ize 动词后缀，表使动</span><br><span class="line">-ible 形容词后缀，表能...的</span><br><span class="line"></span><br><span class="line">-ful 形容词后缀</span><br><span class="line">-ure 名词或动词后缀</span><br><span class="line">-ly 副词后缀</span><br><span class="line">-less 形容词后缀，表否定</span><br><span class="line">-ness 名词后缀</span><br></pre></td></tr></table></figure>
<h2 id="【课后练习】："><a href="#【课后练习】：" class="headerlink" title="【课后练习】："></a>【课后练习】：</h2><table>
<thead>
<tr>
<th align="center">单词</th>
<th align="center">前缀 2</th>
<th align="center">前缀1</th>
<th align="center">词根1</th>
<th align="center">后缀1</th>
<th align="center">后缀2</th>
<th align="center">含义</th>
<th align="left">含义备选项（数字填写到’含义栏’）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pressurized</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">1、adj.抗抑郁的</td>
</tr>
<tr>
<td align="center">impressionism</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">2、n.选举</td>
</tr>
<tr>
<td align="center">expressiveness</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">3、vt.使减压</td>
</tr>
<tr>
<td align="center">unselected</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">4、n.压缩性</td>
</tr>
<tr>
<td align="center">antidepressant</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">5、n.表情丰富</td>
</tr>
<tr>
<td align="center">collectivism</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">6、adj.未选择的</td>
</tr>
<tr>
<td align="center">neglectful</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">7、adj.加压的</td>
</tr>
<tr>
<td align="center">election</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">8、n.印象主义</td>
</tr>
<tr>
<td align="center">depressurize</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">9、adj.疏忽的</td>
</tr>
<tr>
<td align="center">compressibility</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="left">10、n.集体主义</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>词悬浮-词汇速记法2</title>
    <url>/blog/dist/2018/12/26/English2/</url>
    <content><![CDATA[<h1 id="第二堂课笔记"><a href="#第二堂课笔记" class="headerlink" title="第二堂课笔记"></a>第二堂课笔记</h1><blockquote>
<p>【金字塔排序的意义】：以战养战</p>
</blockquote>
<h2 id="【词根】：-nat-生-form-形成"><a href="#【词根】：-nat-生-form-形成" class="headerlink" title="【词根】： -nat-(生)  -form-(形成)"></a>【词根】： -nat-(生)  -form-(形成)</h2><h2 id="【前缀】：（常见30个）"><a href="#【前缀】：（常见30个）" class="headerlink" title="【前缀】：（常见30个）"></a>【前缀】：（常见30个）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">de- 向下，分</span><br><span class="line">inter- 在...之间，互相</span><br><span class="line">trans- 通过，改变</span><br><span class="line">un- 否定</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>- 否定，内向，强调，使动</span><br><span class="line">non- 否定</span><br><span class="line">semi- 半</span><br><span class="line">per- 完全</span><br><span class="line">trans- 通过，改变</span><br><span class="line">de- 分，向下</span><br></pre></td></tr></table></figure>
<h2 id="【后缀】：（常见40个）"><a href="#【后缀】：（常见40个）" class="headerlink" title="【后缀】：（常见40个）"></a>【后缀】：（常见40个）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-er === or 形容词或名词后缀</span><br><span class="line">-ed 形容词、过去式、过去分词</span><br><span class="line">-less 形容词后缀，表否定</span><br><span class="line">-ness 名词后缀</span><br><span class="line">-al 形容词或名词后缀</span><br><span class="line">-ly 副词后缀</span><br><span class="line">-ity 名词后缀，表抽象含义</span><br><span class="line"></span><br><span class="line">-ics 学术名词后缀</span><br><span class="line">-ate 动词或形容词后缀</span><br><span class="line">-ion 名词后缀</span><br><span class="line">-ist 形容词或名词后缀</span><br><span class="line">-ic 形容词或名词后缀</span><br><span class="line">-s 名词后缀，复数名词后缀</span><br><span class="line">-ize 动词后缀，表使动</span><br><span class="line">-ism 名词后缀，表...主义</span><br><span class="line">-ist 名词后缀，表...主义者</span><br><span class="line">-ant 名词或形容词后缀</span><br><span class="line">-ive 名词或形容词后缀</span><br><span class="line">-ance 名词后缀</span><br><span class="line">-ing 形容词、动名词、现在分词</span><br><span class="line">-able 形容词后缀，表能...的</span><br><span class="line">-ation 复合名词后缀</span><br><span class="line">-ure 名词或动词后缀</span><br></pre></td></tr></table></figure>
<h2 id="【课后练习】："><a href="#【课后练习】：" class="headerlink" title="【课后练习】："></a>【课后练习】：</h2><table>
<thead>
<tr>
<th align="center">单词</th>
<th align="center">前缀1</th>
<th align="center">词根1</th>
<th align="center">后缀1</th>
<th align="center">后缀2</th>
<th align="center">后缀3</th>
<th align="center">后缀4</th>
<th align="center">后缀5</th>
<th align="center">含义</th>
<th>含义备选项（数字填写到’含义栏’）</th>
</tr>
</thead>
<tbody><tr>
<td align="center">formality</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>1、adj.自然主义的</td>
</tr>
<tr>
<td align="center">denationalization</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>2、n.表演性</td>
</tr>
<tr>
<td align="center">naturally</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>3、n.国有化</td>
</tr>
<tr>
<td align="center">formation</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>4、n.变形金刚</td>
</tr>
<tr>
<td align="center">naturalistic</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>5、n.跨国化</td>
</tr>
<tr>
<td align="center">transfromational</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>6、n.编队</td>
</tr>
<tr>
<td align="center">nationalization</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>7、adj.转换的</td>
</tr>
<tr>
<td align="center">transnationalization</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>8、n.礼节</td>
</tr>
<tr>
<td align="center">transformer</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>9、n.非国有化</td>
</tr>
<tr>
<td align="center">performativity</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td>10、adv.自然地</td>
</tr>
</tbody></table>
<hr>
<h2 id="【听力练习推荐看片】："><a href="#【听力练习推荐看片】：" class="headerlink" title="【听力练习推荐看片】："></a>【听力练习推荐看片】：</h2><p><img src="/blog/dist/.io//img.jpg" alt="image text"></p>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>词悬浮-词汇速记法3</title>
    <url>/blog/dist/2018/12/27/English3/</url>
    <content><![CDATA[<h1 id="第三堂课笔记"><a href="#第三堂课笔记" class="headerlink" title="第三堂课笔记"></a>第三堂课笔记</h1><ul>
<li><h5 id="速记的心法：-半母语式学习"><a href="#速记的心法：-半母语式学习" class="headerlink" title="速记的心法： 半母语式学习"></a>速记的心法： 半母语式学习</h5></li>
<li><h5 id="论拉丁语在英语词汇学习中的重要性"><a href="#论拉丁语在英语词汇学习中的重要性" class="headerlink" title="论拉丁语在英语词汇学习中的重要性"></a>论拉丁语在英语词汇学习中的重要性</h5></li>
<li><h5 id="掌握拉丁语词根即可"><a href="#掌握拉丁语词根即可" class="headerlink" title="掌握拉丁语词根即可"></a>掌握拉丁语词根即可</h5></li>
</ul>
<h2 id="【词根】：-vis-vid-看-、-it-走-、-tele-远-、-gram-graph-写，画，图-、-phot-光-、-o-连字符-、-geo-大地-、-electr-电-、-phon-声音-、-cardi-心-、-astro-星系-、-stud-学习，工作-、-aud-听-、-rad-辐射-、-cast-投掷-、-cass-拿-、"><a href="#【词根】：-vis-vid-看-、-it-走-、-tele-远-、-gram-graph-写，画，图-、-phot-光-、-o-连字符-、-geo-大地-、-electr-电-、-phon-声音-、-cardi-心-、-astro-星系-、-stud-学习，工作-、-aud-听-、-rad-辐射-、-cast-投掷-、-cass-拿-、" class="headerlink" title="【词根】： -vis- =  -vid- (看) 、-it-(走)、-tele-(远)、-gram- = -graph- (写，画，图)、-phot-(光)、-o-(连字符)、-geo-(大地)、-electr-(电)、-phon-(声音)、-cardi-(心)、-astro-(星系)、-stud-(学习，工作)、-aud-(听)、-rad-(辐射)、-cast-(投掷)、-cass-(拿)、"></a>【词根】： -vis- =  -vid- (看) 、-it-(走)、-tele-(远)、-gram- = -graph- (写，画，图)、-phot-(光)、-o-(连字符)、-geo-(大地)、-electr-(电)、-phon-(声音)、-cardi-(心)、-astro-(星系)、-stud-(学习，工作)、-aud-(听)、-rad-(辐射)、-cast-(投掷)、-cass-(拿)、</h2><blockquote>
<p>建议：学会画思维导图，供复习使用。</p>
</blockquote>
<h2 id="【前缀】：（常见30个）"><a href="#【前缀】：（常见30个）" class="headerlink" title="【前缀】：（常见30个）"></a>【前缀】：（常见30个）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">re- 往回，重复，再次</span><br><span class="line"><span class="built_in">super</span>- 在上，超过</span><br><span class="line">pro- 向前</span><br><span class="line">e- 向外</span><br><span class="line"></span><br><span class="line">ad- 强调</span><br><span class="line"><span class="keyword">in</span>- = im- 向内，强调，否定 </span><br><span class="line">self-自己</span><br></pre></td></tr></table></figure>


<h2 id="【后缀】：（常见40个）"><a href="#【后缀】：（常见40个）" class="headerlink" title="【后缀】：（常见40个）"></a>【后缀】：（常见40个）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-or 名词或形容词后缀</span><br><span class="line">-able = -ible 形容词后缀，表能...的</span><br><span class="line">-ory = -ary 形容词或名词后缀</span><br><span class="line">-ice 名词后缀</span><br><span class="line">-ion 名词后缀</span><br><span class="line">-ism 名词后缀，表...主义</span><br><span class="line">-ist 名词或形容词后缀</span><br><span class="line">-ly 副词后缀</span><br><span class="line">-ize = -ise 动词后缀，表使动</span><br><span class="line"></span><br><span class="line">-ed 形容词或过去式或过去分词后缀</span><br><span class="line">-ing 形容词或动名词或现在分词后缀</span><br><span class="line">-e 名词或动词后缀</span><br><span class="line">-al 形容词或名词后缀</span><br><span class="line">-ent 名词或形容词后缀</span><br><span class="line">-o 名词后缀</span><br><span class="line">-ate 形容词或名词后缀</span><br><span class="line">-ette 名词后缀，表小</span><br><span class="line">-ence 名词后缀</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="【课后练习】："><a href="#【课后练习】：" class="headerlink" title="【课后练习】："></a>【课后练习】：</h2><table>
<thead>
<tr>
<th>单词</th>
<th>前缀1</th>
<th>词根1</th>
<th>后缀1</th>
<th>后缀2</th>
<th>含义</th>
<th>含义备选项</th>
</tr>
</thead>
<tbody><tr>
<td>respected</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>1、adv.期望地</td>
</tr>
<tr>
<td>inspector</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>2、n.定义</td>
</tr>
<tr>
<td>retrospect</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>3、n.内省</td>
</tr>
<tr>
<td>finish</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>4、adj.无限的</td>
</tr>
<tr>
<td>expectantly</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>5、n.（美）公寓</td>
</tr>
<tr>
<td>department</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>6、vi.回顾</td>
</tr>
<tr>
<td>introspection</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>7、adj.受尊敬的</td>
</tr>
<tr>
<td>aprtment</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>8、vt.完成</td>
</tr>
<tr>
<td>definition</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>9、n.（大学的）科、系</td>
</tr>
<tr>
<td>Infinite</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>10、n.检查员</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa</title>
    <url>/blog/dist/2021/01/08/Koa/</url>
    <content><![CDATA[<h2 id="Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。"><a href="#Koa-是一个简单好用的Web框架，属于node服务器的层面语言技术。" class="headerlink" title="Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。"></a>Koa 是一个简单好用的Web框架，属于node服务器的层面语言技术。</h2><blockquote>
<p>此文默认当前已有node环境，如果你没有node环境，请自行安装</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">v14<span class="number">.15</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>本地新建一个空目录，进行依赖的安装</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i koa2 koa-router koa-<span class="keyword">static</span> -S</span><br></pre></td></tr></table></figure>
<ol>
<li><p>搭建http服务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base.js</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>运行这个脚本，<code>node base.js</code></p>
<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到页面提示”Not Found”， 这就已经启动起来了。</p>
</li>
<li><p>建立静态页面，并使用koa-static来加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.html</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width,initial-scale=1,user-scalable=0&quot;</span> /&gt;</span><br><span class="line">        &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.20.0-0/axios.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/qs/6.9.4/qs.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            <span class="comment">/* .cube-btn &#123;</span></span><br><span class="line"><span class="comment">            margin: 10px 0;</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">            &lt;div&gt;&#123;&#123;name&#125;&#125; : &#123;&#123;age&#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;button @click=<span class="string">&quot;getTokens&quot;</span>&gt;getTokens&lt;/button&gt;</span><br><span class="line">            &lt;button @click=<span class="string">&quot;setTokens&quot;</span>&gt;setTokens&lt;/button&gt;</span><br><span class="line">            &lt;button @click=<span class="string">&quot;noAPI&quot;</span>&gt;noAPI&lt;/button&gt;</span><br><span class="line">            &lt;button @click=<span class="string">&quot;redirect&quot;</span>&gt;redirect&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">                el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        name: <span class="string">&#x27;dangchaofeng&#x27;</span>,</span><br><span class="line">                        age: <span class="string">&#x27;28&#x27;</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line">                    <span class="keyword">async</span> <span class="function"><span class="title">getTokens</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">`/getTokens`</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;res&#x27;</span>, res);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="keyword">async</span> <span class="function"><span class="title">setTokens</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.post(<span class="string">`/setTokens`</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;res&#x27;</span>, res);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="keyword">async</span> <span class="function"><span class="title">redirect</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">`/redirect`</span>);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;res&#x27;</span>, res);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="keyword">async</span> <span class="function"><span class="title">noAPI</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> res = <span class="keyword">await</span> axios.delete(<span class="string">`/noAPI`</span>, &#123;</span><br><span class="line">                            params: &#123;</span><br><span class="line">                                id: <span class="string">&#x27; 1&#x27;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&#x27;res&#x27;</span>, res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base-static.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="keyword">static</span>(path.join(__dirname));</span><br><span class="line"></span><br><span class="line">app.use(main);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>运行这个脚本，<code>node base-static.js</code></p>
<p>然后在浏览器中输入<code>localhost:3000</code>， 你就会看到自己的页面。</p>
</li>
<li><p>加载koa-router路由功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base-router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/getTokens&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        token: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/setTokens&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        success: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/noAPI&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        success: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">static</span>(path.join(__dirname)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用路由</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line"><span class="comment">// * 自动识别405等返回。</span></span><br><span class="line"><span class="comment">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>此处强调说明三点：</p>
<p>router是用的restful api</p>
<p>app.use(router.routes());  此句的作用就是启用路由，将路由这个中间件加载给koa</p>
<p>app.use(router.allowedMethods()); 此句的作用，是让路由自动识别方法，例如你的接口只实现了get方法，没有对应的post,put,delete方法，那么当你从页面上访问并没有定义的方法时，正常情况会识别到404返回，如果加载这个中间件，那么它会识别为405，表示你不允许这个方法操作</p>
</blockquote>
</li>
<li><p>重定向 <code>// ctx.redirect(&#39;getTokens&#39;); </code> 会产生302 的状态码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base-redirect.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Adam Dang</span></span><br><span class="line"><span class="comment"> * @Description: 重定向路由</span></span><br><span class="line"><span class="comment"> * @Date: 2021-01-08 14:25:38</span></span><br><span class="line"><span class="comment"> * @LastEditors: Adam Dang</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2021-01-08 14:25:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/getTokens&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        token: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/setTokens&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        success: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向到其他url上</span></span><br><span class="line">router.get(<span class="string">&#x27;/redirect&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.redirect(<span class="string">&#x27;/getTokens&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">static</span>(path.join(__dirname)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用路由</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line"><span class="comment">// * 自动识别405等返回。</span></span><br><span class="line"><span class="comment">// * /noAPI , 只有post ，没有 delete方法，页面触发delete，就会直接405</span></span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>通过监听error 事件处理错误 <code>ctx.throw(500);</code>   <code>app.on(&#39;error&#39;,(err, ctx)=&gt;&#123; // handle &#125;)</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base-handleError.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/getTokens&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.throw(<span class="number">500</span>);</span><br><span class="line">    <span class="comment">// ctx.body = &#123;</span></span><br><span class="line">    <span class="comment">//     token: &#x27;123&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/setTokens&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        success: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">static</span>(path.join(__dirname)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启用路由</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line">app.on(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;server error&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      <categories>
        <category>node</category>
        <category>koa</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>TDD</title>
    <url>/blog/dist/2021/01/08/TDD/</url>
    <content><![CDATA[<ul>
<li><p>传统开发 primitive</p>
<ul>
<li>流程不清晰</li>
<li>反复确认</li>
<li>人力沟通成本大</li>
<li>代码难以维护</li>
</ul>
</li>
</ul>
<ul>
<li><p>测试驱动开发 test-driven development(TDD)</p>
<ul>
<li>先确定需求</li>
<li>再确定验收标准</li>
<li>编写test </li>
<li>编写业务代码</li>
<li>run test</li>
<li>submit code</li>
</ul>
</li>
</ul>
<blockquote>
<p>这里需要说明一下， 在当下2021年，TDD模式被coder们更偏向为开发完之后再开发 e2e,  unit test来测试自己的代码运行。</p>
</blockquote>
]]></content>
      <categories>
        <category>TDD</category>
      </categories>
      <tags>
        <tag>TDD</tag>
      </tags>
  </entry>
  <entry>
    <title>design-patterns</title>
    <url>/blog/dist/2020/09/21/design-patterns/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote>
<p>细节分类</p>
</blockquote>
<ul>
<li>【发布订阅模式】vue 中的实现$on,$emit,$off</li>
<li>【单例模式】errorDialog 可以使用进行优化</li>
<li>【策略模式】vue 中的 form rule，配置化使用，map 结构提供策略可配置，环境类的去调用 map 中的实际方案（value）去执行，Monitor 校验配置使用的<ul>
<li>{ key: ()=&gt;{} }</li>
</ul>
</li>
<li>【代理模式】防抖节流， Proxy, defineProperty， 主要是替代访问本体的功能</li>
<li>【中介者模式】目的，减少耦合，eg: 购物车需求,redux, vuex 都是中介者模式，通过 store 这个中介来操作对象</li>
<li>【装饰器模式】eg: react 高阶组件, 主要是添加行为。</li>
<li>【外观模式】外面只调用一个函数， 内部判断不同的分支，实现具体的逻辑</li>
<li>【工厂模式】提供一个专门创建对象的接口</li>
<li>【建造者模式】和工厂模式相比，参与了更多创建的过程 或者更为复杂</li>
<li>【迭代器模式】</li>
<li>【享元模式】重复利用一个模特，穿不同的衣服</li>
<li>【责任链模式】中间件机制，每个中间件串行的对你的东西进行加工判断处理</li>
<li>【适配器模式】理解为外观模式？</li>
</ul>
<blockquote>
<p>大分类</p>
</blockquote>
<ul>
<li>创建型设计模式<ul>
<li>构造器模式</li>
<li>原型模式</li>
<li>工厂模式<ul>
<li>提供一个接口实现创建，接口内部才是调用new Class()</li>
</ul>
</li>
<li>abstract factory 抽象工厂<ul>
<li>内部的class可以通过接口进行注册</li>
</ul>
</li>
<li>单例模式</li>
<li>prototype模式<ul>
<li>object.create(obj, {}) 实际原理是函数委托给别人</li>
</ul>
</li>
<li>module模式<ul>
<li>闭包自执行函数，暴露一个变量给外部使用，通过变量来操作内部私有属性</li>
</ul>
</li>
<li>抽象模式</li>
<li>生成器模式（可以理解为一个生成器中包含了多个类的实例化，复杂化后的工厂模式）</li>
</ul>
</li>
<li>结构型设计模式（专注类和对象的组合）<ul>
<li>代理模式<ul>
<li>提供一个代理者去帮助你操作实际的内容，代理者会考虑容错场景，提供备选方案(loading 图片的展示，等实际加载完图片，再切换新的src)</li>
</ul>
</li>
<li>外观模式<ul>
<li>外部调用统一，内部实现进行判断兼容性</li>
</ul>
</li>
<li>Command（命令）模式<ul>
<li>通过不同的命令（传参）做不同的事情，常含有（关联）接收者</li>
<li>execute(‘requestInfo’, ‘Ford Mondeo’, ‘321’)</li>
<li>execute(‘buyVehicle’, ‘Ford Escort’, ‘789’)</li>
</ul>
</li>
<li>Facade（外观）模式</li>
<li>Mixin模式<ul>
<li>类似于extend, merge等函数，将两个对象的key合并成一个，重复的以优先级进行覆盖</li>
</ul>
</li>
<li>Decorator（装饰器）模式</li>
<li>Flyweight（享元）模式</li>
</ul>
</li>
<li>行为设计模式<ul>
<li>观察者（发布订阅者模式） 关注对象之间的通信</li>
<li>策略模式<ul>
<li>不同的算法做同一件事情</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>设计原则 <code>人月神话</code> <code>代码大全</code> <code>unix编程艺术</code></p>
</blockquote>
<ul>
<li>开放封闭，开放扩展，封闭修改</li>
<li>依赖倒转</li>
<li>单一职责</li>
<li>里式替换</li>
<li>合成复用<ul>
<li>组合优于继承</li>
</ul>
</li>
</ul>
<blockquote>
<p>学习设计模式的目的： 写着舒服，维护更舒服</p>
</blockquote>
<blockquote>
<p>什么时候用</p>
</blockquote>
<ul>
<li>带来开发收益</li>
<li>带来可维护性收益</li>
<li>把设计模式和组件挂钩（elementUI, antDesign）</li>
<li>没有这些，if else 就是最简单的代码</li>
<li>不要滥用</li>
<li>懒，才是程序员成长的动力</li>
</ul>
<blockquote>
<p>项目内部设计原则</p>
</blockquote>
<ul>
<li>布鲁克斯法则： 软件开发的后期，添加人力，会让项目更慢</li>
<li>KISS 原则：保持简单,simple and stupid 模块设计需要遵循</li>
<li>备份</li>
<li>软件开发没有银弹</li>
<li>过早优化效应<ul>
<li>过早的优化是万恶之源</li>
</ul>
</li>
</ul>
<blockquote>
<p>学习感言</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">代码处处是模式，其实设计模式的大白话就是套路，大家都实践过很多遍之后得出的真理。学习中间，就会发现，其实自己</span><br><span class="line">的代码当中很多地方已经用到了设计模式，只是你自己不知道那叫什么名字</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>desgin-patterns</category>
      </categories>
      <tags>
        <tag>desgin-patterns</tag>
      </tags>
  </entry>
  <entry>
    <title>es6Class</title>
    <url>/blog/dist/2019/03/04/es6Class/</url>
    <content><![CDATA[<h1 id="es6中class的基本使用"><a href="#es6中class的基本使用" class="headerlink" title="es6中class的基本使用"></a>es6中class的基本使用</h1><ul>
<li><p>有几个关键字的使用：</p>
<ul>
<li>class： 用来定义’类’； </li>
<li>constructor： 用来初始化’类’；</li>
<li>extends： 用来子类继承父类；</li>
<li>super： 调用父类方法<ul>
<li>区分一： constructor 中，直接调用super()并传参，相当于调用父级的constructor；</li>
<li>区分二：普通方法中（原型方法），super指向父类的原型对象，调用super.xx()， xx指代父级的某个方法；</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类-动物</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="string">&#x27;--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> Animal(<span class="string">&#x27;小动物&#x27;</span>);</span><br><span class="line">animal.sayName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类，狗--继承于动物类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用父类方法</span></span><br><span class="line">        <span class="built_in">super</span>.sayName();</span><br><span class="line">        <span class="comment">// 写子类自己的方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>(<span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;大黄&#x27;</span>, <span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">dog.sayName();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>简不简单，惊不惊喜，意不意外，开不开心？</p>
<blockquote>
<p>class使用就是这么简单，但是要知道这只是语法糖，es5中继承是如何实现呢？</p>
</blockquote>
</li>
</ul>
<h1 id="es5中继承的基本实现"><a href="#es5中继承的基本实现" class="headerlink" title="es5中继承的基本实现"></a>es5中继承的基本实现</h1><ul>
<li><p>几个关键字的使用：</p>
<ul>
<li>function：类就是使用函数创建出来的；</li>
<li>prototype：原型属性；</li>
<li>Object.create(<code>__proto__</code>, <code>obj</code>)：用来创建对象<ul>
<li>参数一<code>__proto__</code>：必需，被创建对象的原型对象。</li>
<li>参数二<code>obj</code>：可选，包含一个或多个属性描述符的 JavaScript 对象，用来规定要被添加到对象的属性，可以分为两类，数据属性和访问器属性</li>
</ul>
</li>
</ul>
</li>
<li><p>简单使用示例代码(从基本示例中引发思考，如何调用父级方法)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类-动物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="string">&#x27;--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类，狗--继承于动物类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Dog的原型指向Animal的一个实例</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="comment">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class="line">Dog.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params">argument</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>(<span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;大黄&#x27;</span>, <span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">dog.sayName();</span><br></pre></td></tr></table></figure>
<h1 id="es6class创建和es5中function创建，异同点在哪里？"><a href="#es6class创建和es5中function创建，异同点在哪里？" class="headerlink" title="es6class创建和es5中function创建，异同点在哪里？"></a>es6class创建和es5中function创建，异同点在哪里？</h1></li>
<li><p>相同点：</p>
<ul>
<li>都分为声明式和表达式</li>
<li>对待name,length表现一致</li>
<li>对待创建变量结果一致***</li>
<li>fn对待相同，都可以用call,apply.bind来改变this指向</li>
</ul>
</li>
<li><p>不同点：</p>
<ul>
<li>声明式，es5中的fn是存在变量提升的，es6中的class没有</li>
<li>Dog类， fn创建可以使用call调用，class创建的不能</li>
<li>在全局中创建Dog类，fn可以在window中访问Dog,class生成的不能</li>
<li>武昌补充。。。我没琢磨粗来</li>
</ul>
</li>
</ul>
<blockquote>
<p>那在es6还没出来的时候，当初的开发人员是如何写类的继承呢？别天真了，人没有那么傻，别个早已经封装实现了此类方法。<br>  <video id="video" controls preload="none" poster="laugh.mp4"><br>    sorry,您的浏览器不支持该视频类型!<br>    <source id="mp4" src="laugh.mp4" type="video/mp4"><br>  </video><br>看看es5的时候，别个是如何使用继承的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类-动物</span></span><br><span class="line"><span class="keyword">var</span> Animal = Class.extend(&#123;</span><br><span class="line">    <span class="comment">// init是构造函数，起到contructor的作用</span></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="string">&#x27;--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal(<span class="string">&#x27;小动物&#x27;</span>);</span><br><span class="line">animal.sayName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类，狗--继承于动物类</span></span><br><span class="line"><span class="keyword">var</span> Dog = Animal.extend(&#123;</span><br><span class="line">    <span class="comment">// init是构造函数</span></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//  在构造函数中调用父类的构造函数</span></span><br><span class="line">        <span class="built_in">this</span>._super(name);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类方法</span></span><br><span class="line">        <span class="built_in">this</span>._super();</span><br><span class="line">        <span class="comment">// 写子类自己的方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>(<span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;大黄&#x27;</span>, <span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">dog.sayName();</span><br></pre></td></tr></table></figure>


<h1 id="看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承"><a href="#看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承" class="headerlink" title="看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承"></a>看过别人的继承使用效果后，我们来实现一个类似的手动实现原型继承</h1><ul>
<li><p>示例看基本的继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类-动物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="string">&#x27;--------基类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Animal中的方法&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类，狗--继承于动物类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Dog的原型指向Animal的一个实例</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="comment">// 因为Animal的实例可以调用Animal原型中的方法, 所以Dog的实例也可以调用Animal原型中的所有属性。</span></span><br><span class="line">Dog.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>(<span class="subst">$&#123;<span class="built_in">this</span>.age&#125;</span>)----------子类&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Dog类中的方法`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;大黄&#x27;</span>, <span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">dog.sayName();</span><br></pre></td></tr></table></figure></li>
<li><p>上述示例的缺陷：</p>
<ol>
<li>在创建Dog构造函数和原型时，就对Animal进行了实例化，这是不合适的。</li>
<li>Dog的构造函数没法调用父类Animal的构造函数，导致在Dog构造函数中对name属性的重复赋值。</li>
<li>Dog中的函数会覆盖Animal中的同名函数，没有重载的机制（和上一条是一个类型的问题）。</li>
<li>实现中有constructor属性的指向错误。</li>
<li>单一职责，不够通用。 </li>
</ol>
</li>
<li><p>我们将其一个一个缺陷进行解决，最后便可以得到我们想要的封装结构,下面是完整代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Class = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 标识类的初始化是否完成，如果完成，便可以调用init进行初始化构造函数</span></span><br><span class="line">  <span class="keyword">var</span> initCompleteStatus = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 定义正则，边界为_super完整的字符串则是真</span></span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/\b_super\b/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">parentClass</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 父级，初始化基类是空对象</span></span><br><span class="line"></span><br><span class="line">  parentClass.extend = <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">childClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (initCompleteStatus) &#123;</span><br><span class="line">        <span class="built_in">this</span>.init.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> _super = <span class="built_in">this</span>.prototype; <span class="comment">// 父级类的原型</span></span><br><span class="line">    <span class="comment">// 保存父级的所有属性为子类的原型，并重置constructor</span></span><br><span class="line">      </span><br><span class="line">    initCompleteStatus = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 此时的实例化不会调用init</span></span><br><span class="line">    childClass.prototype = <span class="keyword">new</span> <span class="built_in">this</span>();</span><br><span class="line">    initCompleteStatus = <span class="literal">true</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(childClass.prototype, <span class="string">&quot;constructor&quot;</span>, &#123;</span><br><span class="line">      value: childClass</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自身属性的赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> props) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> props[name] === <span class="string">&quot;function&quot;</span> &amp;&amp; reg.test(props[name])) &#123;</span><br><span class="line">        childClass.prototype[name] = (<span class="function"><span class="keyword">function</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.dir(<span class="built_in">Object</span>.toString.call(fn));</span><br><span class="line">            <span class="keyword">var</span> temp = <span class="built_in">this</span>._super;</span><br><span class="line">            <span class="built_in">this</span>._super = _super[name];</span><br><span class="line">            <span class="comment">// 拿到函数返回值</span></span><br><span class="line">            <span class="keyword">var</span> result = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="built_in">this</span>._super = temp;</span><br><span class="line">            <span class="comment">// 将返回值返回</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;)(name, props[name]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        childClass.prototype[name] = props[name];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    childClass.extend = <span class="built_in">arguments</span>.callee;</span><br><span class="line">    <span class="keyword">return</span> childClass;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> parentClass;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>class</category>
        <category>prototype</category>
      </categories>
      <tags>
        <tag>class</tag>
        <tag>prototype</tag>
      </tags>
  </entry>
  <entry>
    <title>git 常用命令</title>
    <url>/blog/dist/2021/01/07/gitCommand/</url>
    <content><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">可以观看廖雪峰大神写的git教程</a></p>
<ul>
<li><p><code>git init</code></p>
<blockquote>
<p>初始化一个git仓库</p>
</blockquote>
</li>
<li><p><code>git remote add origin &lt;git@server-name:path/repo-name.git&gt;</code></p>
<blockquote>
<p>关联远程库</p>
</blockquote>
</li>
<li><p><code>git clone</code></p>
<blockquote>
<p>克隆</p>
</blockquote>
</li>
<li><p><code>git checkout -b &lt;name&gt;</code> or <code>git switch -c &lt;name&gt;</code></p>
<blockquote>
<p>检出分支pr-branch并切换到新分支上</p>
</blockquote>
</li>
<li><p><code>git checkout -b &lt;new-branch&gt; origin/&lt;remote-branch&gt;</code></p>
<blockquote>
<p>检出远程分支remote-branch到本地，命名为new-branch</p>
</blockquote>
</li>
<li><p><code> git commit</code></p>
<blockquote>
<p>本地提交</p>
</blockquote>
</li>
<li><p><code>git pull</code></p>
<blockquote>
<p>远程更新拉到本地</p>
</blockquote>
</li>
<li><p><code>git push</code></p>
<blockquote>
<p>本地推送到远程</p>
</blockquote>
</li>
<li><p><code>git merge c2</code></p>
<blockquote>
<p>把c2 branch 内容合并到当前分支上</p>
</blockquote>
</li>
<li><p><code>git rebase c2</code></p>
<blockquote>
<p>将c2分支最新的提交同步到当前分支，并变成线性提交</p>
</blockquote>
</li>
<li><p><code>git checkout c2^</code></p>
<blockquote>
<p>分离HEAD，让其指向c2的父级</p>
</blockquote>
</li>
<li><p><code>git checkout c2~2</code></p>
<blockquote>
<p>让其指向c2的父级的父级</p>
</blockquote>
</li>
<li><p><code>git branch -f c2 HEAD~2</code></p>
<blockquote>
<p>将分支c2重新分配给当前分支的父级的父级</p>
</blockquote>
</li>
<li><p><code>git reset HEAD~1</code></p>
<blockquote>
<p>将当前分支向后移到较早的提交上来恢复更改</p>
</blockquote>
</li>
<li><p><code>git revert HEAD</code></p>
<blockquote>
<p>重写当前分支，把上次的提交，反转过来再次提交， 来恢复之前的更改</p>
</blockquote>
</li>
<li><p><code>git push -u origin master</code></p>
<blockquote>
<p>将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了</p>
</blockquote>
</li>
<li><p><code>git pull</code></p>
<blockquote>
<p>相当于git fetch, git merge</p>
</blockquote>
</li>
<li><p><code>git pull --rebase</code></p>
<blockquote>
<p>相当于git fetch , git rebase ，本地就不会出现提交分叉以及万恶的merge commit信息</p>
</blockquote>
</li>
<li><p><code>rebase</code> 好处</p>
  <pre spellcheck="false" class="md-fences md-end-block ty-contain-cm modeLoaded" lang="reStructuredText" cid="n214" mdtype="fences" style="box-sizing: border-box; overflow: visible; font-family: var(--monospace); font-size: 0.9em; display: block; break-inside: avoid; text-align: left; white-space: normal; background-image: inherit; background-position: inherit; background-size: inherit; background-repeat: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: rgb(248, 248, 248); position: relative !important; border: 1px solid rgb(231, 234, 237); border-radius: 3px; padding: 8px 4px 6px; margin-bottom: 15px; margin-top: 15px; width: inherit;">想要更好的提交树，使用rebase操作会更好一点。
  这样可以线性的看到每一次提交，并且没有增加提交节点。
  merge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。
  而rebase 操作的话，会中断rebase,同时会提示去解决冲突。
  解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。</pre>
</li>
<li><p><code>git stash</code></p>
<blockquote>
<p>储藏现场工作（将git仓库已经追踪记录的，但是没有commit的东西先存起来）</p>
</blockquote>
</li>
<li><p><code>git stash list</code></p>
<blockquote>
<p>查看储藏区</p>
</blockquote>
</li>
<li><p><code>git stash apply stash@&#123;0&#125;</code></p>
<blockquote>
<p>恢复储藏区， 不会删除储藏区的内容，等待commit</p>
</blockquote>
</li>
<li><p><code>git stash pop</code></p>
<blockquote>
<p>恢复储藏区， 同时会删除储藏区的内容，等待commit</p>
</blockquote>
</li>
<li><p><code>git stash drop stash@&#123;0&#125;</code></p>
<blockquote>
<p>删除储藏区的内容</p>
</blockquote>
</li>
<li><p><code>git cherry-pick 4c805e2</code></p>
<blockquote>
<p>复制一个特定的提交到当前分支</p>
</blockquote>
</li>
<li><p><code>git tag &lt;tagname&gt; ? &lt;commit ID&gt;</code></p>
<blockquote>
<p>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id</p>
</blockquote>
</li>
<li><p><code>git tag -a &lt;tagname&gt; -m &quot;This is a tag&quot;</code></p>
<blockquote>
<p>可以指定标签信息</p>
</blockquote>
</li>
<li><p><code>git tag</code></p>
<blockquote>
<p>查看所有标签</p>
</blockquote>
</li>
<li><p><code>git show &lt;tagname&gt;</code></p>
<blockquote>
<p>查看一个标签</p>
</blockquote>
</li>
<li><p><code>git tag -d &lt;tagname&gt;</code></p>
<blockquote>
<p>删除一个标签</p>
</blockquote>
</li>
<li><p><code>git push origin &lt;tagname&gt;</code></p>
<blockquote>
<p>推送一个本地标签 到 远程</p>
</blockquote>
</li>
<li><p><code>git push origin --tags</code></p>
<blockquote>
<p>推送全部未推送过的本地标签</p>
</blockquote>
</li>
<li><p><code>git push origin :refs/tags/&lt;tagname&gt;</code></p>
<blockquote>
<p>删除一个远程标签</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>grunt</title>
    <url>/blog/dist/2019/08/27/grunt/</url>
    <content><![CDATA[<h1 id="grunt"><a href="#grunt" class="headerlink" title="grunt"></a>grunt</h1><ol>
<li><p>安装环境</p>
<ul>
<li><p>npm init -y</p>
</li>
<li><p>grunt <code>npm install grunt --save-dev</code></p>
</li>
<li><p>grunt-cli <code>npm install grunt-cli -g</code>, 这里我是全局安装grunt-cli</p>
</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>配置文件</p>
<ul>
<li><p>在package.json同级目录下，创建<code>Gruntfile.js</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Do grunt-related things in here</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>为工程增加babel转义功能</p>
<ul>
<li><p>为何要这么做？</p>
<ul>
<li>由于现代浏览器对es6+的语法支持度不够高，对于…解构、async/await 等无法识别，所以需要将我们的代码编译为浏览器认识的代码（方便我们使用最新的语法去编写代码，使代码更清晰明了高大上）</li>
</ul>
</li>
<li><p>安装依赖</p>
<ul>
<li><code>npm install --save-dev grunt-babel @babel/core</code></li>
<li><code>npm install @babel/preset-env --save-dev</code></li>
</ul>
</li>
<li><p>配置文件</p>
<ul>
<li><p>Gruntfile.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;load-grunt-tasks&quot;</span>)(grunt); <span class="comment">// npm install --save-dev load-grunt-tasks</span></span><br><span class="line"></span><br><span class="line">grunt.initConfig(&#123;</span><br><span class="line">  <span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      sourceMap: <span class="literal">false</span>,</span><br><span class="line">      presets: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            targets: &#123;</span><br><span class="line">              browsers: [<span class="string">&#x27;&gt; 1%&#x27;</span>, <span class="string">&#x27;last 2 versions&#x27;</span>, <span class="string">&#x27;not ie &lt;= 8&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    dist: &#123;</span><br><span class="line">      files: &#123;</span><br><span class="line">        <span class="string">&quot;dist/app.js&quot;</span>: <span class="string">&quot;src/app.js&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">grunt.registerTask(<span class="string">&quot;default&quot;</span>, [<span class="string">&quot;babel&quot;</span>]);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grunt.loadNpmTasks(&#39;grunt-babel&#39;);</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
</li>
</ol>
<pre><code> - `@babel/core` 是实际用来转义es6+代码的

 - `@babel/preset-env`是做转义预设，指定转义规则的</code></pre>
<ol start="4">
<li><p>为环境增加全局变量<code>babel-polyfill</code></p>
<ul>
<li><p>为何要这样做？</p>
<ul>
<li>当babel转义后，其实还有一些东西无法转义，比如es6+中的全局变量中的Promise, Object.assign()方法等，这就需要我们对当前环境进行一个polyfill，填充他们缺少的功能。（如果不填充，浏览器如果不认识Promise，那肯定运行的时候报错噻）</li>
</ul>
</li>
<li><p>安装依赖</p>
<ul>
<li><code>npm install --save-dev @babel/polyfill</code></li>
</ul>
</li>
<li><p>配置文件</p>
<ul>
<li><p>Gruntfile.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">presets: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            targets: &#123;</span><br><span class="line">              browsers: [<span class="string">&#x27;&gt; 1%&#x27;</span>, <span class="string">&#x27;last 2 versions&#x27;</span>, <span class="string">&#x27;not ie &lt;= 8&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            modules: <span class="string">&#x27;commonjs&#x27;</span>, <span class="comment">// 选项用于模块转化规则设置，可选配置包括：&quot;amd&quot; | &quot;umd&quot; | &quot;systemjs&quot; | &quot;commonjs&quot; | false, 默认使用 &quot;commonjs&quot;。即，将代码中的ES6的import转为require。</span></span><br><span class="line">            corejs: <span class="string">&#x27;3&#x27;</span>, <span class="comment">// 声明corejs版本</span></span><br><span class="line">            useBuiltIns: <span class="string">&#x27;usage&#x27;</span> <span class="comment">// 不用显示引用@babel/polyfill</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol start="5">
<li><p>为环境增加browserify功能</p>
<ul>
<li><p>为何这样做</p>
<ul>
<li>我们会发现babel转义出来的代码里面，会有require()/import语法，这都是引入的polyfill，但是浏览器不认识require() 这种commonJs 的CMD语法，也不认识import/exports 等语法，必须转换为浏览器认识的。</li>
<li>browserify默认是将require进行转换。</li>
<li>对前端define的转换还不知道怎么配置。</li>
</ul>
</li>
<li><p>安装依赖</p>
<ul>
<li><code>npm install --save-dev browserify</code></li>
<li><code>npm install --save-dev grunt-browserify</code></li>
</ul>
</li>
<li><p>配置文件</p>
<ul>
<li><p>Gruntfile.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 让浏览器适配require(commonJS,CMD)</span></span><br><span class="line">   browserify: &#123;</span><br><span class="line">      dist: &#123;</span><br><span class="line">        files: [</span><br><span class="line">          &#123;</span><br><span class="line">            expand: <span class="literal">true</span>,</span><br><span class="line">            src: [<span class="string">&#x27;**/*.js&#x27;</span>], <span class="comment">//所有js文件</span></span><br><span class="line">            dest: tmpDirBabel, <span class="comment">//输出到此目录下</span></span><br><span class="line">            cwd: tmpDirBabel <span class="comment">//js目录下</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grunt.loadNpmTasks(&#39;grunt-browserify&#39;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>配置压缩功能</p>
<ul>
<li><p>为何这样做？</p>
<ul>
<li>js文件进行压缩体积，优化方向</li>
</ul>
</li>
<li><p>安装依赖</p>
<ul>
<li><code>npm install grunt-contrib-uglify --save-dev</code></li>
</ul>
</li>
<li><p>配置文件</p>
<ul>
<li><p>Gruntfile.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义压缩</span></span><br><span class="line">    uglify: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        mangle: <span class="literal">true</span>, <span class="comment">//混淆变量名</span></span><br><span class="line">        comments: <span class="string">&#x27;false&#x27;</span> <span class="comment">//false（删除全部注释），some（保留@preserve @license @cc_on等注释）</span></span><br><span class="line">      &#125;,</span><br><span class="line">      uglifyFile: &#123;</span><br><span class="line">        files: [</span><br><span class="line">          &#123;</span><br><span class="line">            expand: <span class="literal">true</span>,</span><br><span class="line">            src: [<span class="string">&#x27;**/*.js&#x27;</span>], <span class="comment">//所有js文件</span></span><br><span class="line">            dest: tmpDirBabel, <span class="comment">//输出到此目录下</span></span><br><span class="line">            cwd: tmpDirBabel <span class="comment">//js目录下</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="string">&#x27;grunt-contrib-uglify&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>配置监听</p>
<ul>
<li><p>为何这么做？</p>
<ul>
<li>当文件发生更改时，需要做的一些任务，通常配置dev环境，比如less的编译， 本地js的转义等</li>
</ul>
</li>
<li><p>安装依赖</p>
<ul>
<li><code>npm install grunt-contrib-watch grunt-contrib-livereload --save-dev</code></li>
</ul>
</li>
<li><p>配置文件</p>
<ul>
<li><p>Gruntfile.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">      js: &#123;</span><br><span class="line">        files: [<span class="string">&#x27;localApp/**/*.js&#x27;</span>], <span class="comment">//所有js</span></span><br><span class="line">        tasks: [</span><br><span class="line">          <span class="string">&#x27;babel&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;browserify&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        options: &#123;</span><br><span class="line">          interrupt: <span class="literal">true</span>, <span class="comment">// 如果文件再次更改，则停止上一次的任务，重新构建新的</span></span><br><span class="line">          livereload: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      others: &#123;</span><br><span class="line">        files: [<span class="string">&#x27;localApp/**/*&#x27;</span>, <span class="string">&#x27;!localApp/**/*.js&#x27;</span>], <span class="comment">// 除了js</span></span><br><span class="line">        tasks: [<span class="string">&#x27;copy:copyOthersToWebApp&#x27;</span>],</span><br><span class="line">        options: &#123;</span><br><span class="line">          interrupt: <span class="literal">true</span>,</span><br><span class="line">          livereload: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="string">&#x27;grunt-contrib-watch&#x27;</span>);</span><br><span class="line">grunt.loadNpmTasks(<span class="string">&#x27;grunt-contrib-livereload&#x27;</span>);</span><br><span class="line">       </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>加载npm任务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">grunt.loadNpmTasks(<span class="string">&#x27;grunt-babel&#x27;</span>);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="9">
<li><p>注册自定义任务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">grunt.registerTask(<span class="string">&#x27;dev&#x27;</span>, [<span class="string">&#x27;watch&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>自动化构建</category>
      </categories>
      <tags>
        <tag>自动化构建</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试</title>
    <url>/blog/dist/2018/12/29/mocha/</url>
    <content><![CDATA[<h1 id="mocha-chai-单元测试"><a href="#mocha-chai-单元测试" class="headerlink" title="mocha + chai 单元测试"></a>mocha + chai 单元测试</h1><p>参考链接： <a href="http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html">测试框架 Mocha 实例教程</a><br>断言库使用 <a href="https://www.chaijs.com/api/bdd/">chai</a></p>
<blockquote>
<p>主要为个人的练习记录存放，下面会展示一些或者重点易错点。</p>
</blockquote>
<h2 id="通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。"><a href="#通配符（建议，如果只有一个文件的时候，不要使用-这种匹配模式）。" class="headerlink" title="通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。"></a>通配符（建议，如果只有一个文件的时候，不要使用{}这种匹配模式）。</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ mocha spec/&#123;my,awesome&#125;.js</span><br><span class="line">$ mocha test/unit<span class="comment">/*.js</span></span><br><span class="line"><span class="comment">$ mocha &#x27;test/**/</span>*.@(js|jsx)<span class="string">&#x27; // 也支持node的通配符，使用字符串包裹起来即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示： 如果只有一个文件的时候，也需要加上, 比如 mocha test/&#123;cf,&#125;.js 否则会报错。</span></span><br><span class="line"><span class="string">Warning: Could not find any test files matching pattern: test/&#123;cf&#125;.js</span></span><br><span class="line"><span class="string">No test files found</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<h2 id="递归执行（mocha默认会执行当前目录下的test目录下的文件）"><a href="#递归执行（mocha默认会执行当前目录下的test目录下的文件）" class="headerlink" title="递归执行（mocha默认会执行当前目录下的test目录下的文件）"></a>递归执行（mocha默认会执行当前目录下的test目录下的文件）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">如果想执行内嵌的其他文件，比如：</span><br><span class="line">test/cf<span class="comment">/**.js;</span></span><br><span class="line"><span class="comment">test/gg/tt/**.js;</span></span><br><span class="line"><span class="comment">这种默认使用mocha命令是不会执行的，因为他们不在test目录下。</span></span><br><span class="line"><span class="comment">可以使用：</span></span><br><span class="line"><span class="comment">mocha --recursive 即可以递归执行test目录下所有文件，包含深度嵌套的。</span></span><br></pre></td></tr></table></figure>
<h2 id="显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。"><a href="#显示报告结果-reporter参数用来指定测试报告的格式，默认是spec格式。" class="headerlink" title="显示报告结果(--reporter参数用来指定测试报告的格式，默认是spec格式。)"></a>显示报告结果(<code>--reporter</code>参数用来指定测试报告的格式，默认是<code>spec</code>格式。)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ mocha</span><br><span class="line"># 等同于</span><br><span class="line">$ mocha --reporter spec</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>--reporters</code>参数可以显示所有内置的报告格式。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ mocha --reporters</span><br></pre></td></tr></table></figure>
<h2 id="生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）"><a href="#生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）" class="headerlink" title="生成报告结果（使用mochawesome模块，可以生成漂亮的HTML格式的报告。）"></a>生成报告结果（使用<a href="http://adamgruber.github.io/mochawesome/"><code>mochawesome</code></a>模块，可以生成漂亮的HTML格式的报告。）</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev mochawesome</span><br><span class="line">$ ../node_modules/.bin/mocha --reporter mochawesome</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>mocha</code>命令使用了项目内安装的版本，而不是全局安装的版本，因为<code>mochawesome</code>模块是安装在项目内的。</p>
<p>然后，测试结果报告就在<a href="https://github.com/ruanyf/mocha-demos/blob/master/demo02/mochawesome-reports"><code>mochaawesome-reports</code></a>子目录生成。</p>
<h2 id="配置文件mocha-opts"><a href="#配置文件mocha-opts" class="headerlink" title="配置文件mocha.opts"></a>配置文件mocha.opts</h2><p>Mocha允许在<code>test</code>目录下面，放置配置文件<code>mocha.opts</code>，把命令行参数写在里面。请先进入<a href="https://github.com/ruanyf/mocha-demos/tree/master/demo03"><code>demo03</code></a>目录，运行下面的命令。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ mocha --recursive --reporter tap</span><br></pre></td></tr></table></figure>
<p>上面这个命令有两个参数<code>--recursive</code>、<code>--reporter tap</code>。</p>
<p>然后，把这两个参数写入<code>test</code>目录下的<a href="https://github.com/ruanyf/mocha-demos/blob/master/demo03/test/mocha.opts"><code>mocha.opts</code></a>文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">--reporter tap</span><br><span class="line">--recursive</span><br></pre></td></tr></table></figure>
<p>然后，执行<code>mocha</code>就能取得与第一行命令一样的效果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ mocha</span><br></pre></td></tr></table></figure>
<p>如果测试用例不是存放在test子目录，可以在<code>mocha.opts</code>写入以下内容。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">otherDirTests</span><br><span class="line">--recursive</span><br></pre></td></tr></table></figure>
<p>上面代码指定运行<code>otherDirTests</code>目录及其子目录之中的测试脚本。</p>
<h2 id="ES6测试"><a href="#ES6测试" class="headerlink" title="ES6测试"></a>ES6测试</h2><p>如果测试脚本是用ES6写的，那么运行测试之前，需要先用Babel转码。进入<a href="https://github.com/ruanyf/mocha-demos/tree/master/demo04"><code>demo04</code></a>目录，打开<a href="https://github.com/ruanyf/mocha-demos/blob/master/demo04/test/add.test.js"><code>test/add.test.js</code></a>文件，可以看到这个测试用例是用ES6写的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&#x27;../src/add.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> chai <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> expect = chai.expect;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;加法函数的测试&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">&#x27;1 加 1 应该等于 2&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    expect(add(<span class="number">1</span>, <span class="number">1</span>)).to.be.equal(<span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>ES6转码，需要安装Babel。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ npm install babel-core babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure>
<p>然后，在项目目录下面，新建一个<a href="https://github.com/ruanyf/mocha-demos/blob/master/demo04/.babelrc"><code>.babelrc</code></a>配置文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [ <span class="string">&quot;es2015&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，使用<code>--compilers</code>参数指定测试脚本的转码器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ ../node_modules/mocha/bin/mocha --compilers js:babel-core/register</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>--compilers</code>参数后面紧跟一个用冒号分隔的字符串，冒号左边是文件的后缀名，右边是用来处理这一类文件的模块名。上面代码表示，运行测试之前，先用<code>babel-core/register</code>模块，处理一下<code>.js</code>文件。由于这里的转码器安装在项目内，所以要使用项目内安装的Mocha；如果转码器安装在全局，就可以使用全局的Mocha。</p>
<blockquote>
<p>可以结合mocha.opts使用，或者在package.json中自定义命令去实现。</p>
</blockquote>
<h3 id="package-json（使用方式：npm-run-test）"><a href="#package-json（使用方式：npm-run-test）" class="headerlink" title="package.json（使用方式：npm run test）"></a>package.json（使用方式：<code>npm run test</code>）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;mocha --recursive --compilers js:babel-core/register&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;mocha --recursive --require babel-core/register&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mocha-opts（使用方式：-mocha）"><a href="#Mocha-opts（使用方式：-mocha）" class="headerlink" title="Mocha.opts（使用方式： mocha）"></a>Mocha.opts（使用方式： <code>mocha</code>）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">--reporter spec</span><br><span class="line">--recursive</span><br><span class="line">--compilers js:babel-core/register</span><br></pre></td></tr></table></figure>
<p>–compilers在使用过程中提示在未来版本中将被移除，推荐使用下面这种方式！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">--reporter spec</span><br><span class="line">--recursive</span><br><span class="line">--<span class="built_in">require</span> babel-core/register</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mocha</category>
      </categories>
      <tags>
        <tag>mocha</tag>
      </tags>
  </entry>
  <entry>
    <title>如何给无网的服务器linux环境安装nodeJs</title>
    <url>/blog/dist/2021/01/08/no-network-linux-install-nodeJs/</url>
    <content><![CDATA[<ol>
<li><p>首先我们本地需要有一个已经下载好的node文件</p>
<ul>
<li><p>[下载地址1（英文）]: (<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>)</p>
</li>
<li><p>[下载地址2（中文）]: (<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a>)</p>
<blockquote>
<p> 备注： 首先通过ssh连接我们要进入的linux系统中，输入密码连接成功后，通过  uname -a  命令查看到Linux系统位数是64位（备注：x86_64表示64位系统， i686 i386表示32位系统），如图：</p>
</blockquote>
<p>  <img src="/blog/dist/.io//img1.jpg" alt="Image1 text"></p>
</li>
</ul>
<blockquote>
<p>所以我们需要下载一个64位linux二进制包。</p>
</blockquote>
<p><img src="/blog/dist/.io//img2.jpg" alt="Image2 text"></p>
</li>
<li><p>将下载下来的文件上传服务器并解压，查看版本正常后，进行创建全局软连接</p>
<ul>
<li><p>将文件上传服务器，通过scp命令，如图：</p>
<p><img src="/blog/dist/.io//img3.jpg" alt="Image3 text"></p>
</li>
<li><p>然后再次通过ssh连接服务器后，在上面找到文件进行解压，正常流程如图：</p>
<blockquote>
<p>备注：正常流程，linux支持xz解压，将文件解压为tar类型，再通过tar -xvf 解决即可。</p>
<p>如果你的linux不支持xz解压，请在自己本地<a href="https://www.jianshu.com/p/6efadc7f86cf">下载配置xz</a>并且解压为tar文件，再通过scp命令传到服务器上，再通过tar -xvf 解决即可。</p>
</blockquote>
<p><img src="/blog/dist/.io//img4.jpg" alt="Image4 text"></p>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>最后一步，我们需要进入我所在tar解压后的文件夹下/bin</p>
<blockquote>
<p>备注：进入到文件夹/bin下后，ls一下，会发现有node 和npm的存在，我们执行了node -v, npm -v；发现提示command not fount 命令不存在，因为我们没有创建全局软连接。</p>
<ul>
<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/node /usr/local/bin/</li>
<li>ln -s /dcf/node-v10.14.2-linux-x64/bin/npm /usr/local/bin/</li>
</ul>
<p>通过ln -s 创建全局软连接之后，就可以正常使用。</p>
<p>注意：一定要用绝对路径，不要用相对路径去配置软连接，那样会无效！</p>
</blockquote>
<p><img src="/blog/dist/.io//img5.jpg" alt="Image5 text"></p>
</li>
</ul>
<ol start="3">
<li>全局软连接建立完成后，执行node -v； npm -v；发现有版本后，就说明安装成了。</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>npm常用命令</title>
    <url>/blog/dist/2018/12/26/npm-command/</url>
    <content><![CDATA[<blockquote>
<p>相信大家很多人，包括我自己，常常会对npm install –save-dev 、 npm install –save傻傻分不清楚,今天这里主要是对npm的常用命令进行一个总结。</p>
</blockquote>
<hr>
<blockquote>
<p>首先，npm 是node.js自带的功能。查看npm版本</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line"><span class="number">6.4</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>升级npm版本</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mac下: </span><br><span class="line">	sudo npm install npm -g</span><br><span class="line"><span class="built_in">window</span>下:</span><br><span class="line">	npm install npm -g</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用npm安装模块</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install &lt;Module Name&gt;</span><br><span class="line">eg: 使用npm安装node中的express框架</span><br><span class="line">	npm install express</span><br></pre></td></tr></table></figure>
<p>安装好之后，express包就会放在当前工程目录下的node_modules 目录中，因此在代码中只需要通过 <strong>require(‘express’)</strong> 的方式就好，无需指定第三方包路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认方式为本地安装，还有一种是全局安装</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>
<blockquote>
<p>接下来，我们列举下容易混淆的方式（注意①②的不同）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install X:</span><br><span class="line"></span><br><span class="line">	- 会把X包安装到node_modules目录中</span><br><span class="line"></span><br><span class="line">	- 不会修改package.json</span><br><span class="line"></span><br><span class="line">	- 之后运行npm install命令时，不会自动安装X</span><br><span class="line">    </span><br><span class="line">npm install X --save:</span><br><span class="line"></span><br><span class="line">    - 会把X包安装到node_modules目录中</span><br><span class="line"></span><br><span class="line">    - 会在package.json的 ①dependencies 属性下添加X</span><br><span class="line"></span><br><span class="line">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class="line"></span><br><span class="line">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，会自动安装msbuild到		  node_modules目录中</span><br><span class="line">npm install X --save-dev:</span><br><span class="line"></span><br><span class="line">    - 会把X包安装到node_modules目录中</span><br><span class="line"></span><br><span class="line">    - 会在package.json的 ②devDependencies 属性下添加X</span><br><span class="line"></span><br><span class="line">    - 之后运行npm install命令时，会自动安装X到node_modules目录中</span><br><span class="line"></span><br><span class="line">    - 之后运行npm install -production或者注明NODE_ENV变量值为production时，不会自动安装X到			  node_modules目录中</span><br></pre></td></tr></table></figure>
<blockquote>
<p>npm install 使用原则</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">运行时需要用到的包使用--save，否则使用--save-dev。</span><br></pre></td></tr></table></figure>
<blockquote>
<p>npm 卸载模块</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall X</span><br><span class="line">卸载后，你可以到 &#x2F;node_modules&#x2F; 目录下查看包是否还存在，或者使用以下命令查看：</span><br><span class="line">npm ls</span><br></pre></td></tr></table></figure>
<blockquote>
<p>更新模块</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm update X</span><br></pre></td></tr></table></figure>
<h3 id="使用淘宝镜像"><a href="#使用淘宝镜像" class="headerlink" title="使用淘宝镜像"></a>使用淘宝镜像</h3><blockquote>
<p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>
<p>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>
<p>注意： 如果使用的是cnpm，则只需要将第一个npm命令变为cnpm即可，其他和npm命令使用方式相同。</p>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>protractor</title>
    <url>/blog/dist/2020/04/04/protractor/</url>
    <content><![CDATA[<h1 id="protractor"><a href="#protractor" class="headerlink" title="protractor"></a>protractor</h1><p><a href="https://github.com/dangchaofeng/protractor">Source Code</a></p>
]]></content>
      <categories>
        <category>protractor</category>
      </categories>
      <tags>
        <tag>e2e</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP三次握手四次挥手</title>
    <url>/blog/dist/2019/01/02/tcp/</url>
    <content><![CDATA[<h2 id="TCP三次握手四次挥手"><a href="#TCP三次握手四次挥手" class="headerlink" title="TCP三次握手四次挥手"></a>TCP三次握手四次挥手</h2><h3 id="TCP的状态-SYN-FIN-ACK-PSH-RST-URG"><a href="#TCP的状态-SYN-FIN-ACK-PSH-RST-URG" class="headerlink" title="TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)"></a>TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)</h3><blockquote>
<p>在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.</p>
<p>其中，对于我们日常的分析有用的就是前面的五个字段。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SYN表示建立连接，</span><br><span class="line"></span><br><span class="line">FIN表示关闭连接，</span><br><span class="line"></span><br><span class="line">ACK表示响应，</span><br><span class="line"></span><br><span class="line">PSH表示有 DATA数据传输，</span><br><span class="line"></span><br><span class="line">RST表示连接重置。</span><br></pre></td></tr></table></figure>
<p>其中，ACK是可能与SYN，FIN等同时使用的，比如SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，</p>
<p>如果只是单个的一个SYN，它表示的只是建立连接。</p>
<p>TCP的几次握手就是通过这样的ACK表现出来的。</p>
<p>但<code>SYN</code>与<code>FIN</code>是不会同时为1的，因为前者表示的是<code>建立连接</code>，而后者表示的是<code>断开连接</code>。</p>
<p>RST一般是在FIN之后才会出现为1的情况，表示的是连接重置。</p>
<p> 一般地，当出现FIN包或RST包时，我们便认为客户端与服务器端断开了连接；而当出现SYN和SYN＋ACK包时，我们认为客户端与服务器建立了一个连接。</p>
<p>PSH为1的情况，一般只出现在 DATA内容不为0的包中，也就是说PSH为1表示的是有真正的TCP数据包内容被传递。</p>
<p>TCP的连接建立和连接关闭，都是通过请求－响应的模式完成的。</p>
<p>概念补充-TCP三次握手：</p>
<p>TCP(Transmission Control Protocol)传输控制协议</p>
<p>TCP是主机对主机层的传输控制协议，提供可靠的连接服务，采用三次握手确认建立一个连接：</p>
<p>位码即tcp标志位，有6种标示：</p>
<p><code>SYN</code>(synchronous建立联机) </p>
<p><code>ACK</code>(acknowledgement 确认) </p>
<p><code>PSH</code>(push传送) </p>
<p><code>FIN</code>(finish结束) </p>
<p><code>RST</code>(reset重置) </p>
<p><code>URG</code>(urgent紧急)</p>
<p><code>Sequence number</code>(顺序号码，用小写<code>seq</code>代替) </p>
<p><code>Acknowledge number</code>(确认号码，用小写<code>ack</code>代替)</p>
<h3 id="TCP连接的建立（三次握手）"><a href="#TCP连接的建立（三次握手）" class="headerlink" title="TCP连接的建立（三次握手）"></a>TCP连接的建立（三次握手）</h3><blockquote>
<p>TCP三次握手如图：</p>
</blockquote>
<p><img src="/blog/dist/.io//img1.png" alt="img text"></p>
<ol>
<li>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；</li>
<li>TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位<code>SYN=1</code>，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。<font color="red">TCP规定，SYN报文段（<code>SYN=1</code>的报文段）不能携带数据，但需要消耗掉一个序号。</font></li>
<li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 <code>ACK=1</code>，<code>SYN=1</code>，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。<font color="red">这个报文也不能携带数据，但是同样要消耗一个序号。</font></li>
<li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的<code>ACK=1</code>，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。<font color="red">TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</font></li>
<li>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。</li>
</ol>
<h3 id="为什么TCP客户端最后还要发送一次确认呢？"><a href="#为什么TCP客户端最后还要发送一次确认呢？" class="headerlink" title="为什么TCP客户端最后还要发送一次确认呢？"></a>为什么TCP客户端最后还要发送一次确认呢？</h3><p>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p>
<p>如果使用的是两次握手建立连接，假设有这样一种场景，<font color="blue">客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，</font>由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。<font color="blue">此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</font></p>
<p>如果采用的是三次握手，就算是<font color="green">那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。</font>由于服务器收不到确认，就知道客户端并没有请求连接。</p>
<blockquote>
<p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。tcp四次挥手如图：</p>
</blockquote>
<p><img src="/blog/dist/.io//img2.png" alt="img text"></p>
<ol>
<li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 <font color="red" face="黑体">TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</font></li>
<li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。<font color="red" face="黑体">TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。</font><font color="blue">这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</font></li>
<li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文<font color="red">（在这之前还需要接受服务器发送的最后的数据）。</font></li>
<li>01服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li>
<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。<font color="red">注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</font></li>
<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。<font color="red">可以看到，服务器结束TCP连接的时间要比客户端早一些。</font></li>
</ol>
<h3 id="为什么客户端最后还要等待2MSL？"><a href="#为什么客户端最后还要等待2MSL？" class="headerlink" title="为什么客户端最后还要等待2MSL？"></a>为什么客户端最后还要等待2MSL？</h3><p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</p>
<p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，<font color="blue">站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，</font>而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p>
<p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>
<p>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p>
<p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。 </p>
<p>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>
<h3 id="如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h3><p>TCP还设有一个<code>保活计时器</code>，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，<font color="blue">时间通常是设置为2小时</font>，若两小时还没有收到客户端的任何数据，服务器就会发送一个<font color="blue">探测报文段，以后每隔75秒发送一次</font>。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>
]]></content>
      <categories>
        <category>tcp连接、断开连接</category>
      </categories>
      <tags>
        <tag>tcp连接、断开连接</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的双向绑定</title>
    <url>/blog/dist/2019/01/02/vue/</url>
    <content><![CDATA[<h1 id="简易Vue实现"><a href="#简易Vue实现" class="headerlink" title="简易Vue实现"></a>简易Vue实现</h1><blockquote>
<p>本人练习制作的(网速慢的时候，页面会显示源码)<a href="https://dangchaofeng.github.io/vue-simple/cf-result/index.html">简易版vue</a></p>
</blockquote>
<blockquote>
<p>演示版的源码（含清晰注释/cf-result文件下）<a href="https://github.com/dangchaofeng/vue-simple">在这里</a></p>
</blockquote>
<blockquote>
<p>要实现简单的vue，必须掌握两点：</p>
</blockquote>
<ul>
<li>数据劫持，Object.defineProperty()</li>
<li>发布-订阅模式 </li>
</ul>
<h2 id="创建对象的方法"><a href="#创建对象的方法" class="headerlink" title="创建对象的方法"></a>创建对象的方法</h2><h3 id="字面量创建法"><a href="#字面量创建法" class="headerlink" title="字面量创建法"></a>字面量创建法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;</span><br><span class="line">    name: <span class="string">&#x27;DangChaofeng&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;25&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="构造函数创建法"><a href="#构造函数创建法" class="headerlink" title="构造函数创建法"></a>构造函数创建法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> people = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">people.name = <span class="string">&#x27;DangChaofeng&#x27;</span>;</span><br><span class="line">people.age = <span class="string">&#x27;25&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>创建出来的对象，我们可以对它进行任意操作，增删改查均可以。</p>
<p>Eg:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加：</span></span><br><span class="line">people.gender = <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">delete</span> people.gender;</span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line">people.name = <span class="string">&#x27;Suliang&#x27;</span>;</span><br><span class="line"><span class="comment">// 查(获取)</span></span><br><span class="line">people.name</span><br></pre></td></tr></table></figure>
<p>但是你们有没有想过，为什么我们可以对它进行增删改查呢？我们已经知道对象是一个键值对，key-value（属性-值）的存在，少有人去知道，对象属性还有自己的特性。</p>
<h2 id="对象属性的四大特性"><a href="#对象属性的四大特性" class="headerlink" title="对象属性的四大特性"></a>对象属性的四大特性</h2><h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> tempVar = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        tempVar = val;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tempVar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里需要说明下： 如果我们不使用Object.defineProperty()来创建属性，默认创建出来的属性的特性，均为true,如果使用Object.defineProperty()来创建属性，不写的特性，均默认为fasle。</p>
<p>如果我不写writable: true，则可写行性为false,赋值操作将失败。</p>
<p>VUE中的<code>数据劫持</code>，就是利用对象的访问器属性，通过Object.defineProperty()来劫持对象属性的setter和getter操作，在数据变动时做你想要做的事情。</p>
<h2 id="发布-订阅者模式"><a href="#发布-订阅者模式" class="headerlink" title="发布-订阅者模式"></a>发布-订阅者模式</h2><blockquote>
<p>jq的$().on()、$().trigger()；就是典型的一种发布订阅模式实现。下来我们实现自己的一个简易版发布订阅者模式：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Public</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 一个中间站，是用来收集存储并建立发布者和订阅者之间的联系：</span></span><br><span class="line">  <span class="built_in">this</span>.handlers = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Public.prototype = &#123;</span><br><span class="line">    <span class="comment">// 订阅事件</span></span><br><span class="line">    on: <span class="function"><span class="keyword">function</span>(<span class="params">eventType, handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">// 如果不存在这个事件，则初始化，值是一个数组。(因为对一个事件可以监听多次，挂不同的回调函数，所以事件名称对应多个事件函数).</span></span><br><span class="line">        <span class="keyword">if</span>(!(eventType <span class="keyword">in</span> self.handlers)) &#123;</span><br><span class="line">           self.handlers[eventType] = [];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           self.handlers[eventType].push(handler);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="comment">// 触发事件(发布事件) 循环执行事件对应的所有事件函数，并把参数带进入。</span></span><br><span class="line">    emit: <span class="function"><span class="keyword">function</span>(<span class="params">eventType</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">       <span class="keyword">var</span> handlerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; self.handlers[eventType].length; i++) &#123;</span><br><span class="line">         self.handlers[eventType][i].apply(self,handlerArgs);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> self;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 删除订阅事件</span></span><br><span class="line">    off: <span class="function"><span class="keyword">function</span>(<span class="params">eventType, handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> currentEvent = <span class="built_in">this</span>.handlers[eventType];</span><br><span class="line">        <span class="keyword">var</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (currentEvent) &#123;</span><br><span class="line">            len = currentEvent.length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (currentEvent[i] === handler)&#123;</span><br><span class="line">                    currentEvent.splice(i, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> Publisher = <span class="keyword">new</span> Public();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//订阅事件a</span></span><br><span class="line">Publisher.on(<span class="string">&#x27;a&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span> + data);</span><br><span class="line">&#125;);</span><br><span class="line">Publisher.on(<span class="string">&#x27;a&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span> + data);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//触发事件a</span></span><br><span class="line">Publisher.emit(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;我是第1次调用的参数&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">Publisher.emit(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;我是第2次调用的参数&#x27;</span>);　</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>vue</category>
        <category>数据劫持</category>
        <category>发布订阅</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>数据劫持</tag>
        <tag>发布订阅</tag>
      </tags>
  </entry>
  <entry>
    <title>webdriverio-cucumber</title>
    <url>/blog/dist/2020/10/20/webdriverio-cucumber/</url>
    <content><![CDATA[<h1 id="webdriverIO-cucumber"><a href="#webdriverIO-cucumber" class="headerlink" title="webdriverIO-cucumber"></a>webdriverIO-cucumber</h1><p><a href="https://github.com/dangchaofeng/webdriverIO-cucumber">博客地址</a> 【直接下载，<code>npm install</code> ， <code>npm run test</code> 即可快速开始进入demo code】</p>
<blockquote>
<p>本用例使用的是webdriverIo基本的cli架构，然后自定义使用cucumber来进行e2e的语法定义以及文档输出。</p>
</blockquote>
<ul>
<li><p>开场提示： </p>
<ul>
<li>对node有版本要求， 10.14.0+</li>
<li>如果chromDriver下载失败，可能就需要翻墙了</li>
<li>案例中的网址，是需要翻墙才能访问的</li>
</ul>
</li>
<li><p><a href="https://webdriver.io/docs/gettingstarted.html">webdriverio参考</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/3857f2c3a8d4">cucumber基本语法入门</a></p>
</li>
<li><p><code>Expect </code>强烈建议使用webdriverio内置的，不需要额外加载chai的断言库，因为这是e2e基于浏览器的实现，很多基于DOM操作的内容，使用内置的更加方便合理，使用chai反而增加了复杂度</p>
</li>
<li><p>为何不使用selenium-standalone-service</p>
<ul>
<li>其一：个人学习使用的话，本地基于chromedriver浏览器足以</li>
<li>其二：selenium-standalone-service 启动的时候，会比webdriver卡很多(也有可能是本人电脑配置过低导致，但总体来说，个人练习足够)</li>
</ul>
</li>
<li><p>什么时候使用selenium-standalone-service</p>
<ul>
<li>当你真正项目中使用e2e的时候，selenium-standalone提供良好浏览器的支持。<ul>
<li><a href="https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver">ChromeDriver</a></li>
<li><a href="https://github.com/SeleniumHQ/selenium/wiki/FirefoxDriver">FirefoxDriver</a></li>
<li><a href="https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver">IEDriver</a></li>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads">Edge WebDriver</a></li>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads">Chromium Edge WebDriver</a></li>
</ul>
</li>
</ul>
</li>
<li><p>你也可以根据公司的实际需求使用其他的service,eg: <code>sauce</code> </p>
</li>
<li><p>为什么使用cucumber</p>
<ul>
<li><p>来看看最最简单的实用语法示例</p>
<figure class="highlight feature"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Feature</span>: Login <span class="keyword">Feature</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Scenario</span>: My Login application</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Given</span> I open my loginpage</span><br><span class="line">        <span class="keyword">When</span> I login into my account</span><br><span class="line">        <span class="keyword">Then</span> Something is exit</span><br></pre></td></tr></table></figure></li>
<li><p>上面可以看出，语法的三大要素很明确</p>
<ul>
<li>Given 给定一个初始场景</li>
<li>When 给定一个条件</li>
<li>Then 开始进行结果断言</li>
</ul>
</li>
<li><p>这就是理由！</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>e2e</category>
        <category>webdriverio</category>
        <category>cucumber</category>
      </categories>
      <tags>
        <tag>e2e</tag>
        <tag>webdriverio</tag>
        <tag>cucumber</tag>
      </tags>
  </entry>
  <entry>
    <title>转载-实现标准Promise规范</title>
    <url>/blog/dist/2019/01/02/promise/</url>
    <content><![CDATA[<p><img src="http://www.hankill.com/wp-content/uploads/2018/08/WX20180803-103846.png" alt="image text"></p>
<blockquote>
<p>原文：<a href="https://juejin.im/post/5b2f02cd5188252b937548ab">BAT前端经典面试问题：史上最最最详细的手写Promise教程</a></p>
</blockquote>
<p>es6出现了Promise,es7出现了async，基于Promise的实现，写出来一套同步洗写法的语法糖。掌握Promise的实现原理至关重要：</p>
<p>可以参照<a href="https://link.juejin.im/?target=https://promisesaplus.com">promisesA+规范</a></p>
<h1 id="Promise-的声明"><a href="#Promise-的声明" class="headerlink" title="Promise 的声明"></a>Promise 的声明</h1><p>首先呢，promise肯定是一个类，我们就用class来声明。</p>
<p>由于<code>new Promise((resolve, reject)=&gt;&#123;&#125;)</code>，所以传入一个参数（函数），叫他executor，传入就执行。<br>executor里面有两个参数，一个叫<code>resolve</code>（成功），一个叫<code>reject</code>（失败）。<br>由于resolve和reject可执行，所以都是函数，我们用let声明。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="comment">// 构造器</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function">() =&gt;</span> &#123; &#125;;</span><br><span class="line">    <span class="comment">// 失败</span></span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function">() =&gt;</span> &#123; &#125;;</span><br><span class="line">    <span class="comment">// 立即执行</span></span><br><span class="line">    executor(resolve, reject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决基本状态"><a href="#解决基本状态" class="headerlink" title="解决基本状态"></a>解决基本状态</h2><h4 id="Promise规定："><a href="#Promise规定：" class="headerlink" title="Promise规定："></a>Promise规定：</h4><ul>
<li>Promise存在三个状态（state）pending、fulfilled、rejected</li>
<li>pending（等待态）为初始态，并可以转化为fulfilled（成功态）和rejected（失败态）</li>
<li>成功时，不可转为其他状态，且必须有一个不可改变的值（value）</li>
<li>失败时，不可转为其他状态，且必须有一个不可改变的原因（reason）</li>
<li><code>new Promise((resolve, reject)=&gt;&#123;resolve(value)&#125;)</code> resolve为成功，接收参数value，状态改变为fulfilled，不可再次改变。</li>
<li><code>new Promise((resolve, reject)=&gt;&#123;reject(reason)&#125;)</code> reject为失败，接收参数reason，状态改变为rejected，不可再次改变。</li>
<li>若是executor函数报错 直接执行reject();</li>
</ul>
<p>于是乎，我们获得以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 初始化state为等待态</span></span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="comment">// 成功的值</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 失败的原因</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// state改变,resolve调用就会失败</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// resolve调用后，state转化为成功态</span></span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">        <span class="comment">// 储存成功的值</span></span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// state改变,reject调用就会失败</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// reject调用后，state转化为失败态</span></span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">        <span class="comment">// 储存失败的原因</span></span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 如果executor执行报错，直接执行reject</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h2><h4 id="Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因"><a href="#Promise有一个叫做then的方法，里面有两个参数：onFulfilled-onRejected-成功有成功的值，失败有失败的原因" class="headerlink" title="Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因"></a>Promise有一个叫做then的方法，里面有两个参数：onFulfilled,onRejected,成功有成功的值，失败有失败的原因</h4><ul>
<li>当状态state为fulfilled，则执行onFulfilled，传入this.value。当状态state为rejected，则执行onRejected，传入this.reason</li>
<li>onFulfilled,onRejected如果他们是函数，则必须分别在fulfilled，rejected后被调用，value或reason依次作为他们的第一个参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span>&#123;...&#125;</span><br><span class="line">  <span class="comment">// then 方法 有两个参数onFulfilled onRejected</span></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled,onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 状态为fulfilled，执行onFulfilled，传入成功的值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 状态为rejected，执行onRejected，传入失败的原因</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决异步实现"><a href="#解决异步实现" class="headerlink" title="解决异步实现"></a>解决异步实现</h2><p><strong>现在基本可以实现简单的同步代码，但是当resolve在setTomeout内执行，then时state还是pending等待状态 我们就需要在then调用的时候，将成功和失败存到各自的数组，一旦reject或者resolve，就调用它们</strong><br>类似于发布订阅，先将then里面的两个函数储存起来，由于一个promise可以有多个then，所以存在同一个数组内。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 多个then的情况</span><br><span class="line">let p &#x3D; new Promise();</span><br><span class="line">p.then();</span><br><span class="line">p.then();</span><br></pre></td></tr></table></figure>
<p>成功或者失败时，forEach调用它们</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 成功存放的数组</span></span><br><span class="line">    <span class="built_in">this</span>.onResolvedCallbacks = [];</span><br><span class="line">    <span class="comment">// 失败存放法数组</span></span><br><span class="line">    <span class="built_in">this</span>.onRejectedCallbacks = [];</span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="comment">// 一旦resolve执行，调用成功数组的函数</span></span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="comment">// 一旦reject执行，调用失败数组的函数</span></span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled,onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 当状态state为pending时</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// onFulfilled传入到成功数组</span></span><br><span class="line">      <span class="built_in">this</span>.onResolvedCallbacks.push(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// onRejected传入到失败数组</span></span><br><span class="line">      <span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决链式调用"><a href="#解决链式调用" class="headerlink" title="解决链式调用"></a>解决链式调用</h2><p><strong>我门常常用到new Promise().then().then(),这就是链式调用，用来解决回调地狱</strong><br>1、为了达成链式，我们默认在第一个then里返回一个promise。<a href="https://link.juejin.im/?target=https://promisesaplus.com">秘籍</a>规定了一种方法，就是在then里面返回一个新的promise,称为promise2：<code>promise2 = new Promise((resolve, reject)=&gt;&#123;&#125;)</code></p>
<ul>
<li>将这个promise2返回的值传递到下一个then中</li>
<li>如果返回一个普通的值，则将普通的值传递给下一个then中</li>
</ul>
<p>2、当我们在第一个then中<code>return</code>了一个参数（参数未知，需判断）。这个return出来的新的promise就是onFulfilled()或onRejected()的值<br>规定onFulfilled()或onRejected()的值，即第一个then返回的值，叫做x，判断x的函数叫做resolvePromise</p>
<ul>
<li>首先，要看x是不是promise。</li>
<li>如果是promise，则取它的结果，作为新的promise2成功的结果</li>
<li>如果是普通值，直接作为promise2成功的结果</li>
<li>所以要比较x和promise2</li>
<li>resolvePromise的参数有promise2（默认返回的promise）、x（我们自己<code>return</code>的对象）、resolve、reject</li>
<li>resolve和reject是promise2的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.onResolvedCallbacks = [];</span><br><span class="line">    <span class="built_in">this</span>.onRejectedCallbacks = [];</span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled,onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 声明返回的promise2</span></span><br><span class="line">    <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">        <span class="comment">// resolvePromise函数，处理自己return的promise和默认的promise2的关系</span></span><br><span class="line">        resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">        resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.push(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 返回promise，完成链式</span></span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完成resolvePromise函数"><a href="#完成resolvePromise函数" class="headerlink" title="完成resolvePromise函数"></a>完成resolvePromise函数</h2><p>规定了一段代码，让不同的promise代码互相套用，叫做resolvePromise</p>
<ul>
<li>如果 x === promise2，则是会造成循环引用，自己等待自己完成，则报“循环引用”错误</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = p.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 循环引用，自己等待自己完成，一辈子完不成</span></span><br><span class="line">  <span class="keyword">return</span> p2;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>1、判断x</p>
<ul>
<li><strong>Otherwise, if x is an object or function,Let then be x.then</strong></li>
<li>x 不能是null</li>
<li>x 是普通值 直接resolve(x)</li>
<li>x 是对象或者函数（包括promise），<code>let then = x.then</code> 2、当x是对象或者函数（默认promise）</li>
<li>声明了then</li>
<li>如果取then报错，则走reject()</li>
<li>如果then是个函数，则用call执行then，第一个参数是this，后面是成功的回调和失败的回调</li>
<li>如果成功的回调还是pormise，就递归继续解析 3、成功和失败只能调用一个 所以设定一个called来防止多次调用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 循环引用报错</span></span><br><span class="line">  <span class="keyword">if</span>(x === promise2)&#123;</span><br><span class="line">    <span class="comment">// reject报错</span></span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 防止多次调用</span></span><br><span class="line">  <span class="keyword">let</span> called;</span><br><span class="line">  <span class="comment">// x不是null 且x是对象或者函数</span></span><br><span class="line">  <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// A+规定，声明then = x的then方法</span></span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="comment">// 如果then是函数，就默认是promise了</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 就让then执行 第一个参数是this   后面是成功的回调 和 失败的回调</span></span><br><span class="line">        then.call(x, <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 成功和失败只能调用一个</span></span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          <span class="comment">// resolve的结果依旧是promise 那就继续解析</span></span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 成功和失败只能调用一个</span></span><br><span class="line">          <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(err);<span class="comment">// 失败了就失败了</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x); <span class="comment">// 直接成功即可</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 也属于失败</span></span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 取then出错了那就不要在继续执行了</span></span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决其他问题"><a href="#解决其他问题" class="headerlink" title="解决其他问题"></a>解决其他问题</h2><p>1、规定onFulfilled,onRejected都是可选参数，如果他们不是函数，必须被忽略</p>
<ul>
<li>onFulfilled返回一个普通的值，成功时直接等于 <code>value =&gt; value</code></li>
<li>onRejected返回一个普通的值，失败时如果直接等于 value =&gt; value，则会跑到下一个then中的onFulfilled中，所以直接扔出一个错误<code>reason =&gt; throw err</code> 2、<a href="https://link.juejin.im/?target=https://promisesaplus.com">秘籍</a>规定onFulfilled或onRejected不能同步被调用，必须异步调用。我们就用setTimeout解决异步问题</li>
<li>如果onFulfilled或onRejected报错，则直接返回reject()</li>
</ul>
<p>顺便附赠catch和resolve、reject、race、all方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.onResolvedCallbacks = [];</span><br><span class="line">    <span class="built_in">this</span>.onRejectedCallbacks = [];</span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled,onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// onFulfilled如果不是函数，就忽略onFulfilled，直接返回value</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">    <span class="comment">// onRejected如果不是函数，就忽略onRejected，直接扔出错误</span></span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;;</span><br><span class="line">    <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 异步</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 异步</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 如果报错</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 异步</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 异步</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 返回promise，完成链式</span></span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.state = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="built_in">this</span>.onResolvedCallbacks = [];</span><br><span class="line">    <span class="built_in">this</span>.onRejectedCallbacks = [];</span><br><span class="line">    <span class="keyword">let</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.forEach(<span class="function"><span class="params">fn</span>=&gt;</span>fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      executor(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled,onRejected</span>)</span> &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;;</span><br><span class="line">    <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(fn)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>,fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x === promise2)&#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> called;</span><br><span class="line">  <span class="keyword">if</span> (x != <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        then.call(x, <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(called)<span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(called)<span class="keyword">return</span>;</span><br><span class="line">          called = <span class="literal">true</span>;</span><br><span class="line">          reject(err);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span>(called)<span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//resolve方法</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(val)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//reject方法</span></span><br><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    reject(val)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//race方法 </span></span><br><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">            promises[i].then(resolve, reject)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//all方法(获取所有的promise，都执行then，把结果放到数组，一起返回) 进行修订，processData添加resolve传参</span></span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">processData</span>(<span class="params">index, data, resolve</span>) </span>&#123;</span><br><span class="line">        arr[index] = data;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i == promises.length) &#123;</span><br><span class="line">            resolve(arr);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.length; i++) &#123;</span><br><span class="line">            promises[i].then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                processData(i, data, resolve);</span><br><span class="line">            &#125;, reject);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何验证我们的promise是否正确"><a href="#如何验证我们的promise是否正确" class="headerlink" title="如何验证我们的promise是否正确"></a>如何验证我们的promise是否正确</h2><p>1、先在后面加上下述代码<br>2、npm 有一个promises-aplus-tests插件 npm i promises-aplus-tests -g 可以全局安装 mac用户最前面加上sudo<br>3、命令行 promises-aplus-tests [js文件名] 即可验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目前是通过他测试 他会测试一个对象</span></span><br><span class="line"><span class="comment">// 语法糖</span></span><br><span class="line"><span class="built_in">Promise</span>.defer = <span class="built_in">Promise</span>.deferred = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dfd = &#123;&#125;</span><br><span class="line">  dfd.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    dfd.resolve = resolve;</span><br><span class="line">    dfd.reject = reject;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> dfd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span>;</span><br><span class="line"><span class="comment">//npm install promises-aplus-tests 用来测试自己的promise 符不符合promisesA+规范</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>promise</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>promise</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
